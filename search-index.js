var searchIndex = JSON.parse('{\
"massa_api":{"doc":"Json RPC API for a massa-node","t":[3,3,8,3,3,8,3,10,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,10,10,12,12,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,10,10,12,10,10,10,10,10,12,10,10,10,11,11,11,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11],"n":["API","APISettings","Endpoints","Private","Public","RpcServer","StopHandle","add_staking_secret_keys","api_settings","api_settings","bind_private","bind_public","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compensation_millis","consensus_command_sender","consensus_command_sender","consensus_config","consensus_config","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","draw_lookahead_period_count","drop","drop","drop","drop","drop","execute_read_only_bytecode","execute_read_only_call","execution_controller","execution_controller","fmt","from","from","from","from","from","get_addresses","get_block","get_cliques","get_datastore_entry","get_endorsements","get_filtered_sc_output_event","get_graph_interval","get_operations","get_stakers","get_staking_addresses","get_status","init","init","init","init","init","into","into","into","into","into","max_arguments","network_command_sender","network_command_sender","network_settings","new","new","node_ban_by_id","node_ban_by_ip","node_id","node_remove_from_whitelist","node_sign_message","node_unban_by_id","node_unban_by_ip","node_whitelist","pool_command_sender","remove_staking_addresses","send_operations","serve","serve","serve","stop","stop_node","stop_node_channel","to_delegate","to_delegate","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","version","vzip","vzip","vzip","vzip","vzip"],"q":["massa_api","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The API wrapper","API settings. the API settings","Exposed API endpoints","Private API content","Public API component","Used to manage the API","Used to be able to stop the API","Add a vector of new keys for the node to use to stake. No …","API settings","API settings","bind for the private API","bind for the public API","","","","","","","","","","","","","compensation milliseconds (used to sync time with …","link to the consensus component","link to the consensus component","consensus configuration (TODO: remove it, can be retrieved …","consensus configuration (TODO: remove it, can be retrieved …","","","","","","","","","","","","when looking for next draw we want to look at max …","","","","","","Execute bytecode in read-only mode.","Execute an SC function in read-only mode.","link to the execution component","link to the execution component","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get addresses.","Get information on a block given its hash.","Get cliques.","Get a datastore entry","Get endorsements (not yet implemented).","Get events optionally filtered by:","Get the block graph within the specified time interval. …","Returns operations information associated to a given list …","Returns the active stakers and their active roll counts …","Return hash set of staking addresses.","Summary of the current state: time, last final blocks …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","max argument count","link to the network component","link to the network component","network setting (TODO consider removing)","generate a new public API","generate a new private API","Bans given node id. No confirmation to expect.","Bans given IP address(es). No confirmation to expect.","our node id","remove from whitelist given IP address. keep it as standard","Sign message with node’s key. Returns the public key …","Unbans given node id. No confirmation to expect.","Unbans given IP address(es). No confirmation to expect.","whitelist given IP address. No confirmation to expect. …","link to the pool component","Remove a vector of addresses used to stake. No …","Adds operations to pool. Returns operations that were ok …","Start the API","","","stop the API gracefully","Gracefully stop the node.","stop channel","Create an <code>IoDelegate</code>, wiring rpc calls to the trait …","Create an <code>IoDelegate</code>, wiring rpc calls to the trait …","","","","","","","","","","","","","","","","","node version (TODO remove, can be retrieved via an …","","","","",""],"i":[0,0,0,0,0,0,0,51,39,47,5,5,39,47,40,46,5,39,47,40,46,5,5,5,39,39,47,39,47,39,47,40,46,5,39,47,40,46,5,5,5,39,47,40,46,5,51,51,39,47,5,39,47,40,46,5,51,51,51,51,51,51,51,51,51,51,51,39,47,40,46,5,39,47,40,46,5,5,39,47,39,40,40,51,51,39,51,51,51,51,51,39,51,51,52,40,40,46,51,47,51,51,5,39,47,40,46,5,39,47,40,46,5,39,47,40,46,5,39,39,47,40,46,5],"f":[0,0,0,0,0,0,0,[[[2,[1]]],[[4,[[3,[0]]]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,5],[[]],0,0,0,0,0,[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[],[[3,[5]]]],0,[6],[6],[6],[6],[6],[[[2,[7]]],[[4,[[3,[[2,[8]],0]]]]]],[[[2,[9]]],[[4,[[3,[[2,[8]],0]]]]]],0,0,[[5,10],11],[[]],[[]],[[]],[[]],[[]],[[[2,[12]]],[[4,[[3,[[2,[13]],0]]]]]],[14,[[4,[[3,[15,0]]]]]],[[],[[4,[[3,[[2,[16]],0]]]]]],[17,[[4,[[3,[18,0]]]]]],[[[2,[19]]],[[4,[[3,[[2,[20]],0]]]]]],[21,[[4,[[3,[[2,[22]],0]]]]]],[23,[[4,[[3,[[2,[24]],0]]]]]],[[[2,[25]]],[[4,[[3,[[2,[26]],0]]]]]],[[],[[4,[[3,[2,0]]]]]],[[],[[4,[[3,[[27,[12]],0]]]]]],[[],[[4,[[3,[28,0]]]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[29,[31,[30]],5,32,33,34,35,36,37,38],[[40,[39]]]],[[29,36,[31,[30]],5,32]],[[[2,[38]]],[[4,[[3,[0]]]]]],[[[2,[41]]],[[4,[[3,[0]]]]]],0,[[[2,[41]]],[[4,[[3,[0]]]]]],[[[2,[42]]],[[4,[[3,[43,0]]]]]],[[[2,[38]]],[[4,[[3,[0]]]]]],[[[2,[41]]],[[4,[[3,[0]]]]]],[[[2,[41]]],[[4,[[3,[0]]]]]],0,[[[2,[12]]],[[4,[[3,[0]]]]]],[[[2,[44]]],[[4,[[3,[[2,[25]],0]]]]]],[45,46],[[[40,[47]],45],46],[[[40,[39]],45],46],[46],[[],[[4,[[3,[0]]]]]],0,[[],[[49,[48]]]],[[],[[49,[48]]]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],50],[[],50],[[],50],[[],50],[[],50],0,[[]],[[]],[[]],[[]],[[]]],"p":[[3,"KeyPair"],[3,"Vec"],[4,"Result"],[6,"BoxFuture"],[3,"APISettings"],[15,"usize"],[3,"ReadOnlyBytecodeExecution"],[3,"ExecuteReadOnlyResponse"],[3,"ReadOnlyCall"],[3,"Formatter"],[6,"Result"],[3,"Address"],[3,"AddressInfo"],[3,"BlockId"],[3,"BlockInfo"],[3,"Clique"],[3,"DatastoreEntryInput"],[3,"DatastoreEntryOutput"],[3,"EndorsementId"],[3,"EndorsementInfo"],[3,"EventFilter"],[3,"SCOutputEvent"],[3,"TimeInterval"],[3,"BlockSummary"],[3,"OperationId"],[3,"OperationInfo"],[6,"Set"],[3,"NodeStatus"],[3,"ConsensusCommandSender"],[8,"ExecutionController"],[3,"Box"],[3,"ConsensusConfig"],[3,"PoolCommandSender"],[3,"NetworkSettings"],[3,"Version"],[3,"NetworkCommandSender"],[15,"i64"],[3,"NodeId"],[3,"Public"],[3,"API"],[4,"IpAddr"],[15,"u8"],[3,"PubkeySig"],[3,"OperationInput"],[4,"SocketAddr"],[3,"StopHandle"],[3,"Private"],[8,"Metadata"],[3,"IoDelegate"],[3,"TypeId"],[8,"Endpoints"],[8,"RpcServer"]]},\
"massa_async_pool":{"doc":"Copyright (c) 2022 MASSA LABS info@massa.net","t":[12,13,3,3,6,3,3,3,3,3,3,3,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["0","Add","AsyncMessage","AsyncMessageDeserializer","AsyncMessageId","AsyncMessageIdDeserializer","AsyncMessageIdSerializer","AsyncMessageSerializer","AsyncPool","AsyncPoolChanges","AsyncPoolChangesDeserializer","AsyncPoolChangesSerializer","AsyncPoolConfig","Change","Delete","apply_changes_unchecked","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","coins","compute_id","data","default","default","default","default","default","default","default","deserialize","deserialize","deserialize","deserialize","destination","emission_index","emission_slot","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","gas_price","get_pool_part","handler","into","into","into","into","into","into","into","into","into","into","into","max_gas","max_length","ne","ne","ne","new","new","new","new","new","new","new","push_add","push_delete","sender","serialize","serialize","serialize","serialize","set_pool_part","settle_slot","take_batch_to_execute","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validity_end","validity_start","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","1"],"q":["massa_async_poolmassa_async_pool::Change","",""],"d":["","an item with identifier T and value U is added","Structure defining an asynchronous smart contract message","","Unique identifier of a message. Also has the property of …","","","","Represents a pool of sorted messages in a deterministic …","represents a list of additions and deletions to the …","","<code>AsyncPoolChanges</code> serializer","Asynchronous pool configuration","Enum representing a value U with identifier T being added …","an item with identifier T is deleted","Applies pre-compiled <code>AsyncPoolChanges</code> to the pool without …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Coins sent from the sender to the target address of the …","Compute the ID of the message for use when choosing which …","Raw payload data of the message","","","","","","","","","","","","The address towards which the message is being sent","Index of the emitted message within the <code>emission_slot</code>. …","Slot at which the message was emitted","","","","Extends self with another another <code>AsyncPoolChanges</code>. This …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gas price to take into account when executing the message. …","Used for bootstrap Take a part of the async pool starting …","the handler function name within the destination address’…","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Maximum gas to use when processing the message","max number of messages in the pool","","","","","","","","","","Creates an empty <code>AsyncPool</code>","Pushes a message addition to the list of changes. No …","Pushes a message deletion to the list of changes. No …","The address that sent the message","","","","","Set a part of the async pool. We deserialize in this …","Settles a slot, adding new messages to the pool and …","Takes the best possible batch of messages to execute, with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Slot at which the message stops being valid (bound not …","Slot at which the message starts being valid (bound …","","","","","","","","","","","","","",""],"i":[2,4,0,0,0,0,0,0,0,0,0,0,0,0,4,1,8,9,10,11,12,13,4,2,5,6,1,8,9,10,11,12,13,4,2,5,6,1,4,2,5,6,1,4,2,5,6,1,6,6,6,8,9,10,11,12,13,2,9,11,13,6,6,6,6,4,2,6,2,4,2,5,6,1,8,9,10,11,12,13,4,2,5,6,1,6,1,6,8,9,10,11,12,13,4,2,5,6,1,6,5,4,2,6,8,9,10,11,12,13,1,2,2,6,8,10,12,6,1,1,1,4,2,5,6,1,8,9,10,11,12,13,4,2,5,6,1,8,9,10,11,12,13,4,2,5,6,1,8,9,10,11,12,13,4,2,5,6,1,6,6,8,9,10,11,12,13,4,2,5,6,1,30,31,30],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[4,[3,3]]],[[4,[3,3]]]],[2,2],[5,5],[6,6],[1,1],[[]],[[]],[[]],[[]],[[]],0,[6,7],0,[[],8],[[],9],[[],10],[[],11],[[],12],[[],13],[[],2],[9,[[16,[2,[0,[14,15]]]]]],[11,[[16,[7,[0,[14,15]]]]]],[13,[[16,[6,[0,[14,15]]]]]],[[],[[17,[6]]]],0,0,0,[[[4,[18,18]],4],19],[[2,2],19],[[6,6],19],[[2,2]],[[[4,[20,20]],21],22],[[2,21],22],[[5,21],22],[[6,21],22],[[1,21],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[1,[23,[7]]],[[17,[24]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[4,[18,18]],4],19],[[2,2],19],[[6,6],19],[[],8],[[],9],[[],10],[[],11],[[],12],[[],13],[5,1],[[2,7,6]],[[2,7]],0,[[8,2,25],[[17,[26]]]],[[10,7,25],[[17,[26]]]],[[12,6,25],[[17,[26]]]],[6,17],[1,[[17,[[23,[7]],24]]]],[[1,27,25],25],[[1,27,28],25],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0],"p":[[3,"AsyncPool"],[3,"AsyncPoolChanges"],[8,"Clone"],[4,"Change"],[3,"AsyncPoolConfig"],[3,"AsyncMessage"],[6,"AsyncMessageId"],[3,"AsyncPoolChangesSerializer"],[3,"AsyncPoolChangesDeserializer"],[3,"AsyncMessageIdSerializer"],[3,"AsyncMessageIdDeserializer"],[3,"AsyncMessageSerializer"],[3,"AsyncMessageDeserializer"],[8,"ParseError"],[8,"ContextError"],[6,"IResult"],[4,"Result"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"Option"],[4,"ModelsError"],[3,"Vec"],[4,"SerializeError"],[3,"Slot"],[15,"u64"],[3,"TypeId"],[13,"Add"],[13,"Delete"]]},\
"massa_bootstrap":{"doc":"Bootstrap crate","t":[3,3,6,3,12,12,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,5,12,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,5,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,12,12,6,3,3,3,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BootstrapManager","BootstrapSettings","Establisher","GlobalBootstrapState","bind","bootstrap_list","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cache_duration","clone","clone_into","compensation_millis","connect_timeout","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","enable_clock_synchronization","final_state","fmt","fmt","from","from","from","get_state","graph","init","init","init","into","into","into","ip_list_max_size","max_bytes_read_write","max_ping","max_simultaneous_bootstraps","peers","per_ip_min_interval","pos","read_error_timeout","read_timeout","retry_delay","start_bootstrap_server","stop","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","types","vzip","vzip","vzip","write_error_timeout","write_timeout","Connector","DefaultConnector","DefaultEstablisher","DefaultListener","Duplex","Establisher","Listener","accept","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","connect","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","from","from","from","get_connector","get_listener","init","init","init","into","into","into","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["massa_bootstrap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_bootstrap::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["handle on the bootstrap server","Bootstrap settings. Both bootstrapping at start-up and …","connection establisher","a collection of the bootstrap state snapshots of all …","Port to listen if we choose to allow other nodes to use us …","Ip address of our bootstrap nodes and their public key.","","","","","","","Cache duration","","","timestamp correction in milliseconds","connection timeout","","","","","","","","","","","Enable clock synchronization","state of the final state","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the state from a bootstrap server needs to be …","state of the consensus graph","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Max size of the IP list","Read-Write limitation for a connection in bytes per seconds","Max ping delay.","Max simultaneous bootstraps","list of network peers","Minimum interval between two bootstrap attempts from a …","state of the proof of stake state (distributions, seeds…)","readout error timeout","readout timeout","Time we wait before retrying a bootstrap","TODO merging the command senders into one channel …","stop the bootstrap server","","","","","","","","","","","Connection types","","","","write error timeout","write timeout","connector","Initiates a connection with given timeout in milliseconds","Establishes a connection","The listener we are using","duplex connection","connection establisher","listener","Accepts a new incoming connection from this listener.","","","","","","","Tries to connect to address","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the connector with associated timeout","Gets the associated listener","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates an Establisher.","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,19,1,6,19,1,6,1,1,1,6,1,19,1,6,19,1,6,1,19,1,6,1,6,1,6,19,1,6,0,6,19,1,6,19,1,6,1,1,1,1,6,1,6,1,1,1,0,19,1,19,1,6,19,1,6,19,1,6,0,19,1,6,1,1,0,0,0,0,0,0,0,21,21,22,24,21,22,24,22,24,21,22,24,21,22,24,21,22,24,21,22,24,21,22,24,24,24,21,22,24,21,22,24,24,21,22,24,21,22,24,21,22,24,21,22,24],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[1,1],[[]],0,0,[2],[2],[2],[2],[2],[2],[[],[[3,[1]]]],[2],[2],[2],0,0,[[1,4],5],[[6,4],5],[[]],[[]],[[]],[[1,[9,[[8,[7]]]],10,11,12,[13,[12]]],14],0,[[],2],[[],2],[[],2],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[15,16,[9,[[8,[7]]]],1,10,17,18,11],14],[19,14],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],20],[[],20],[[],20],0,[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[21,14],[[]],[[]],[[]],[[]],[[]],[[]],[[22,23],14],[[],24],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[21,4],5],[[22,4],5],[[24,4],5],[[]],[[]],[[]],[[24,12],14],[[24,23],14],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[],24],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],20],[[],20],[[],20],[[]],[[]],[[]]],"p":[[3,"BootstrapSettings"],[15,"usize"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"GlobalBootstrapState"],[3,"FinalState"],[6,"RwLock"],[3,"Arc"],[6,"Establisher"],[3,"Version"],[3,"MassaTime"],[4,"Option"],[8,"Future"],[3,"ConsensusCommandSender"],[3,"NetworkCommandSender"],[3,"KeyPair"],[15,"i64"],[3,"BootstrapManager"],[3,"TypeId"],[3,"DefaultListener"],[3,"DefaultConnector"],[4,"SocketAddr"],[3,"DefaultEstablisher"]]},\
"massa_cipher":{"doc":"MASSA Cipher crate","t":[4,13,13,13,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["CipherError","DecryptionError","EncryptionError","Utf8Error","borrow","borrow_mut","decrypt","encrypt","fmt","fmt","from","from","into","source","to_string","try_from","try_into","type_id","vzip","0","0","0"],"q":["massa_cipher","","","","","","","","","","","","","","","","","","","massa_cipher::CipherError","",""],"d":["Cipher error","Decryption error: {0}","Encryption error: {0}","Utf8 error: {0}","","","Decryption function using AES-GCM cipher.","Encryption function using AES-GCM cipher.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,2,2,2,2,2,0,0,2,2,2,2,2,2,2,2,2,2,2,13,14,15],"f":[0,0,0,0,[[]],[[]],[1,[[3,[2]]]],[1,[[3,[[5,[4]],2]]]],[[2,6],7],[[2,6],7],[[]],[8,2],[[]],[2,[[10,[9]]]],[[],11],[[],3],[[],3],[[],12],[[]],0,0,0],"p":[[15,"str"],[4,"CipherError"],[4,"Result"],[15,"u8"],[3,"Vec"],[3,"Formatter"],[6,"Result"],[3,"Utf8Error"],[8,"Error"],[4,"Option"],[3,"String"],[3,"TypeId"],[13,"EncryptionError"],[13,"DecryptionError"],[13,"Utf8Error"]]},\
"massa_client":{"doc":"Massa stateless CLI","t":[3,3,5,11,11,11,11,11,0,12,11,12,11,11,11,11,11,12,12,5,12,11,12,12,12,0,11,0,11,11,11,11,11,11,0,11,11,12,12,4,3,3,3,12,12,11,11,11,11,11,11,11,11,13,13,14,11,11,11,11,11,13,11,11,11,11,11,11,11,11,11,11,11,11,13,13,11,11,13,5,13,11,13,11,13,11,5,11,13,12,11,11,11,11,11,11,12,11,12,11,11,11,13,13,13,13,13,13,13,13,13,13,13,11,5,5,11,13,13,14,11,13,5,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,3,3,8,11,11,11,11,11,11,5,11,11,11,11,12,11,11,14,12,12,10,11,5,11,11,11,11,11,11,11,11,11,11,11,3,3,3,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5],"n":["Args","JsonError","ask_password","borrow","borrow","borrow_mut","borrow_mut","clap","cmds","command","erased_serialize","error","from","from","from_clap","into","into","ip","json","main","parameters","parse_args","password","private_port","public_port","repl","serialize","settings","try_from","try_from","try_into","try_into","type_id","type_id","utils","vzip","vzip","wallet","0","Command","CommandIter","ExtendedWallet","ExtendedWalletEntry","address_info","back_idx","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buy_rolls","call_smart_contract","client_warning","clone","clone_into","eq","erased_serialize","erased_serialize","exit","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_str","get","get_addresses","get_block","get_detailed_message","get_documentation","get_endorsements","get_file_as_byte_vec","get_filtered_sc_output_event","get_message","get_operations","get_serializations","get_status","get_str","help","help","help","idx","into","into","into","into","into_iter","iter","keypair","len","marker","new","next","next_back","node_add_staking_secret_keys","node_ban_by_id","node_ban_by_ip","node_get_staking_addresses","node_remove_from_whitelist","node_remove_staking_addresses","node_stop","node_testnet_rewards_program_ownership_proof","node_unban_by_id","node_unban_by_ip","node_whitelist","nth","parse_value","parse_vec","pretty_print","read_only_call","read_only_smart_contract","rpc_error","run","sell_rolls","send_operation","send_smart_contract","send_transaction","serialize","serialize","size_hint","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","wallet_add_secret_keys","wallet_generate_secret_key","wallet_info","wallet_remove_addresses","wallet_sign","when_episode_ends","when_moon","CommandCompletion","CommandHistory","Output","borrow","borrow","borrow_mut","borrow_mut","default","default","expand_path","from","from","get","get_saved_history","history","into","into","massa_fancy_ascii_art_logo","max","options","pretty_print","read","run","stdout_json","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write","write_to_saved_history","DefaultNode","SETTINGS","Settings","__private_field","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default_node","deref","deserialize","deserialize","fmt","fmt","from","from","from","history","history_file_path","into","into","into","ip","private_port","public_port","timeout","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","longest_common_prefix"],"q":["massa_client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_client::cmds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_client::repl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_client::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_client::utils"],"d":["","","Ask for the wallet password If the wallet does not exist, …","","","","","","","Command that client would execute (non-interactive mode)","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Address to listen on","Enable a mode where input/output are serialized as JSON","","Optional command parameter (as a JSON string)","","Wallet password","Port to listen on (Massa private API).","Port to listen on (Massa public API).","","","Build here the default client settings from the …","","","","","","","Utilities","","","Path of wallet file","","All the client commands the order they are defined is the …","An iterator over the variants of Self","Aggregation of the local, with some useful information as …","Used to have a shinny json output TODO re-factor me","address and balance information","","","","","","","","","","","","print a yellow warning","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","reads a file","","","","","","","Display the help of all commands","Display the help of the command with fancy colors and so on","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","the keypair","","","Reorganize everything into an extended wallet","","","","","","","","","","","","","","","","TODO: ugly utilities functions takes a slice of string and …","","","","bail a shinny RPC error","run a given command","","helper to wrap and send an operation with proper validity …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Simple completion implementation based on sub-string","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Longest Common Prefix"],"i":[0,0,0,9,11,9,11,9,0,9,11,11,9,11,9,9,11,9,9,0,9,9,9,9,9,0,11,0,9,11,9,11,9,11,0,9,11,9,20,0,0,0,0,19,13,14,13,19,20,14,13,19,20,14,14,0,13,13,14,19,20,14,14,14,19,19,20,20,14,13,19,20,14,13,14,14,14,14,14,0,14,14,14,14,14,14,0,14,14,13,14,13,19,20,13,14,19,13,13,20,13,13,14,14,14,14,14,14,14,14,14,14,14,13,0,0,20,14,14,0,14,14,0,14,14,19,20,13,13,14,19,20,14,14,13,19,20,14,13,19,20,14,13,19,20,14,13,19,20,14,14,14,14,14,14,14,0,0,0,33,34,33,34,33,34,0,33,34,34,33,33,33,34,0,33,34,38,33,0,38,33,34,33,34,33,34,33,34,33,33,0,0,0,41,41,39,40,41,39,40,39,40,39,40,39,41,39,40,39,40,41,39,40,39,39,41,39,40,40,40,40,39,39,40,41,39,40,41,39,40,41,39,40,41,39,40,0],"f":[0,0,[1,2],[[]],[[]],[[]],[[]],[[],3],0,0,[4,[[7,[5,6]]]],0,[[]],[[]],[8,9],[[]],[[]],0,0,[[],10],0,[[],[[7,[9]]]],0,0,0,0,[11,7],0,[[],7],[[],7],[[],7],[[],7],[[],12],[[],12],0,[[]],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[13,13],[[]],[[14,14],15],[4,[[7,[5,6]]]],[4,[[7,[5,6]]]],0,[[14,16],17],[[14,16],[[7,[18]]]],[[19,16],17],[[19,16],17],[[20,16],17],[[20,16],17],[[]],[[]],[[]],[[]],[21,[[7,[14]]]],[[13,22],[[23,[14]]]],0,0,[14,[[23,[21]]]],[14,[[23,[21]]]],0,[1,24],0,[14,[[23,[21]]]],0,[14],0,[[14,21],[[23,[21]]]],[[]],[14],0,0,[[]],[[]],[[]],[[]],[[]],[[],13],0,[13,22],0,[25,[[10,[20]]]],[13,23],[13,23],0,0,0,0,0,0,0,0,0,0,0,[[13,22],23],[[26,21],[[23,[27]]]],[[],[[10,[[28,[27]]]]]],[20],0,0,0,[[14,29,25,15],24],0,[[29,25,30,31,32,15],24],0,0,[19,7],[20,7],[13],[[]],[[],2],[[],2],[[],2],[[],7],[21,[[7,[14]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],33],[[],34],[21,[[28,[35]]]],[[]],[[]],[[34,21],[[23,[2]]]],[[],[[7,[[36,[2]],37]]]],0,[[]],[[]],0,0,0,[[]],[[33,22],[[23,[2]]]],[[29,25],24],[38,10],[[],7],[[],7],[[],7],[[],7],[[],12],[[],12],[[]],[[]],[33],[21],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[39,39],[40,40],[[]],[[]],0,[41,39],[[],[[7,[39]]]],[[],[[7,[40]]]],[[39,16],17],[[40,16],17],[[]],[[]],[[]],0,0,[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[[28,[21]]],21]],"p":[[3,"Path"],[3,"String"],[3,"App"],[8,"Serializer"],[3,"Ok"],[3,"Error"],[4,"Result"],[3,"ArgMatches"],[3,"Args"],[6,"Result"],[3,"JsonError"],[3,"TypeId"],[3,"CommandIter"],[4,"Command"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Error"],[3,"ExtendedWalletEntry"],[3,"ExtendedWallet"],[15,"str"],[15,"usize"],[4,"Option"],[8,"Future"],[3,"Wallet"],[3,"HashMap"],[8,"FromStr"],[3,"Vec"],[3,"Client"],[4,"OperationType"],[3,"Amount"],[3,"Address"],[3,"CommandHistory"],[3,"CommandCompletion"],[15,"u8"],[3,"VecDeque"],[3,"Error"],[8,"Output"],[3,"Settings"],[3,"DefaultNode"],[3,"SETTINGS"]]},\
"massa_consensus_exports":{"doc":"Consensus exports","t":[12,12,3,2,2,3,3,2,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,4,6,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,12,12,12,11,11,12,12,11,11,11,11,11,11,12,12,12,12,11,11,11,11,12,12,12,12,12,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","0","ConsensusCommandSender","ConsensusConfig","ConsensusError","ConsensusEventReceiver","ConsensusManager","ConsensusSettings","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","commands","deref","deref","deref","deref_mut","deref_mut","deref_mut","drain","drop","drop","drop","error","events","from","from","from","get_active_stakers","get_addresses_info","get_block_graph_status","get_block_ids_by_creator","get_block_status","get_bootstrap_state","get_cliques","get_endorsements_by_address","get_endorsements_by_id","get_ledger_part","get_operations","get_operations_involving_address","get_selection_draws","get_stakers_production_stats","get_staking_addresses","get_stats","init","init","init","into","into","into","join_handle","manager_tx","register_staking_keys","remove_staking_addresses","settings","stop","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","wait_event","ConsensusCommand","ConsensusManagementCommand","GetActiveStakers","GetAddressesInfo","GetBlockGraphStatus","GetBlockIdsByCreator","GetBlockStatus","GetBootstrapState","GetCliques","GetEndorsementsByAddress","GetEndorsementsById","GetLedgerPart","GetOperations","GetRecentOperations","GetSelectionDraws","GetStakersProductionStats","GetStakingAddresses","GetStats","RegisterStakingKeys","RemoveStakingAddresses","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","into","into","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","0","0","0","0","0","address","address","address","addresses","addrs","batch_size","block_id","end","endorsements","operation_ids","response_tx","response_tx","response_tx","response_tx","response_tx","response_tx","response_tx","response_tx","response_tx","response_tx","response_tx","slot_end","slot_start","start","start_address","BlockCreationError","ChannelError","ConfigError","ConsensusError","ConsensusResult","ContainerInconsistency","ControllerEventError","ExecutionError","GraphError","IOError","InternalError","JoinError","MassaCipherError","ModelsError","PoolError","ProofOfStakeError","ProtocolError","ReceiveChannelError","SendChannelError","SerdeError","SlotOverflowError","TimeError","TokioSendError","TransactionError","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","into","into","source","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","ConsensusEvent","NeedSync","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","from","init","into","to_owned","try_from","try_into","type_id","vzip","ConsensusChannels","ConsensusConfig","ConsensusSettings","ConsensusWorkerChannels","block_db_prune_interval","block_db_prune_interval","block_reward","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","controller_command_rx","controller_event_tx","controller_manager_rx","delta_f0","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","disable_block_creation","disable_block_creation","drop","drop","drop","drop","end_timestamp","endorsement_count","execution_controller","execution_controller","fmt","fmt","force_keep_final_periods","force_keep_final_periods","from","from","from","from","from","from","future_block_processing_max_periods","future_block_processing_max_periods","genesis_key","genesis_timestamp","init","init","init","init","initial_draw_seed","initial_ledger_path","initial_ledger_path","initial_rolls_path","initial_rolls_path","into","into","into","into","ledger_cache_capacity","ledger_cache_capacity","ledger_flush_interval","ledger_flush_interval","ledger_path","ledger_path","ledger_reset_at_startup","ledger_reset_at_startup","max_block_size","max_dependency_blocks","max_dependency_blocks","max_discarded_blocks","max_discarded_blocks","max_future_processing_blocks","max_future_processing_blocks","max_gas_per_block","max_item_return_count","max_item_return_count","max_operations_fill_attempts","max_operations_fill_attempts","max_operations_per_block","max_send_wait","max_send_wait","operation_batch_size","operation_batch_size","operation_validity_periods","periods_per_cycle","pool_command_sender","pool_command_sender","pos_draw_cached_cycles","pos_draw_cached_cycles","pos_lock_cycles","pos_lookback_cycles","pos_miss_rate_deactivation_threshold","protocol_command_sender","protocol_command_sender","protocol_event_receiver","protocol_event_receiver","roll_price","serialize","staking_keys_path","staking_keys_path","stats_timespan","stats_timespan","t0","thread_count","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip"],"q":["massa_consensus_exports","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_consensus_exports::commands","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_consensus_exports::commands::ConsensusCommand","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_consensus_exports::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_consensus_exports::error::ConsensusError","","","","","","","","","","","","","","","","","","massa_consensus_exports::error::InternalError","massa_consensus_exports::events","","","","","","","","","","","","","","","","","","massa_consensus_exports::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","Consensus commands sender TODO Make private","","","channel to receive consensus events","Consensus manager","","","","","","","","","","consensus commands Contains definitions of commands used …","","","","","","","drains remaining events and returns them in a <code>VecDeque</code> …","","","","consensus errors","consensus events","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","get all stakers with roll count","Gets the candidate and final ledger data of a list of …","Gets all the available information on the block graph …","get block ids for one creator address","Gets the whole block and its status corresponding to given …","get bootstrap snapshot","Gets all cliques.","get endorsements info by involved address","get endorsements info by ids","get part of the ledger","get operation info by operation id","Returns hashmap: Operation id -&gt; if it is final","Gets <code>(slot, public_key)</code> were the staker with <code>public_key</code> …","get production stats for a set of stakers","get staking addresses","get current consensus stats","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","protocol handler","consensus management sender","Add some staking keys","remove some keys from staking keys by associated address …","consensus settings Definition &amp; Implementation of the …","stop consensus","","","","","","","","","","","","","","wait for the next event","Commands that can be processed by consensus.","Events that are emitted by consensus.","Get all stakers","Returns info for a set of addresses (rolls and balance)","Returns through a channel current blockgraph without block …","Get block id and status by block creator address","Returns through a channel full block and status with …","Returns the bootstrap state","Get cliques","Get Endorsements by involved addresses","get endorsements by id","Returns a part of the ledger","Get some information on operations by operation ids","Get some information on operation by involved addresses","Returns through a channel the list of slots with the …","Get production stats for addresses","Get staking addresses","get current stats on consensus","Add keys to use them for staking","Remove associated staking keys","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","wanted address","wanted address","wanted address","wanted addresses","wanted addresses","Size of the part of the ledger","wanted block id","end slot","Wanted endorsement ids","wanted ids","response channel","response channel","response channel","response channel","response channel","response channel","response channel","response channel","response channel","response channel","response channel","optional end slot","optional start slot","start slot","Start address","block creation error {0}","channel error: {0}","configuration error: {0}","Consensus errors","Consensus","there was an inconsistency between containers {0}","failed retrieving consensus controller event","execution error: {0}","Graph error: {0}","io error {0}","Internal error","Join error {0}","<code>MassaCipher</code> error: {0}","models error: {0}","pool error : {0}","Proof of stake error: {0}","Protocol error {0}","Receive  channel error : {0}","Send  channel error : {0}","serde error","slot overflow","Time error {0}","error sending consensus event: {0}","transaction error {0}","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Events that are emitted by consensus.","probable desynchronization detected, need …","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Public channels associated to the consensus module. …","Consensus full configuration (static + user defined)","Consensus configuration Assumes …","Communication asynchronous channels for the consensus …","old blocks are pruned every <code>block_db_prune_interval</code>","old blocks are pruned every <code>block_db_prune_interval</code>","Reward for the creation of a block","","","","","","","","","","","","","Channel receiving consensus commands.","Channel sending out consensus events.","Channel receiving consensus management commands.","Threshold for fitness.","","","","","","","","","","If we want to generate blocks. Parameter that shouldn’t …","If we want to generate blocks. Parameter that shouldn’t …","","","","","TESTNET: time when the blockclique is ended.","target number of endorsement per block","Execution command sender.","outgoing link to execution component","","","force keep at least this number of final periods in RAM …","force keep at least this number of final periods in RAM …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","If a block is <code>future_block_processing_max_periods</code> periods …","If a block is <code>future_block_processing_max_periods</code> periods …","<code>KeyPair</code> to sign genesis blocks.","Time in milliseconds when the blockclique started.","","","","","initial seed","Initial file path that describe the ledger to merge in …","Initial file path that describe the ledger to merge in …","path to the initial rolls","path to the initial rolls","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Cache capacity allowed to the ledger","Cache capacity allowed to the ledger","the ledger is flushed to the disk every …","the ledger is flushed to the disk every …","path to ledger db","path to ledger db after initialization (merge with …","if ledger need a reset at start up","if ledger need a reset at start up","Maximum block size in bytes","Maximum number of blocks allowed in <code>DependencyWaitingBlocks</code>…","Maximum number of blocks allowed in <code>DependencyWaitingBlocks</code>…","Maximum number of blocks allowed in discarded blocks.","Maximum number of blocks allowed in discarded blocks.","Maximum number of blocks allowed in <code>FutureIncomingBlocks</code>.","Maximum number of blocks allowed in <code>FutureIncomingBlocks</code>.","Max gas per block for the execution configuration","max number of items returned while querying","max number of items returned while querying","Maximum tries to fill a block with operations","Maximum tries to fill a block with operations","Maximum number of operations per block","max event send wait","max event send wait","size of an operation batch when creating a block","size of an operation batch when creating a block","Maximum operation validity period count","cycle duration in periods","Associated Pool command sender.","outgoing link to pool component","number of cached draw cycles for PoS","number of cached draw cycles for PoS","PoS lock cycles: when some rolls are released, we only …","PoS look back cycles: when drawing for cycle N, we use the …","number of cycle misses (strictly) above which stakers are …","Associated protocol command sender.","outgoing link to protocol component","Associated protocol event listener.","incoming link to protocol component","Price of a roll inside the network","","Staking keys","Staking keys","stats time span","stats time span","Time between the periods in the same thread.","Number of threads","","","","","","","","","","","","","","","","","",""],"i":[3,1,0,0,0,0,0,0,3,14,1,3,14,1,1,1,0,3,14,1,3,14,1,3,3,14,1,0,0,3,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,14,1,3,14,1,14,14,1,1,0,14,1,3,14,1,3,14,1,3,14,1,3,14,1,3,0,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,17,18,17,17,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,17,18,17,18,17,18,17,18,17,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,54,55,53,51,48,57,52,49,50,56,58,58,55,53,22,22,22,0,0,22,22,22,22,22,0,22,22,22,22,22,22,22,22,22,22,22,22,21,21,22,21,22,21,22,21,22,21,22,21,21,22,22,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,21,22,21,22,22,21,22,21,22,21,22,21,22,21,22,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,0,0,0,39,40,40,78,79,39,40,78,79,39,40,39,40,39,40,78,78,78,40,78,79,39,40,78,79,39,40,39,39,40,78,79,39,40,40,40,78,79,39,40,39,40,78,79,39,40,40,40,39,40,40,40,78,79,39,40,40,39,40,39,40,78,79,39,40,39,40,39,40,39,40,39,40,40,39,40,39,40,39,40,40,39,40,39,40,40,39,40,39,40,40,40,78,79,39,40,40,40,40,78,79,78,79,40,39,39,40,39,40,40,40,39,40,78,79,39,40,78,79,39,40,78,79,39,40,78,79,39,40],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[[]],0,[2],[2],[2],[2],[2],[2],[3,4],[2],[2],[2],0,0,[[]],[[]],[[]],[1,4],[[1,[6,[5]]],4],[[1,[8,[7]],[8,[7]]],4],[[1,5],4],[[1,9],4],[1,4],[1,4],[[1,5],4],[[1,[6,[10]]],4],[[1,[8,[5]],2],4],[[1,[6,[11]]],4],[[1,5],4],[[1,7,7],4],[[1,[6,[5]]],4],[1,4],[1,4],[[],2],[[],2],[[],2],[[]],[[]],[[]],0,0,[[1,[13,[12]]],4],[[1,[6,[5]]],4],0,[[14,3],4],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[]],[[]],[[]],[3,4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,17],[[]],[2],[2],[2],[2],[2],[2],[[18,19],20],[[17,19],20],[[]],[[]],[[],2],[[],2],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[2],[2],[2],[2],[2],[2],[[21,19],20],[[21,19],20],[[22,19],20],[[22,19],20],[[]],[[]],[23,22],[[[25,[24]]],22],[26,22],[27,22],[28,22],[29,22],[30,22],[[[32,[31]]],22],[31,22],[33,22],[34,22],[35,22],[36,22],[[],2],[[],2],[[]],[[]],[22,[[8,[37]]]],[[],38],[[],38],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[24,24],[[]],[2],[2],[2],[[24,19],20],[[]],[[],2],[[]],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[39,39],[40,40],[[]],[[]],0,0,0,0,[2],[2],[2],[2],[2],[2],[2],[2],[[],[[15,[39]]]],0,0,[2],[2],[2],[2],0,0,0,0,[[39,19],20],[[40,19],20],0,0,[[]],[[]],[[]],[[]],[39,40],[39,40],0,0,0,0,[[],2],[[],2],[[],2],[[],2],0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[39,15],0,0,0,0,0,0,[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]]],"p":[[3,"ConsensusCommandSender"],[15,"usize"],[3,"ConsensusEventReceiver"],[8,"Future"],[3,"Address"],[6,"Set"],[3,"Slot"],[4,"Option"],[3,"BlockId"],[3,"EndorsementId"],[3,"OperationId"],[3,"KeyPair"],[3,"Vec"],[3,"ConsensusManager"],[4,"Result"],[3,"TypeId"],[4,"ConsensusManagementCommand"],[4,"ConsensusCommand"],[3,"Formatter"],[6,"Result"],[4,"InternalError"],[4,"ConsensusError"],[4,"GraphError"],[4,"ConsensusEvent"],[3,"SendError"],[3,"Error"],[3,"Error"],[4,"PoolError"],[4,"TimeError"],[3,"JoinError"],[4,"ProtocolError"],[3,"Box"],[4,"ProofOfStakeError"],[4,"ExecutionError"],[4,"ModelsError"],[4,"CipherError"],[8,"Error"],[3,"String"],[3,"ConsensusSettings"],[3,"ConsensusConfig"],[13,"GetBootstrapState"],[13,"GetStats"],[13,"GetActiveStakers"],[13,"RegisterStakingKeys"],[13,"RemoveStakingAddresses"],[13,"GetStakingAddresses"],[13,"GetCliques"],[13,"GetRecentOperations"],[13,"GetBlockIdsByCreator"],[13,"GetEndorsementsByAddress"],[13,"GetAddressesInfo"],[13,"GetStakersProductionStats"],[13,"GetLedgerPart"],[13,"GetBlockStatus"],[13,"GetSelectionDraws"],[13,"GetEndorsementsById"],[13,"GetOperations"],[13,"GetBlockGraphStatus"],[13,"ExecutionError"],[13,"ModelsError"],[13,"ConfigError"],[13,"ProtocolError"],[13,"JoinError"],[13,"TimeError"],[13,"ContainerInconsistency"],[13,"SendChannelError"],[13,"ReceiveChannelError"],[13,"PoolError"],[13,"IOError"],[13,"SerdeError"],[13,"BlockCreationError"],[13,"TokioSendError"],[13,"ChannelError"],[13,"GraphError"],[13,"ProofOfStakeError"],[13,"MassaCipherError"],[13,"TransactionError"],[3,"ConsensusWorkerChannels"],[3,"ConsensusChannels"]]},\
"massa_consensus_worker":{"doc":"Endorsements","t":[5],"n":["start_consensus_controller"],"q":["massa_consensus_worker"],"d":["Creates a new consensus controller."],"i":[0],"f":[[[1,2,[4,[3]],[4,[5]],6,7,8,[11,[9,10]]],12]],"p":[[3,"ConsensusConfig"],[3,"ConsensusChannels"],[3,"ExportProofOfStake"],[4,"Option"],[3,"BootstrapableGraph"],[3,"Storage"],[15,"i64"],[3,"String"],[3,"Address"],[3,"KeyPair"],[6,"Map"],[8,"Future"]]},\
"massa_execution_exports":{"doc":"Overview","t":[13,13,3,3,8,4,8,3,3,13,13,13,3,3,4,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,12,12,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,12,12,12,12,11,12,10,12,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12],"n":["BytecodeExecution","ChannelError","EventStore","ExecutionConfig","ExecutionController","ExecutionError","ExecutionManager","ExecutionOutput","ExecutionStackElement","FunctionCall","MassaHashError","ModelsError","ReadOnlyCallRequest","ReadOnlyExecutionRequest","ReadOnlyExecutionTarget","RuntimeError","address","block_id","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call_stack","call_stack","clear","clock_compensation","clone","clone","clone","clone","clone","clone","clone","clone","clone_box","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","coins","cursor_delay","default","events","execute_readonly_request","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","genesis_timestamp","get_filtered_sc_output_event","get_filtered_sc_output_event","get_final_and_active_data_entry","get_final_and_active_parallel_balance","into","into","into","into","into","into","into","into","max_async_gas","max_final_events","max_gas","max_gas","owned_addresses","parameter","prune","push","readonly_queue_length","simulated_gas_price","simulated_gas_price","slot","source","state_changes","stop","t0","take","target","target_addr","target_func","thread_count","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_blockclique_status","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","0","parameter","target_addr","target_func"],"q":["massa_execution_exports","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_execution_exports::ExecutionError","","","","massa_execution_exports::ReadOnlyExecutionTarget","","",""],"d":["Execute the main function of a bytecode","Channel error","Store for events emitted by smart contracts","Execution module configuration","interface that communicates with the execution worker …","Errors of the execution component.","Execution manager used to stop the execution thread","structure describing the output of a single execution","Structure describing an element of the execution stack. …","Execute a function call","<code>MassaHashError</code>: {0}","<code>ModelsError</code>: {0}","structure describing a read-only call","structure describing different types of read-only …","structure describing different possible targets of a …","Runtime error: {0}","Called address","optional block ID at that slot (None if miss)","","","","","","","","","","","","","","","","","Call stack to simulate, older caller first","Call stack to simulate, older caller first. Target should …","Clear the event store","time compensation in milliseconds","","","","","","","","","Returns a boxed clone of self. Useful to allow cloning …","","","","","","","","","Coins transferred to the target address during the call","extra lag to add on the execution cursor to improve …","","events emitted by the execution step","Execute read-only SC function call without causing …","Extend the event store with another store","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","genesis timestamp","Get execution events optionally filtered by:","Get events optionally filtered by:","Get a copy of a single datastore entry with its final and …","Get a balance final and active values","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","maximum available gas for asynchronous messages execution","maximum number of SC output events kept in cache","Maximum gas to spend in the execution.","Maximum gas to spend in the execution.","List of addresses owned by the current call, and on which …","Parameter to pass to the target function","Prune the event store if its size is over the given limit","Push a new smart contract event to the store","read-only execution request queue length","The simulated price of gas for the read-only execution.","The simulated price of gas for the read-only execution.","slot","","state changes caused by the execution step","Stop the execution thread Note that we do not take self by …","period duration","Take the event store","Target of the request","Target address","Target function","number of threads","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Updates blockclique status by signaling newly finalized …","","","","","","","","","","","","","","Parameter to pass to the target function","Target address","Target function"],"i":[6,2,0,0,0,0,0,0,0,6,2,2,0,0,0,2,8,4,2,1,3,4,5,6,7,8,2,1,3,4,5,6,7,8,5,7,1,3,2,1,3,4,5,6,7,8,9,2,1,3,4,5,6,7,8,8,3,1,4,9,1,2,2,1,3,4,5,6,7,8,2,2,2,1,3,4,5,6,7,8,3,9,1,9,9,2,1,3,4,5,6,7,8,3,3,5,7,8,7,1,1,3,5,7,4,2,4,30,3,1,5,7,7,3,2,1,3,4,5,6,7,8,2,2,1,3,4,5,6,7,8,2,1,3,4,5,6,7,8,2,1,3,4,5,6,7,8,9,2,1,3,4,5,6,7,8,31,32,33,34,35,36,36,36],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[1],0,[2,2],[1,1],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[[],[[10,[9]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],1],0,[5,[[11,[4,2]]]],[[1,1]],[[2,12],13],[[2,12],13],[[1,12],13],[[3,12],13],[[4,12],13],[[5,12],13],[[6,12],13],[[7,12],13],[[8,12],13],[14,2],[15,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[16,[[18,[17]]]],[[1,16],[[19,[17]]]],[[20,21]],[20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[1,22]],[[1,17]],0,0,0,0,[2,[[24,[23]]]],0,[[]],0,[1,[[19,[17]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],25],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[[29,[27,28]],[29,[27,28]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0],"p":[[3,"EventStore"],[4,"ExecutionError"],[3,"ExecutionConfig"],[3,"ExecutionOutput"],[3,"ReadOnlyExecutionRequest"],[4,"ReadOnlyExecutionTarget"],[3,"ReadOnlyCallRequest"],[3,"ExecutionStackElement"],[8,"ExecutionController"],[3,"Box"],[4,"Result"],[3,"Formatter"],[6,"Result"],[4,"ModelsError"],[4,"MassaHashError"],[3,"EventFilter"],[3,"SCOutputEvent"],[3,"Vec"],[3,"VecDeque"],[3,"Address"],[3,"Hash"],[15,"usize"],[8,"Error"],[4,"Option"],[3,"String"],[3,"TypeId"],[3,"Slot"],[3,"BlockId"],[3,"HashMap"],[8,"ExecutionManager"],[13,"ChannelError"],[13,"RuntimeError"],[13,"MassaHashError"],[13,"ModelsError"],[13,"BytecodeExecution"],[13,"FunctionCall"]]},\
"massa_execution_worker":{"doc":"General description","t":[5],"n":["start_execution_worker"],"q":["massa_execution_worker"],"d":["Launches an execution worker thread and returns an …"],"i":[0],"f":[[[1,[4,[[3,[2]]]],5]]],"p":[[3,"ExecutionConfig"],[3,"FinalState"],[6,"RwLock"],[3,"Arc"],[3,"Storage"]]},\
"massa_final_state":{"doc":"Copyright (c) 2022 MASSA LABS info@massa.net","t":[3,3,4,13,3,3,3,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["FinalState","FinalStateConfig","FinalStateError","LedgerError","StateChanges","StateChangesDeserializer","StateChangesSerializer","apply","async_pool","async_pool_changes","async_pool_config","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","default","deserialize","eq","final_history_length","finalize","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_state_changes_part","into","into","into","into","into","into","ledger","ledger_changes","ledger_config","ne","new","new","new","serialize","slot","thread_count","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","0"],"q":["massa_final_state","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_final_state::FinalStateError"],"d":["Represents a final state <code>(ledger, async pool)</code>","Ledger configuration","Final state error","ledger error: {0}","represents changes that can be applied to the execution …","Basic <code>StateChanges</code> deserializer","Basic <code>StateChanges</code> serializer.","extends the current <code>StateChanges</code> with another one","asynchronous pool containing messages sorted by priority …","asynchronous pool changes","asynchronous pool configuration","","","","","","","","","","","","","","","","","","","","","","final changes history length","Applies changes to the execution state at a given slot, …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Used for bootstrap Take a part of the final state changes …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","final ledger associating addresses to their balance, …","ledger changes","ledger configuration","","Creates a <code>StateChangesSerializer</code>","Creates a <code>StateChangesDeserializer</code>","Initializes a new <code>FinalState</code>","","slot at the output of which the state is attached","thread count","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,13,0,0,0,1,9,1,2,3,4,2,13,9,1,3,4,2,13,9,1,2,1,2,1,3,4,1,4,1,2,9,2,13,13,9,1,3,4,2,13,9,1,9,3,4,2,13,9,1,9,1,2,1,3,4,9,3,9,2,2,1,13,3,4,2,13,9,1,3,4,2,13,9,1,3,4,2,13,9,1,3,4,2,13,9,1,23],"f":[0,0,0,0,0,0,0,[[1,1]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,2],[1,1],[[]],[[]],[[],3],[[],4],[[],1],[4,[[7,[1,[0,[5,6]]]]]],[[1,1],8],0,[[9,10,1]],[[2,11],12],[[13,11],12],[[13,11],12],[[9,11],12],[[1,11],12],[[]],[[]],[[]],[[]],[[]],[[]],[[9,10,14,15],[[16,[1,13]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[1,1],8],[[],3],[[],4],[[2,[18,[17]]],[[16,[9,13]]]],[[3,1,19],[[16,[20]]]],0,0,[[]],[[]],[[],21],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],[[]],0],"p":[[3,"StateChanges"],[3,"FinalStateConfig"],[3,"StateChangesSerializer"],[3,"StateChangesDeserializer"],[8,"ParseError"],[8,"ContextError"],[6,"IResult"],[15,"bool"],[3,"FinalState"],[3,"Slot"],[3,"Formatter"],[6,"Result"],[4,"FinalStateError"],[3,"Address"],[6,"AsyncMessageId"],[4,"Result"],[8,"LedgerController"],[3,"Box"],[3,"Vec"],[4,"SerializeError"],[3,"String"],[3,"TypeId"],[13,"LedgerError"]]},\
"massa_graph":{"doc":"graph management","t":[13,13,3,3,3,3,4,13,4,3,13,13,13,13,13,2,3,13,4,13,13,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,0,0,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,0,12,12,12,12,12,12,12,11,11,11,12,12,12,12,11,11,11,11,11,11,0,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,13,13,13,13,13,4,6,13,13,4,13,4,13,13,6,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,12,12,12,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,12,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,12,12,11,11,12,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11],"n":["Active","Active","BlockGraph","BlockGraphExport","BlockStateAccumulator","BootstrapableGraph","DiscardReason","Discarded","ExportBlockStatus","ExportCompiledBlock","Final","Final","Final","Incoming","Invalid","LedgerConfig","LedgerDataExport","Stale","Status","WaitingForDependencies","WaitingForSlot","active_blocks","active_blocks","best_parents","best_parents","block_state_accumulator_init","block_state_sync_rolls","block_state_try_apply","block_state_try_apply_op","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","candidate_data","children","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compute_max_cliques","create_genesis_block","cycle_roll_updates","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","discarded_blocks","drop","drop","drop","drop","drop","drop","drop","drop","drop","endorsers_addresses","eq","eq","error","export_active_block","export_bootstrap_graph","extract_from","final_data","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bytes_compact","genesis_blocks","get_active_block","get_all_final_blocks","get_attack_attempts","get_best_parents","get_block_ids_by_creator","get_block_wishlist","get_blockclique","get_blocks_to_propagate","get_clique_count","get_cliques","get_endorsement_by_address","get_endorsement_by_id","get_export_block_status","get_genesis_block_ids","get_latest_final_blocks_periods","get_ledger_at_parents","get_ledger_data_export","get_ledger_part","get_new_final_blocks","get_new_stale_blocks","get_operations","get_operations_involving_address","get_roll_data_at_parent","gi_head","gi_head","gi_head","header","incoming_block","incoming_header","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","is_final","latest_final_blocks_periods","latest_final_blocks_periods","ledger","ledger","ledger_changes","ledger_thread_subset","loaded_ledger_addrs","loaded_roll_addrs","max_cliques","max_cliques","ne","new","prune","roll_counts","roll_updates","same_thread_parent_creator","same_thread_parent_cycle","serialize","serialize","serialize","serialize","serialize","serialize","settings","slot_tick","storage","to_bytes_compact","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","AmountOverflowError","ContainerInconsistency","ExecutionError","FitnessOverflow","GenesisCreationError","GraphError","GraphResult","IOError","IOError","InternalError","InvalidLedgerChange","LedgerError","LedgerError","LedgerInconsistency","LedgerResult","MissingBlock","ModelsError","ModelsError","PosCycleUnavailable","ProofOfStakeError","SerdeError","SerdeError","SledError","SledTransactionError","TransactionError","TransactionError","TryFromSliceError","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","into","into","into","source","source","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","ExportActiveBlock","block","block_id","block_ledger_changes","borrow","borrow_mut","children","clone","clone_into","dependencies","deref","deref_mut","deserialize","drop","fmt","from","from_bytes_compact","init","into","is_final","parents","production_events","roll_updates","serialize","to_bytes_compact","to_owned","try_from","try_from_active_block","try_into","type_id","vzip","0","ConsensusLedgerSubset","Ledger","OperationLedgerInterface","apply_change","apply_changes","apply_final_changes","borrow","borrow","borrow_mut","borrow_mut","chain","clear","clone","clone_into","clone_subset","contains","default","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","fmt","from","from","from_bytes_compact","from_export","get_data","get_final_balance","get_final_data","get_final_ledger_subset","get_involved_addresses","get_latest_final_periods","get_ledger_changes","get_ledger_part","init","init","into","into","new","read_genesis_ledger","read_whole","serialize","sync_from","to_bytes_compact","to_owned","try_from","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","GraphConfig","LedgerConfig","block_reward","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","delta_f0","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","endorsement_count","fmt","fmt","force_keep_final_periods","from","from","from","future_block_processing_max_periods","genesis_key","init","init","initial_ledger_path","initial_ledger_path","into","into","ledger_cache_capacity","ledger_cache_capacity","ledger_flush_interval","ledger_flush_interval","ledger_path","ledger_path","max_dependency_blocks","max_discarded_blocks","max_future_processing_blocks","max_item_return_count","operation_validity_periods","periods_per_cycle","roll_price","serialize","serialize","thread_count","thread_count","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":["massa_graphmassa_graph::DiscardReason","massa_graph::ExportBlockStatus","","","massa_graph::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_graph::error::GraphError","","","","","","","","","","","","massa_graph::error::InternalError","massa_graph::error::LedgerError","","","","","","","massa_graph::export_active_block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_graph::ledger","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_graph::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["valid and not yet final","without enough fitness to be part of immutable history","Graph management","Bootstrap compatible version of the block graph","Aggregated changes made during a block’s execution","Bootstrap graph","Something can be discarded","not part of the graph","Block status in the graph that can be exported.","The block version that can be exported. Note that the …","Block has enough fitness.","immutable","with enough fitness to be part of immutable history","received but not yet graph processed","Block is invalid, either structurally, or because of some …","","Final and candidate ledger data","Block is incompatible with a final block.","Status","waiting for a missing dependency","waiting for its slot","Map of active blocks, were blocks are in their exported …","Map of active blocks, were blocks are in their exported …","Best parents hashes in each thread.","Best parents hashes in each thread.","initializes a block state accumulator from a block header","loads missing block state rolls if available","try to apply ledger/roll changes to a block state …","Try to apply an operation in the context of the block","","","","","","","","","","","","","","","","","","","Candidate data","For (i, set) in children, set contains the headers’ …","","","","","","","","","","","","","","","","","Computes max cliques of compatible blocks","Creates genesis block in given thread.","Roll updates that happened during current cycle","","","","","","","","","","","","","","","","","","","","","","","","","","Finite cache of discarded blocks, in exported version.","","","","","","","","","","Addresses of that block endorsers","","","graph errors","useful structures","export full graph in a bootstrap compatible version","Conversion from blockgraph.","Final data","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Genesis blocks.","Gets whole compiled block corresponding to given hash, if …","Clones all stored final blocks, not only the still-useful …","Get the hashes of objects that were attack attempts. Must …","Gets best parents.","Returns the list of block IDs created by a given address, …","get the current block wish list","get the clique of higher fitness","Get the block id’s to be propagated. Must be called by …","get clique count","Gets the list of cliques.","endorsement info by involved address","endorsement info by id","get export version of a block","get genesis block ids","Gets latest final blocks (hash, period) for each thread.","Compute ledger subset after given parents for given …","gets Ledger data export for given Addressees","Get a part of the ledger Used for bootstrap Parameters:","Get the ids of blocks that became final. Must be called by …","Get the ids of blocks that became stale. Must be called by …","Retrieves operations from operation Ids","get operation info by involved address","for algorithm see <code>pos.md</code> if <code>addrs_opt</code> is <code>Some(addrs)</code>, …","Incompatibility graph: maps a block id to the block ids it …","Head of the incompatibility graph.","Head of the incompatibility graph.","Header of the corresponding block.","A new block has come","A new header has come !","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Active or final","Latest final period and block hash in each thread.","Latest final period and block hash in each thread.","parallel ledger (TODO remove after unification)","Ledger at last final blocks","Cumulative changes made during that block execution","Subset of the ledger. Contains only data in the thread of …","Addresses impacted by ledger updates","Addresses impacted by roll updates","List of maximal cliques of compatible blocks.","List of maximal cliques of compatible blocks.","","Creates a new <code>BlockGraph</code>.","prune and return final blocks, return discarded final …","Current roll counts for these addresses","Roll updates that happened during that block execution","Address of the parent in the same thread","Cycle of the parent in the same thread","","","","","","","graph settings","signal new slot","Shared storage,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","amount overflow","there was an inconsistency between containers {0}","execution error: {0}","fitness overflow","Could not create genesis block {0}","Graph error","Result used in the graph","io error {0}","io error {0}","Internal error","invalid ledger change: {0}","Ledger error","Ledger error {0}","ledger inconsistency error {0}","Result used in the ledger","missing block {0}","models error: {0}","models error: {0}","Proof of stake cycle unavailable {0}","Proof of Stake error {0}","serde error","serde error","sled error: {0}","sled error {0}","transaction error {0}","transaction error {0}","try from slice error {0}","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Exportable version of <code>ActiveBlock</code> Fields that can be …","The block.","The Id of the block.","Changes caused by this block","","","one <code>HashMap&lt;Block id, period&gt;</code> per thread (blocks that need …","","","dependencies required for validity check","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","for example has its fitness reached the given threshold","one <code>(block id, period)</code> per thread ( if not genesis )","list of <code>(period, address, did_create)</code> for all …","<code>Address -&gt; RollUpdate</code>","","","","","try conversion from active block to export active block","","","","","address to ledger data map Only part of a ledger","Here we map an address to its balance. When a balance …","Ledger specific method on operations","Applies given change to that ledger subset note: a failure …","apply ledger changes note: a failure may still leave the …","Atomically apply a batch of changes to the ledger. All …","","","","","Applies thread changes change to that ledger subset note: …","To empty the db.","","","clone subset","If subset contains given address","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","If there is something in the ledger file, it is overwritten","Get the data for given address","Returns the final balance of an address. 0 if the address …","Returns the final ledger data of a list of unique …","Gets ledger at latest final blocks for <code>query_addrs</code>","List involved addresses","returns the final periods.","Retrieve and aggregate ledger specific changes in the …","Get a part of the ledger Used for bootstrap Parameters:","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","if no <code>latest_final_periods</code> in file, they are initialized …","Read the initial ledger.","Used for bootstrap. Note: this cannot be done …","","merge another ledger subset into self, overwriting …","Example","","","","","","","","","","","Graph configuration","configuration for the old ledger TODO remove after …","Reward for the creation of a block","","","","","","","","","Threshold for fitness.","","","","","","","","","target number of endorsement per block","","","force keep at least this number of final periods in RAM …","Returns the argument unchanged.","","Returns the argument unchanged.","If a block <code>is future_block_processing_max_periods</code> periods …","Keypair to sign genesis blocks.","","","path to ledger db","Initial file path that describe the ledger to merge in …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Cache capacity allowed to the ledger","Cache capacity allowed to the ledger","the ledger is flushed to the disk every …","the ledger is flushed to the disk every …","path to ledger db","path to ledger db (todo: static thing?)","Maximum number of blocks allowed in <code>DependencyWaitingBlocks</code>…","Maximum number of blocks allowed in discarded blocks.","Maximum number of blocks allowed in <code>FutureIncomingBlocks</code>.","pub <code>block_db_prune_interval</code>: <code>MassaTime</code>,","Maximum operation validity period count","cycle duration in periods","Price of a roll inside the network","","","Number of threads","Number of threads","","","","","","","","","",""],"i":[13,15,0,0,0,0,0,13,0,0,12,13,15,13,12,0,0,12,0,13,13,11,16,11,16,1,1,1,1,1,11,4,12,13,14,15,16,17,1,11,4,12,13,14,15,16,17,17,14,11,4,12,13,14,15,16,17,11,4,12,13,14,15,16,17,1,0,4,17,1,11,4,12,13,14,15,16,17,1,11,4,12,13,14,15,16,17,11,12,13,14,15,17,16,1,11,4,12,13,14,15,16,17,4,12,15,0,0,1,16,17,11,4,12,13,14,15,16,17,1,11,4,12,13,14,15,16,17,11,16,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11,16,14,1,1,1,11,4,12,13,14,15,16,17,1,11,4,12,13,14,15,16,17,14,11,16,0,11,4,4,4,4,11,16,12,1,1,4,4,4,4,11,12,13,14,15,17,0,1,1,11,11,4,12,13,14,15,16,17,1,11,4,12,13,14,15,16,17,1,11,4,12,13,14,15,16,17,1,11,4,12,13,14,15,16,17,1,11,4,12,13,14,15,16,17,64,65,66,67,46,44,44,44,44,0,0,44,46,0,44,0,44,46,0,44,44,46,44,44,44,46,46,46,44,45,46,44,45,46,44,45,46,44,45,46,44,45,46,44,45,46,44,44,45,45,46,46,44,44,44,44,44,44,44,45,46,46,46,46,46,46,46,44,45,46,44,45,46,44,46,44,45,46,44,45,46,44,45,46,44,45,46,44,45,46,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,0,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,37,0,0,0,37,37,59,59,37,59,37,37,59,37,37,37,37,37,59,37,59,37,37,59,37,37,59,37,37,59,37,59,59,59,37,59,88,59,59,37,59,37,59,0,59,37,37,37,37,59,37,37,59,37,59,37,59,37,0,0,20,61,20,61,20,61,20,61,20,20,61,20,61,20,61,20,61,20,20,61,20,20,61,61,20,20,20,61,20,61,20,61,20,61,20,61,20,61,20,20,20,20,20,20,20,20,61,20,61,20,61,20,61,20,61,20,61,20,61,20],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,3],[[5,[4]]]],[[1,4,2,3,6],5],[[1,4,2,[8,[7]],[8,[9]],3],5],[[1,4,2,10,3],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[11,11],[4,4],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[19,[[6,[18]]]]]],[[20,21],5],0,[[],17],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[[],[[23,[11]]]],[[],[[23,[12]]]],[[],[[23,[13]]]],[[],[[23,[14]]]],[[],[[23,[15]]]],[[],[[23,[17]]]],0,[22],[22],[22],[22],[22],[22],[22],[22],[22],0,[[12,12],24],[[15,15],24],0,0,[1,[[5,[11]]]],[[1,[8,[25]],[8,[25]]],[[5,[16]]]],0,[[11,26],27],[[4,26],27],[[12,26],27],[[13,26],27],[[14,26],27],[[15,26],27],[[16,26],27],[[17,26],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[23,[28]]]],0,[[1,18],[[8,[29]]]],[1,[[30,[25,18]]]],[1,[[19,[18]]]],[1,19],[[1,31],[[32,[18,15]]]],[1,[[5,[[6,[18]]]]]],[1,[[6,[18]]]],[1,[[32,[18]]]],[1,22],[1,[[19,[33]]]],[[1,31],[[5,[[32,[34,35]]]]]],[[1,[6,[34]]],[[5,[[32,[34,36]]]]]],[[1,18],[[5,[[8,[13]]]]]],[1,19],[1,19],[[1,6],[[5,[37]]]],[[1,6],[[5,[17]]]],[[1,[8,[31]],22],[[5,[37]]]],[1,[[6,[18]]]],[1,[[32,[18]]]],[[1,[6,[38]]],[[5,[[32,[38,39]]]]]],[[1,31],[[5,[[32,[38,39]]]]]],[[1,18,[8,[6]],3],5],0,0,0,0,[[1,18,25,[32,[38]],[32,[34,40]],3,[8,[25]]],5],[[1,18,2,3,[8,[25]]],5],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[12,12],24],[[20,[8,[11]],41],42],[1,[[5,[[32,[18,29]]]]]],0,0,0,0,[11,23],[12,23],[13,23],[14,23],[15,23],[17,23],0,[[1,3,[8,[25]]],5],0,[11,[[23,[[19,[21]],28]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[22],[22],[22],[22],[22],[22],[22],[22],[22],[[44,26],27],[[44,26],27],[[45,26],27],[[45,26],27],[[46,26],27],[[46,26],27],[46,44],[[]],[47,44],[28,44],[48,44],[49,44],[50,44],[[]],[28,46],[51,46],[48,46],[[[52,[45]]],46],[[]],[47,46],[53,46],[[],22],[[],22],[[],22],[[]],[[]],[[]],[44,[[8,[54]]]],[46,[[8,[54]]]],[[],55],[[],55],[[],55],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],43],[[],43],[[],43],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[56,56],[[]],0,[22],[22],[[],[[23,[56]]]],[22],[[56,26],27],[[]],[[],[[5,[28]]]],[[],22],[[]],0,0,0,0,[56,23],[56,[[5,[[19,[21]],28]]]],[[]],[[],23],[[29,41],[[5,[56]]]],[[],23],[[],43],[[]],0,0,0,0,[[37,31,57],58],[[37,7],58],[[59,21,7,60],58],[[]],[[]],[[]],[[]],[[37,7],58],[59,58],[37,37],[[]],[[37,6],37],[[37,31],24],[[],37],[22],[22],[22],[22],[[],[[23,[37]]]],[22],[22],[[37,26],27],[[]],[[]],[[],[[58,[28]]]],[[37,[19,[60]],61],[[58,[59]]]],[[37,31],62],[[59,31],[[58,[63]]]],[[59,[6,[31]]],[[58,[37]]]],[[59,6],[[58,[37]]]],[37,[[6,[31]]]],[59,[[58,[[19,[60]]]]]],[[31,[19,[31]],31,63,40],[[58,[7]]]],[[59,[8,[31]],22],[[58,[37]]]],[[],22],[[],22],[[]],[[]],[[61,[8,[37]]],[[58,[59]]]],[61,42],[59,[[58,[37]]]],[37,23],[[37,6,37]],[37,[[58,[[19,[21]],28]]]],[[]],[[],23],[[],23],[59,[[58,[37]]]],[[],23],[[],23],[[],43],[[],43],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[61,61],[20,20],[[]],[[]],0,[22],[22],[22],[22],[[],[[23,[61]]]],[[],[[23,[20]]]],[22],[22],0,[[61,26],27],[[20,26],27],0,[[]],[20,61],[[]],0,0,[[],22],[[],22],0,0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[61,23],[20,23],0,0,[[]],[[]],[[],23],[[],23],[[],23],[[],23],[[],43],[[],43],[[]],[[]]],"p":[[3,"BlockGraph"],[6,"WrappedHeader"],[3,"ProofOfStake"],[3,"BlockStateAccumulator"],[6,"GraphResult"],[6,"Set"],[3,"LedgerChanges"],[4,"Option"],[3,"RollUpdates"],[6,"WrappedOperation"],[3,"BootstrapableGraph"],[4,"DiscardReason"],[4,"ExportBlockStatus"],[3,"ExportCompiledBlock"],[4,"Status"],[3,"BlockGraphExport"],[3,"LedgerDataExport"],[3,"BlockId"],[3,"Vec"],[3,"GraphConfig"],[15,"u8"],[15,"usize"],[4,"Result"],[15,"bool"],[3,"Slot"],[3,"Formatter"],[6,"Result"],[4,"ModelsError"],[3,"ActiveBlock"],[3,"HashMap"],[3,"Address"],[6,"Map"],[3,"Clique"],[3,"EndorsementId"],[6,"WrappedEndorsement"],[3,"EndorsementInfo"],[3,"ConsensusLedgerSubset"],[3,"OperationId"],[3,"OperationSearchResult"],[15,"u32"],[3,"Storage"],[8,"Future"],[3,"TypeId"],[4,"GraphError"],[4,"InternalError"],[4,"LedgerError"],[3,"Error"],[3,"Error"],[4,"ProofOfStakeError"],[4,"ExecutionError"],[4,"Error"],[4,"TransactionError"],[3,"TryFromSliceError"],[8,"Error"],[3,"String"],[3,"ExportActiveBlock"],[3,"LedgerChange"],[6,"LedgerResult"],[3,"Ledger"],[15,"u64"],[3,"LedgerConfig"],[3,"LedgerData"],[3,"Amount"],[13,"Invalid"],[13,"Active"],[13,"Final"],[13,"Discarded"],[13,"ExecutionError"],[13,"ModelsError"],[13,"GenesisCreationError"],[13,"MissingBlock"],[13,"ContainerInconsistency"],[13,"InvalidLedgerChange"],[13,"IOError"],[13,"SerdeError"],[13,"ProofOfStakeError"],[13,"PosCycleUnavailable"],[13,"LedgerError"],[13,"TransactionError"],[13,"TransactionError"],[13,"LedgerInconsistency"],[13,"SledError"],[13,"SledTransactionError"],[13,"ModelsError"],[13,"TryFromSliceError"],[13,"IOError"],[13,"SerdeError"],[8,"OperationLedgerInterface"]]},\
"massa_hash":{"doc":"Hash management crate","t":[17,3,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["HASH_SIZE_BYTES","Hash","HashDeserializer","MassaHashError","ParsingError","WrongPrefix","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","compute_from","default","deserialize","deserialize","eq","fmt","fmt","fmt","fmt","from","from","from","from_bs58_check","from_bytes","from_str","hash","into","into","into","into_bytes","ne","new","partial_cmp","serialize","to_bs58_check","to_bytes","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","1"],"q":["massa_hash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_hash::MassaHashError","",""],"d":["Hash size","Hash wrapper, the underlying hash type is Blake3","Deserializer for <code>Hash</code>","Error generated by massa-hash crate","parsing error : {0}","Wrong prefix for hash: expected {0}, got {1}","","","","","","","","","","","","Compute a hash from data.","","<code>::serde::Deserialize</code> trait for Hash if the deserializer is …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize using <code>bs58</code> encoding with checksum.","Deserialize a Hash as bytes.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert into bytes.","","Creates a deserializer for <code>Hash</code>","","<code>::serde::Serialize</code> trait for Hash if the serializer is …","Serialize a Hash using <code>bs58</code> encoding with checksum.","Serialize a Hash as bytes.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,1,2,4,1,2,4,1,2,1,2,2,2,4,2,4,2,1,1,2,2,1,2,4,2,2,2,2,1,2,4,2,2,4,2,2,2,2,1,2,1,2,1,2,4,1,2,4,1,2,4,18,19,19],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[2,2],3],[[],2],[[],4],[5,[[6,[2]]]],[4,[[9,[2,[0,[7,8]]]]]],[[2,2],10],[[1,11],12],[[1,11],12],[[2,11],12],[[2,11],12],[[]],[[]],[[]],[13,[[6,[2,1]]]],[[],2],[13,[[6,[2]]]],[2],[[]],[[]],[[]],[2],[[2,2],10],[[],4],[[2,2],[[14,[3]]]],[[2,15],6],[2,16],[2],[[]],[[]],[[],16],[[],16],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],17],[[],17],[[],17],0,0,0],"p":[[4,"MassaHashError"],[3,"Hash"],[4,"Ordering"],[3,"HashDeserializer"],[8,"Deserializer"],[4,"Result"],[8,"ParseError"],[8,"ContextError"],[6,"IResult"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"str"],[4,"Option"],[8,"Serializer"],[3,"String"],[3,"TypeId"],[13,"ParsingError"],[13,"WrongPrefix"]]},\
"massa_ledger_exports":{"doc":"General description","t":[12,8,17,17,13,17,13,13,13,13,3,3,3,3,3,3,8,3,3,3,3,3,3,4,13,13,13,13,4,4,4,13,10,11,11,11,11,11,11,10,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,10,11,10,10,10,10,11,10,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12],"n":["0","Applicable","BALANCE_IDENT","BYTECODE_IDENT","ContainerInconsistency","DATASTORE_IDENT","Delete","Delete","FileError","Keep","KeyDeserializer","KeySerializer","LedgerChanges","LedgerChangesDeserializer","LedgerChangesSerializer","LedgerConfig","LedgerController","LedgerEntry","LedgerEntryDeserializer","LedgerEntrySerializer","LedgerEntryUpdate","LedgerEntryUpdateDeserializer","LedgerEntryUpdateSerializer","LedgerError","MissingEntry","Set","Set","Set","SetOrDelete","SetOrKeep","SetUpdateOrDelete","Update","apply","apply","apply","apply","apply","apply","apply","apply_changes","apply_to","balance_key","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytecode","bytecode","bytecode_key","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data_key","data_prefix","datastore","datastore","default","default","default","default","default","default","default","default","default","default","default","default","delete_data_entry","deserialize","deserialize","deserialize","deserialize","deserialize","disk_ledger_path","entry_exists","entry_exists_or_else","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes_compact","get","get_address_from_key","get_bytecode","get_bytecode_or_else","get_data_entry","get_data_entry_or_else","get_entire_datastore","get_full_entry","get_ledger_part","get_parallel_balance","get_parallel_balance_or_else","has_data_entry","has_data_entry_or_else","initial_sce_ledger_path","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new","new","new","parallel_balance","parallel_balance","serialize","serialize","serialize","serialize","serialize","set_bytecode","set_data_entry","set_ledger_part","set_parallel_balance","to_bytes_compact","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","0","0","0"],"q":["massa_ledger_exportsmassa_ledger_exports::LedgerError","","","massa_ledger_exports::SetOrDelete","massa_ledger_exports::SetOrKeep","massa_ledger_exports::SetUpdateOrDelete",""],"d":["","Trait marking a structure that supports another one (V) …","","","container inconsistency: <code>{0}</code>","","Deletes the value T","deletes the value","file error: <code>{0}</code>","keeps the existing value","Basic key deserializer","Basic key serializer","represents a list of changes to multiple ledger entries","<code>LedgerChanges</code> deserializer","<code>LedgerChanges</code> serializer","Ledger configuration","","Structure defining an entry associated to an address in …","Deserializer for <code>LedgerEntry</code>","Serializer for <code>LedgerEntry</code>","represents an update to one or more fields of a <code>LedgerEntry</code>","Deserializer for <code>LedgerEntryUpdate</code>","Serializer for <code>LedgerEntryUpdate</code>","ledger error","missing entry: <code>{0}</code>","Sets the value T a new absolute value T","sets a new absolute value T","sets a new absolute value T","<code>Enum</code> representing a set/delete change on a value T","represents a set/keep change","Enumeration representing set/update/delete change on a …","Applies an update V to an existing value T. If the value T …","apply changes from other to mutable self","extends the <code>LedgerEntryUpdate</code> with another one","extends the current <code>LedgerChanges</code> with another one","","","","","Allows applying <code>LedgerChanges</code> to the final ledger","applies the current <code>SetOrKeep</code> to a target mutable value","Balance key formatting macro","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","change the executable bytecode","Executable bytecode","Bytecode key formatting macro","","","","","","","","","","","","","","","Datastore entry key formatting macro","Datastore entry prefix formatting macro","change datastore entries","A key-value store associating a hash to arbitrary bytes","","","","","","","","","","","","","Deletes a datastore entry for a given address. Does …","","","","","","disk ledger db directory","Checks if a ledger entry exists","Tries to return whether an entry exists or gets the …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Get an item from the <code>LedgerChanges</code>","Extract an address from a key","Gets a copy of the bytecode of a ledger entry","Tries to return the executable bytecode of an entry or …","Gets a copy of the value of a datastore entry for a given …","Tries to return a datastore entry for a given address, or …","Returns","TODO: remove when API is updated","Get a part of the ledger Used for bootstrap Return: Tuple …","Gets the parallel balance of a ledger entry","Tries to return the parallel balance of an entry or gets …","Checks for the existence of a datastore entry for a given …","Tries to return whether a datastore entry exists for a …","initial SCE ledger file","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Creates a new <code>LedgerEntryUpdateSerializer</code>","Creates a new <code>LedgerEntryUpdateDeserializer</code>","Creates a new <code>LedgerChangesSerializer</code>","Creates a new <code>LedgerChangesDeserializer</code>","Creates a new <code>LedgerEntrySerializer</code>","Creates a new <code>LedgerEntryDeserializer</code>","Creates a new <code>KeySerializer</code>","Creates a new <code>KeyDeserializer</code>","change the parallel balance","The parallel balance of that entry. See lib.rs for an …","","","","","","Set the executable bytecode of an address. If the address …","Set a datastore entry for a given address. If the address …","Set a part of the ledger Used for bootstrap Return: Last …","Set the parallel balance of an address. If the address …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[2,0,0,0,33,0,6,8,33,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,6,8,9,0,0,0,6,5,1,2,3,6,8,9,42,9,0,12,13,14,15,16,17,11,33,18,19,1,2,3,6,8,9,12,13,14,15,16,17,11,33,18,19,1,2,3,6,8,9,1,3,0,11,1,2,3,6,8,9,11,1,2,3,6,8,9,0,0,1,3,12,13,14,15,16,17,18,19,1,2,3,9,2,13,15,17,19,3,11,42,2,1,2,3,6,8,9,11,33,33,1,2,3,6,8,9,12,13,14,15,16,17,11,33,18,19,1,2,3,6,8,9,3,2,0,42,2,42,2,42,42,42,42,2,42,2,11,12,13,14,15,16,17,11,33,18,19,1,2,3,6,8,9,1,2,3,6,8,9,12,13,14,15,16,17,18,19,1,3,12,14,16,18,3,2,2,42,2,3,11,1,2,3,6,8,9,33,12,13,14,15,16,17,11,33,18,19,1,2,3,6,8,9,12,13,14,15,16,17,11,33,18,19,1,2,3,6,8,9,12,13,14,15,16,17,11,33,18,19,1,2,3,6,8,9,12,13,14,15,16,17,11,33,18,19,1,2,3,6,8,9,43,44,45,46,47,48,49],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[1,1]],[[2,2]],[[3,1]],[[[6,[[0,[4,[5,[[5,[[5,[5]]]]]]]],[5,[[5,[[5,[5]]]]]]]],[6,[[0,[4,[5,[[5,[[5,[5]]]]]]]],[5,[[5,[[5,[5]]]]]]]]]],[[[8,[7]],[8,[7]]]],[[[9,[7]],[9,[7]]]],[[2,10]],[[[9,[7]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[11,11],[1,1],[2,2],[3,3],[[[6,[[0,[7,4,[5,[[0,[7,[5,[[0,[7,[5,[[0,[7,5,7]]]],7]]]],7]]]]]],[0,[7,[5,[[0,[7,[5,[[0,[7,[5,[[0,[7,5,7]]]],7]]]],7]]]],7]]]]],[[6,[[0,[7,4,[5,[[0,[7,[5,[[0,[7,[5,[[0,[7,5,7]]]],7]]]],7]]]]]],[0,[7,[5,[[0,[7,[5,[[0,[7,[5,[[0,[7,5,7]]]],7]]]],7]]]],7]]]]]],[[[8,[[0,[7,7]]]]],[[8,[[0,[7,7]]]]]],[[[9,[[0,[7,7]]]]],[[9,[[0,[7,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],12],[[],13],[[],14],[[],15],[[],16],[[],17],[[],18],[[],19],[[],1],[[],2],[[],3],[[],[[9,[7]]]],[[2,20,21]],[13,[[24,[1,[0,[22,23]]]]]],[15,[[24,[2,[0,[22,23]]]]]],[17,[[24,[3,[0,[22,23]]]]]],[19,[[24,[[26,[25]],[0,[22,23]]]]]],[[],[[27,[3]]]],0,[20,28],[[2,20,29],28],[[1,1],28],[[2,2],28],[[3,3],28],[[[6,[[0,[30,4,[5,[[0,[30,[5,[[0,[30,[5,[[0,[30,5,7]]]],7]]]],7]]]]]],[0,[30,[5,[[0,[30,[5,[[0,[30,[5,[[0,[30,5,7]]]],7]]]],7]]]],7]]]],6],28],[[[8,[[0,[30,7]]]],8],28],[[[9,[[0,[30,7]]]],9],28],[[11,31],32],[[33,31],32],[[33,31],32],[[1,31],32],[[2,31],32],[[3,31],32],[[[6,[[0,[34,4,[5,[[0,[34,[5,[[0,[34,[5,[[0,[34,5,7]]]],7]]]],7]]]]]],[0,[34,[5,[[0,[34,[5,[[0,[34,[5,[[0,[34,5,7]]]],7]]]],7]]]],7]]]],31],32],[[[8,[[0,[34,7]]]],31],32],[[[9,[[0,[34,7]]]],31],32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[27,[35]]]],[[2,20],[[36,[6]]]],[[],[[36,[20]]]],[20,[[36,[[26,[25]]]]]],[[2,20,29],[[36,[[26,[25]]]]]],[[20,21],[[36,[[26,[25]]]]]],[[2,20,21,29],[[36,[[26,[25]]]]]],[20,[[37,[21,[26,[25]]]]]],[20,[[36,[3]]]],[36,[[27,[35]]]],[20,[[36,[38]]]],[[2,20,29],[[36,[38]]]],[[20,21],28],[[2,20,21,29],28],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],28],[[2,2],28],[[3,3],28],[[[6,[[0,[30,4,[5,[[0,[30,[5,[[0,[30,[5,[[0,[30,5,7]]]],7]]]],7]]]]]],[0,[30,[5,[[0,[30,[5,[[0,[30,[5,[[0,[30,5,7]]]],7]]]],7]]]],7]]]],6],28],[[[8,[[0,[30,7]]]],8],28],[[[9,[[0,[30,7]]]],9],28],[[],12],[[],13],[[],14],[[],15],[[],16],[[],17],[[],18],[[],19],0,0,[[12,1,26],[[27,[39]]]],[[14,2,26],[[27,[39]]]],[[16,3,26],[[27,[39]]]],[[18,26,26],[[27,[39]]]],[3,27],[[2,20,[26,[25]]]],[[2,20,21,[26,[25]]]],[[[26,[25]]],[[27,[[36,[[26,[25]]]],35]]]],[[2,20,38]],[3,[[27,[[26,[25]],35]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],40],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0],"p":[[3,"LedgerEntryUpdate"],[3,"LedgerChanges"],[3,"LedgerEntry"],[8,"Default"],[8,"Applicable"],[4,"SetUpdateOrDelete"],[8,"Clone"],[4,"SetOrDelete"],[4,"SetOrKeep"],[3,"Slot"],[3,"LedgerConfig"],[3,"LedgerEntryUpdateSerializer"],[3,"LedgerEntryUpdateDeserializer"],[3,"LedgerChangesSerializer"],[3,"LedgerChangesDeserializer"],[3,"LedgerEntrySerializer"],[3,"LedgerEntryDeserializer"],[3,"KeySerializer"],[3,"KeyDeserializer"],[3,"Address"],[3,"Hash"],[8,"ParseError"],[8,"ContextError"],[6,"IResult"],[15,"u8"],[3,"Vec"],[4,"Result"],[15,"bool"],[8,"FnOnce"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[4,"LedgerError"],[8,"Debug"],[4,"ModelsError"],[4,"Option"],[3,"BTreeMap"],[3,"Amount"],[4,"SerializeError"],[3,"String"],[3,"TypeId"],[8,"LedgerController"],[13,"ContainerInconsistency"],[13,"MissingEntry"],[13,"FileError"],[13,"Set"],[13,"Set"],[13,"Set"],[13,"Update"]]},\
"massa_ledger_worker":{"doc":"General description","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["FinalLedger","apply_changes","borrow","borrow_mut","entry_exists","fmt","from","get_bytecode","get_data_entry","get_entire_datastore","get_full_entry","get_ledger_part","get_parallel_balance","has_data_entry","into","new","set_ledger_part","try_from","try_into","type_id","vzip"],"q":["massa_ledger_worker","","","","","","","","","","","","","","","","","","","",""],"d":["Represents a final ledger associating addresses to their …","Allows applying <code>LedgerChanges</code> to the final ledger","","","Checks if a ledger entry exists","","Returns the argument unchanged.","Gets a copy of the bytecode of a ledger entry","Gets a copy of the value of a datastore entry for a given …","Returns","TODO: remove when API is updated","Get a part of the ledger Used for bootstrap Return: Tuple …","Gets the parallel balance of a ledger entry","Checks for the existence of a datastore entry for a given …","Calls <code>U::from(self)</code>.","Initializes a new <code>FinalLedger</code> by reading its initial state …","Set a part of the ledger Used for bootstrap Return: Last …","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[1,2,3]],[[]],[[]],[[1,4],5],[[1,6],7],[[]],[[1,4],[[10,[[9,[8]]]]]],[[1,4,11],[[10,[[9,[8]]]]]],[[1,4],[[12,[11,[9,[8]]]]]],[[1,4],[[10,[13]]]],[[1,10],[[15,[14]]]],[[1,4],[[10,[16]]]],[[1,4,11],5],[[]],[17,[[15,[1,18]]]],[[1,[9,[8]]],[[15,[[10,[[9,[8]]]],14]]]],[[],15],[[],15],[[],19],[[]]],"p":[[3,"FinalLedger"],[3,"LedgerChanges"],[3,"Slot"],[3,"Address"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u8"],[3,"Vec"],[4,"Option"],[3,"Hash"],[3,"BTreeMap"],[3,"LedgerEntry"],[4,"ModelsError"],[4,"Result"],[3,"Amount"],[3,"LedgerConfig"],[4,"LedgerError"],[3,"TypeId"]]},\
"massa_logging":{"doc":"Log utilities","t":[14],"n":["massa_trace"],"q":["massa_logging"],"d":["tracing with some context"],"i":[0],"f":[0],"p":[]},\
"massa_models":{"doc":"All the structures that are used everywhere","t":[12,2,2,2,2,2,3,3,3,3,3,3,3,3,8,8,8,3,3,3,3,3,3,18,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,8,8,8,2,2,2,2,3,3,3,3,3,3,3,6,6,6,2,0,0,11,0,0,5,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,10,10,12,11,11,5,11,11,11,11,12,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,12,12,12,0,12,11,11,12,12,12,0,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,0,12,12,12,0,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,3,12,12,12,12,11,11,12,11,11,12,12,12,11,12,11,11,11,11,12,12,12,12,12,11,12,11,11,11,11,11,12,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,13,13,13,13,13,3,4,4,13,3,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,12,12,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,17,17,17,17,17,17,17,3,17,17,17,3,17,3,3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,17,17,17,17,3,12,11,11,5,11,11,0,11,0,12,11,12,11,11,11,12,11,12,12,12,12,12,12,11,12,12,11,11,11,11,11,11,17,17,17,17,17,17,17,17,17,17,3,17,3,3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,17,17,17,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,3,17,17,17,17,17,17,17,17,17,3,17,17,17,17,3,3,17,17,17,17,3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,17,17,17,17,17,17,17,17,17,3,17,17,17,3,17,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,4,6,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,3,13,4,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,3,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,3,3,3,6,3,3,3,3,6,3,3,3,4,3,3,6,3,3,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,12,11,11,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,6,6,8,3,6,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,12,12,11,11,11,11,11,11,12,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,12,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,8,3,8,3,3,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,11,11,11,11,10,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","Address","AddressDeserializer","Amount","AmountDeserializer","AmountSerializer","Block","BlockDeserializer","BlockHeader","BlockHeaderDeserializer","BlockHeaderSerializer","BlockId","BlockSerializer","CompactConfig","DeserializeCompact","DeserializeMinBEInt","DeserializeVarInt","Endorsement","EndorsementDeserializer","EndorsementId","EndorsementSerializer","IpAddrDeserializer","IpAddrSerializer","MIN_BE_INT_BASE_SIZE","ModelsError","Operation","OperationId","OperationIdsDeserializer","OperationPrefixId","OperationPrefixIdDeserializer","OperationPrefixIds","OperationPrefixIdsDeserializer","OperationPrefixIdsSerializer","OperationSearchResult","OperationSearchResultBlockStatus","OperationSearchResultStatus","OperationSerializer","OperationType","SerializationContext","SerializeCompact","SerializeMinBEInt","SerializeVarInt","Slot","SlotDeserializer","SlotSerializer","StakersCycleProductionStats","StringDeserializer","StringSerializer","VecU8Deserializer","VecU8Serializer","Version","VersionDeserializer","VersionSerializer","WrappedBlock","WrappedEndorsement","WrappedHeader","WrappedOperation","active_block","address","addresses_to_endorsements","amount","api","array_from_slice","be_bytes_min_length","block_reward","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes_count","clique","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","composite","const_default","constants","contains_operation","default","default","default","default","default","default","default","default","default","default","default","delta_f0","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","end_timestamp","endorsed_block","endorsement_count","endorsements","eq","eq","eq","error","execution","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_be_bytes_min","from_bs58_check","from_bs58_check","from_bytes","from_bytes","from_bytes_compact","from_str","from_str","from_str","from_varint_bytes","from_varint_bytes_bounded","genesis_timestamp","get_first_bit","get_roll_involved_addresses","get_serialization_context","hash","hash","hash","hash","header","index","init_serialization_context","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_bytes","into_bytes","involved_addresses","is_compatible","ledger_models","max_advertise_length","max_ask_blocks_per_message","max_block_size","max_block_size","max_bootstrap_blocks","max_bootstrap_children","max_bootstrap_cliques","max_bootstrap_deps","max_bootstrap_message_size","max_bootstrap_pos_cycles","max_bootstrap_pos_entries","max_endorsements_per_message","max_message_size","max_operations_per_block","max_operations_per_message","ne","ne","ne","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_wrapped","node","operation","operation_merkle_root","operation_validity_periods","operations","output_event","parents","partial_cmp","partial_cmp","periods_per_cycle","pos_lock_cycles","pos_lookback_cycles","prehash","roll_price","rolls","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","slot","slot","slot","stats","t0","thread_count","thread_count","timeslots","to_be_bytes_min","to_bytes","to_bytes","to_bytes_compact","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_varint_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u8_from_slice","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_serialization_context","wrapped","ActiveBlock","addresses_to_endorsements","addresses_to_operations","block_id","block_ledger_changes","borrow","borrow_mut","children","clone","clone_into","creator_address","dependencies","descendants","deserialize","endorsement_ids","fitness","fmt","from","into","is_final","operation_set","parents","production_events","roll_updates","serialize","slot","to_owned","try_from","try_into","type_id","vzip","0","Address","AddressCycleProductionStats","AddressDeserializer","AddressState","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cycle","default","deserialize","deserialize","deserialize","deserialize","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_bs58_check","from_bytes","from_public_key","from_str","get_thread","hash","into","into","into","into","into_bytes","is_final","ledger_info","ne","new","nok_count","ok_count","partial_cmp","production_stats","rolls","serialize","serialize","serialize","to_bs58_check","to_bytes","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","Amount","AmountDeserializer","AmountSerializer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_div_u64","checked_mul_u64","checked_sub","clone","clone_into","cmp","default","default","deserialize","deserialize","eq","fmt","fmt","from","from","from","from_bytes_compact","from_raw","from_str","into","into","into","is_zero","ne","new","new","partial_cmp","saturating_add","saturating_mul_u64","saturating_sub","serialize","serialize","to_bytes_compact","to_owned","to_raw","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","zero","AddressInfo","BlockInfo","BlockInfoContent","BlockSummary","CompactAddressInfo","DatastoreEntryInput","DatastoreEntryOutput","EndorsementInfo","EventFilter","IndexedSlot","LedgerInfo","NodeStatus","OperationInfo","OperationInput","ReadOnlyBytecodeExecution","ReadOnlyCall","RollsInfo","TimeInterval","active_rolls","active_value","address","address","address","address","balance","block","block_draws","blocks_created","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytecode","caller_address","candidate_balance","candidate_balance_info","candidate_ledger_info","candidate_rolls","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compact","config","connected_nodes","consensus_stats","content","creator","creator_public_key","current_cycle","current_time","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","emitter_address","end","end","endorsement","endorsement_draws","eq","extend","final_balance","final_balance_info","final_ledger_info","final_rolls","final_value","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","id","id","id","id","in_blocks","in_blocks","in_pool","in_pool","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","involved_in_endorsements","involved_in_operations","is_final","is_final","is_final","is_final","is_in_blockclique","is_in_blockclique","is_stale","is_stale","key","last_slot","ledger_info","locked_balance","max_gas","max_gas","ne","network_stats","next_slot","node_id","node_ip","operation","original_caller_address","original_operation_id","parameter","parents","pool_stats","production_stats","rolls","rolls","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialized_content","signature","simulated_gas_price","simulated_gas_price","slot","slot","start","start","target_address","target_function","thread","thread","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Clique","block_ids","borrow","borrow_mut","clone","clone_into","deserialize","fitness","fmt","from","from_bytes_compact","into","is_blockclique","serialize","to_bytes_compact","to_owned","try_from","try_into","type_id","vzip","Active","Discarded","Discarded","InBlock","Incoming","OperationSearchResult","OperationSearchResultBlockStatus","OperationSearchResultStatus","Pending","PubkeySig","StakersCycleProductionStats","WaitingForDependencies","WaitingForSlot","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cycle","deserialize","deserialize","deserialize","deserialize","deserialize","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","in_blocks","in_pool","into","into","into","into","into","is_final","ok_nok_counts","op","public_key","serialize","serialize","serialize","serialize","serialize","signature","status","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","0","ADDRESS_SIZE_BYTES","AMOUNT_DECIMAL_FACTOR","ASYNC_POOL_PART_SIZE_MESSAGE_BYTES","BLOCK_ID_SIZE_BYTES","BLOCK_REWARD","BOOTSTRAP_RANDOMNESS_SIZE_BYTES","CHANNEL_SIZE","CompactConfig","DELTA_F0","ENDORSEMENT_COUNT","ENDORSEMENT_ID_SIZE_BYTES","END_TIMESTAMP","EVENT_ID_SIZE_BYTES","GENESIS_KEY","GENESIS_TIMESTAMP","HANDSHAKE_RANDOMNESS_SIZE_BYTES","INITIAL_DRAW_SEED","IP_LIST_MAX_SIZE","LEDGER_PART_SIZE_MESSAGE_BYTES","MAX_ADVERTISE_LENGTH","MAX_ASK_BLOCKS_PER_MESSAGE","MAX_ASYNC_GAS","MAX_ASYNC_POOL_LENGTH","MAX_BLOCK_SIZE","MAX_BOOTSTRAP_BLOCKS","MAX_BOOTSTRAP_CHILDREN","MAX_BOOTSTRAP_CLIQUES","MAX_BOOTSTRAP_DEPS","MAX_BOOTSTRAP_MESSAGE_SIZE","MAX_BOOTSTRAP_POS_CYCLES","MAX_BOOTSTRAP_POS_ENTRIES","MAX_DUPLEX_BUFFER_SIZE","MAX_ENDORSEMENTS_PER_MESSAGE","MAX_GAS_PER_BLOCK","MAX_MESSAGE_SIZE","MAX_OPERATIONS_PER_BLOCK","MAX_OPERATIONS_PER_MESSAGE","NODE_SEND_CHANNEL_SIZE","OPERATION_ID_PREFIX_SIZE_BYTES","OPERATION_ID_SIZE_BYTES","OPERATION_VALIDITY_PERIODS","PERIODS_PER_CYCLE","POS_LOCK_CYCLES","POS_LOOKBACK_CYCLES","POS_MISS_RATE_DEACTIVATION_THRESHOLD","ROLL_PRICE","SLOT_KEY_SIZE","T0","THREAD_COUNT","VERSION","block_reward","borrow","borrow_mut","build_massa_settings","clone","clone_into","default","default","default_testing","delta_f0","deserialize","end_timestamp","fmt","fmt","from","genesis_timestamp","into","max_block_size","operation_validity_periods","periods_per_cycle","pos_lock_cycles","pos_lookback_cycles","roll_price","serialize","t0","thread_count","to_owned","to_string","try_from","try_into","type_id","vzip","ADDRESS_SIZE_BYTES","AMOUNT_DECIMAL_FACTOR","ASYNC_POOL_PART_SIZE_MESSAGE_BYTES","BLOCK_ID_SIZE_BYTES","BLOCK_REWARD","BOOTSTRAP_RANDOMNESS_SIZE_BYTES","CHANNEL_SIZE","DELTA_F0","ENDORSEMENT_COUNT","ENDORSEMENT_ID_SIZE_BYTES","END_TIMESTAMP","EVENT_ID_SIZE_BYTES","GENESIS_KEY","GENESIS_TIMESTAMP","HANDSHAKE_RANDOMNESS_SIZE_BYTES","INITIAL_DRAW_SEED","IP_LIST_MAX_SIZE","LEDGER_PART_SIZE_MESSAGE_BYTES","MAX_ADVERTISE_LENGTH","MAX_ASK_BLOCKS_PER_MESSAGE","MAX_ASYNC_GAS","MAX_ASYNC_POOL_LENGTH","MAX_BLOCK_SIZE","MAX_BOOTSTRAP_BLOCKS","MAX_BOOTSTRAP_CHILDREN","MAX_BOOTSTRAP_CLIQUES","MAX_BOOTSTRAP_DEPS","MAX_BOOTSTRAP_MESSAGE_SIZE","MAX_BOOTSTRAP_POS_CYCLES","MAX_BOOTSTRAP_POS_ENTRIES","MAX_DUPLEX_BUFFER_SIZE","MAX_ENDORSEMENTS_PER_MESSAGE","MAX_GAS_PER_BLOCK","MAX_MESSAGE_SIZE","MAX_OPERATIONS_PER_BLOCK","MAX_OPERATIONS_PER_MESSAGE","NODE_SEND_CHANNEL_SIZE","OPERATION_ID_PREFIX_SIZE_BYTES","OPERATION_ID_SIZE_BYTES","OPERATION_VALIDITY_PERIODS","PERIODS_PER_CYCLE","POS_LOCK_CYCLES","POS_LOOKBACK_CYCLES","POS_MISS_RATE_DEACTIVATION_THRESHOLD","ROLL_PRICE","SLOT_KEY_SIZE","T0","THREAD_COUNT","VERSION","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","from","from","from","from","from","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","ADDRESS_SIZE_BYTES","AMOUNT_DECIMAL_FACTOR","ASYNC_POOL_PART_SIZE_MESSAGE_BYTES","BASE_NETWORK_CONTROLLER_IP","BLOCK_DB_PRUNE_INTERVAL","BLOCK_ID_SIZE_BYTES","BLOCK_REWARD","BOOTSTRAP_RANDOMNESS_SIZE_BYTES","CHANNEL_SIZE","CURSOR_DELAY","DELTA_F0","DISABLE_BLOCK_CREATION","ENDORSEMENT_COUNT","ENDORSEMENT_ID_SIZE_BYTES","END_TIMESTAMP","EVENT_ID_SIZE_BYTES","FINAL_HISTORY_LENGTH","FORCE_KEEP_FINAL_PERIOD","FUTURE_BLOCK_PROCESSING_MAX_PERIODS","GENESIS_KEY","GENESIS_TIMESTAMP","HANDSHAKE_RANDOMNESS_SIZE_BYTES","INITIAL_DRAW_SEED","IP_LIST_MAX_SIZE","LEDGER_CACHE_CAPACITY","LEDGER_FLUSH_INTERVAL","LEDGER_PART_SIZE_MESSAGE_BYTES","LEDGER_RESET_AT_STARTUP","MAX_ADVERTISE_LENGTH","MAX_ASK_BLOCKS_PER_MESSAGE","MAX_ASYNC_GAS","MAX_ASYNC_POOL_LENGTH","MAX_BLOCK_SIZE","MAX_BOOTSTRAP_BLOCKS","MAX_BOOTSTRAP_CHILDREN","MAX_BOOTSTRAP_CLIQUES","MAX_BOOTSTRAP_DEPS","MAX_BOOTSTRAP_MESSAGE_SIZE","MAX_BOOTSTRAP_POS_CYCLES","MAX_BOOTSTRAP_POS_ENTRIES","MAX_DEPENDENCY_BLOCK","MAX_DISCARDED_BLOCKS","MAX_DUPLEX_BUFFER_SIZE","MAX_ENDORSEMENTS_PER_MESSAGE","MAX_FINAL_EVENTS","MAX_FUTURE_PROCESSING_BLOCK","MAX_GAS_PER_BLOCK","MAX_ITEM_RETURN_COUNT","MAX_MESSAGE_SIZE","MAX_OPERATIONS_PER_BLOCK","MAX_OPERATIONS_PER_MESSAGE","MAX_OPERATION_FILL_ATTEMPTS","MAX_SEND_WAIT","NODE_SEND_CHANNEL_SIZE","OPERATION_BATCH_SIZE","OPERATION_ID_PREFIX_SIZE_BYTES","OPERATION_ID_SIZE_BYTES","OPERATION_VALIDITY_PERIODS","PERIODS_PER_CYCLE","POS_DRAW_CACHED_CYCLE","POS_LOCK_CYCLES","POS_LOOKBACK_CYCLES","POS_MISS_RATE_DEACTIVATION_THRESHOLD","READONLY_QUEUE_LENGTH","ROLL_PRICE","SLOT_KEY_SIZE","STATS_TIMESPAN","T0","THREAD_COUNT","VERSION","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref","deref","deref","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AddressParseError","AmountOverflowError","AmountParseError","BufferError","CheckedOperationError","DeserializeError","HashError","InvalidLedgerChange","InvalidRollUpdate","InvalidVersionError","MassaHashError","MassaSignatureError","ModelsError","ModelsResult","OperationPrefixJoinError","PeriodOverflowError","SerializationError","SerializeError","ThreadOverflowError","TimeError","TimeOverflowError","WrongPrefix","borrow","borrow_mut","clone","clone_into","fmt","fmt","from","from","from","from","from","from","into","source","to_owned","to_string","try_from","try_into","type_id","vzip","0","0","0","0","0","0","0","0","0","0","0","0","0","1","Error","ExecuteReadOnlyResponse","Ok","ReadOnlyResult","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deserialize","deserialize","executed_at","fmt","fmt","fmt","from","from","into","into","output_events","result","serialize","serialize","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","LedgerChange","LedgerChanges","LedgerData","add_reward","apply","apply_change","balance","balance_delta","balance_increment","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chain","chain","clone","clone","clone","clone_into","clone_into","clone_into","clone_subset","default","default","default","deserialize","deserialize","deserialize","fmt","fmt","fmt","from","from","from","from_bytes_compact","from_bytes_compact","from_bytes_compact","get_involved_addresses","into","into","into","is_nil","is_nil","new","serialize","serialize","serialize","sync_from","to_bytes_compact","to_bytes_compact","to_bytes_compact","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","0","NodeId","borrow","borrow_mut","clone","clone_into","cmp","deserialize","eq","fmt","fmt","from","from_str","hash","into","ne","partial_cmp","serialize","to_owned","to_string","try_from","try_into","type_id","vzip","CallSC","ExecuteSC","Operation","OperationDeserializer","OperationId","OperationIds","OperationIdsDeserializer","OperationIdsSerializer","OperationPrefixId","OperationPrefixIdDeserializer","OperationPrefixIds","OperationPrefixIdsDeserializer","OperationPrefixIdsSerializer","OperationSerializer","OperationType","OperationTypeDeserializer","OperationTypeSerializer","Operations","OperationsDeserializer","OperationsSerializer","RollBuy","RollSell","Transaction","WrappedOperation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","default","default","default","default","default","default","default","default","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","expire_period","fee","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bs58_check","from_bytes","from_str","get_gas_coins","get_gas_usage","get_ledger_involved_addresses","get_roll_involved_addresses","get_validity_range","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_bytes","into_prefix","ne","ne","new","new","new","new","new","new","new","new","new","new","new","new","op","partial_cmp","partial_cmp","prefix","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify_integrity","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","amount","coins","data","gas_price","gas_price","max_gas","max_gas","parallel_coins","param","recipient_address","roll_count","roll_count","sequential_coins","target_addr","target_func","EventExecutionContext","SCOutputEvent","block","borrow","borrow","borrow_mut","borrow_mut","call_stack","clone","clone","clone_into","clone_into","context","data","deserialize","deserialize","fmt","fmt","fmt","fmt","from","from","index_in_slot","into","into","origin_operation_id","read_only","serialize","serialize","slot","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","BuildMap","Map","PreHashed","PreHashedMap","Set","borrow","borrow_mut","default","finish","from","into","try_from","try_into","type_id","vzip","write","0","0","0","RollCompensation","RollCounts","RollUpdate","RollUpdateDeserializer","RollUpdateSerializer","RollUpdates","apply","apply_updates","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_subset","clone_subset","compensate","default","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_involved_addresses","into","into","into","into","into","into","is_empty","is_nil","len","new","new","new","roll_purchases","roll_sales","serialize","serialize","serialize","serialize","serialize","sync_from","sync_from","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","Slot","SlotDeserializer","SlotSerializer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","default","deserialize","deserialize","eq","fmt","fmt","from","from","from","from_bytes_compact","from_bytes_key","from_str","get_cycle","get_first_bit","get_next_slot","hash","into","into","into","max","min","ne","new","new","new","partial_cmp","period","serialize","serialize","slots_since","thread","to_bytes_compact","to_bytes_key","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ConsensusStats","NetworkStats","PoolStats","active_node_count","banned_peer_count","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clique_count","clone","clone_into","deserialize","deserialize","deserialize","end_timespan","endorsement_count","final_block_count","final_operation_count","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","in_connection_count","into","into","into","known_peer_count","operation_count","out_connection_count","serialize","serialize","serialize","staker_count","stale_block_count","start_timespan","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","get_block_slot_timestamp","get_current_latest_block_slot","get_latest_block_slot_at_timestamp","slot_count_in_range","time_range_to_slot_range","Id","Wrapped","WrappedContent","WrappedDeserializer","WrappedSerializer","addresses_to_endorsements","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bytes_count","clone","clone_into","contains_operation","content","creator_address","creator_public_key","default","deserialize","deserialize","deserialize","fmt","fmt","from","from","from","get_gas_coins","get_gas_usage","get_ledger_involved_addresses","get_roll_involved_addresses","get_roll_involved_addresses","get_validity_range","hash","id","into","into","into","involved_addresses","new","new","new","new_wrapped","serialize","serialize","serialize","serialized_data","signature","thread","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify_integrity","verify_signature","vzip","vzip","vzip"],"q":["massa_modelsmassa_models::active_block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::address","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::amount","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::apimassa_models::clique","","","","","","","","","","","","","","","","","","","","massa_models::composite","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::composite::OperationSearchResultStatus","massa_models::constants","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::constants::default","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::constants::default_testing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::error::ModelsError","","","","","","","","","","","","","","massa_models::execution","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::execution::ReadOnlyResult","massa_models::ledger_models","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::node","","","","","","","","","","","","","","","","","","","","","","","","massa_models::operationmassa_models::operation::OperationType","","","","","","","","","","","","","","","massa_models::output_event","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::prehash","","","","","","","","","","","","","","","","massa_models::rolls","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::slot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::stats","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::timeslots","","","","","massa_models::wrapped","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","block","Deserializer for <code>Block</code>","block header","Deserializer for <code>BlockHeader</code>","Serializer for <code>BlockHeader</code>","block id","Serializer for <code>Block</code>","Compact representation of key values of consensus …","custom deserialization trait","Deserialize min big endian","var int deserialization","an endorsement, as sent in the network","Deserializer for <code>Endorsement</code>","endorsement id","Serializer for <code>Endorsement</code>","Deserializer for <code>IpAddr</code>","Serializer for <code>IpAddr</code>","min big endian integer base size","","","","","","","","","","","","","","","a context for model serialization/deserialization","custom serialization trait","Serialize min big endian integer","varint serialization","","","","","Deserializer for <code>String</code> with generic deserializer for the …","Serializer for <code>String</code> with generic serializer for the size …","Basic <code>Vec&lt;u8&gt;</code> deserializer","Basic <code>Vec&lt;u8&gt;</code> serializer","Application version, checked during handshakes","Serializer for <code>Version</code>","Serializer for <code>Version</code>","Wrapped Block","Wrapped endorsement","wrapped header","","active blocks related structures","address related structures","returns the set of addresses mapped the the endorsements …","amount related structures","structure use by the API","array from slice","Compute the minimal big endian deserialization size","Reward amount for a block creation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","size in bytes of the whole block","clique","","","","","","","","","","","","","","","","","various structures","default constants","Expose constants","true if given operation is included in the block may fail …","","","","","","","","","","","","Threshold for fitness.","","","","","","","","","","","","","","","","TESTNET: time when the blockclique is ended.","hash of endorsed block","target endorsement count","endorsements","","","","models error","execution related structures","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserializes a minimally sized big endian integer to Self …","block id fro <code>bs58</code> check","endorsement id from <code>bs58</code> check","block id from bytes","endorsement id from bytes","deserialization","","","","Deserialize variable size integer to Self from the …","Deserialize variable size integer to Self from the …","Time in milliseconds when the blockclique started.","first bit of the hashed block id","Retrieve roll involving addresses","Get a clone of the context. For tests only.","","","","","signed header","endorsement index inside the block","Initialize the global context, should be called once at …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","block id into bytes","endorsement id into bytes","retrieves a mapping of addresses to the list of operation …","true if instance and major are the same","ledger related structures","max advertised peers length","max ask block per message","Max total size of a block","max block size","max bootstrapped blocks","max bootstrapped block children bootstrapped","max bootstrapped cliques","max bootstrapped block dependencies","max bootstrap message size","max bootstrapped proof of stake cycle","max bootstrap proof of stake entries","max endorsements per message","max message size","max operations per block","max operations per message","","","","Creates a new <code>BlockSerializer</code>","Creates a new <code>BlockDeserializer</code>","Creates a new <code>BlockHeaderSerializer</code>","Creates a new <code>BlockHeaderDeserializer</code>","Creates a new <code>EndorsementSerializer</code>","Creates a new <code>EndorsementDeserializer</code>","Creates a new <code>VecU8Serializer</code>","Creates a new <code>VecU8Deserializer</code>","Creates a <code>StringSerializer</code>.","Creates a <code>StringDeserializer</code>.","Creates a <code>VersionSerializer</code>","Creates a <code>VersionSerializer</code>","","","Creates a <code>IpAddrSerializer</code>","Creates a <code>IpAddrDeserializer</code>","","node related structure","operations","all operations hash","Maximum operation validity period count","operations","smart contract output events","parents","","","cycle duration in periods","PoS lock cycles: when some rolls are released, we only …","PoS look back cycles: when drawing for cycle N, we use the …","pre-hashed trait, for hash less hashmap/set","Price of a roll on the network","rolls","","","","","","","","","","","","","","","","slots","slot","slot of endorsed block","various statistics","Time between the periods in the same thread.","Number of threads","thread count","management of the relation between time and slots warning: …","serializes with the minimal amount of big endian bytes","block id to bytes","endorsement id to bytes","serialization","","","","","","","","","","","","","","Serialize as varint bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>u8</code> from slice","","","","","","","","","","","","","","","","","","","","","","Use the TLS context, should be called only after …","trait for signed structure","Block that was checked as valid, with some useful …","Maps addresses to endorsements id they are involved in","Maps addresses to operations id they are involved in","The id of the block","Changes caused by this block","","","one <code>HashMap&lt;Block id, period&gt;</code> per thread (blocks that need …","","","The creator’s address","dependencies required for validity check","Blocks id that have this block as an ancestor","","IDs of the endorsements to index in block","Computes the fitness of the block","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","for example has its fitness reached the given threshold","index in the block, end of validity period","one (block id, period) per thread ( if not genesis )","list of <code>(period, address, did_create)</code> for all …","<code>Address -&gt; RollUpdate</code>","","Slot of the block.","","","","","","","Derived from a public key","Production stats for a given address during a given cycle","Deserializer for <code>Address</code>","Address state as know by consensus Used to answer to API","","","","","","","","","","","","","","","","cycle number","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Example","Example","Computes address associated with given public key","","Gets the associated thread. Depends on the <code>thread_count</code>","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Example","true if that cycle is final","Parallel balance information","","Creates a new deserializer for <code>Address</code>","<code>ok_count</code> blocks were missed by this address during that …","<code>ok_count</code> blocks were created by this address during that …","","stats for still in memory cycles","Rolls information","","","","Example","Example","","","","","","","","","","","","","","","","","","","","","A structure representing a decimal Amount of coins with …","Deserializer for amount","Serializer for amount","","","","","","","safely add self to another amount, returning None on …","safely divide self by a <code>u64</code>, returning None if the factor …","safely multiply self with a <code>u64</code>, returning None on overflow","safely subtract another amount from self, returning None …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","constructs an <code>Amount</code> from the underlying raw <code>u64</code> …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","returns true if the amount is zero","","Create a new <code>AmountSerializer</code>","Create a new <code>AmountDeserializer</code>","","safely add self to another amount, saturating the result …","safely multiply self with a <code>u64</code>, saturating the result on …","safely subtract another amount from self, saturating the …","","","","","Obtains the underlying raw <code>u64</code> representation Warning: do …","","","","","","","","","","","","","","Create a zero Amount","All you ever dream to know about an address","refactor to delete","Block content","A block resume (without the block itself)","Less information about an address","Datastore entry query input struct","Datastore entry query output struct","All you wanna know about an endorsement","filter used when retrieving SC output events","When an address is drawn to create an endorsement it is …","Current Parallel balance ledger info","node status","Operation and contextual info about it","operation input","read only bytecode execution request","read SC call request","Roll counts","Just a wrapper with a optional beginning and end","count taken into account for the current cycle","active datastore entry value","the address","the address","associated address of the entry","caller’s address, optional","parallel balance","block","next slots this address will be selected to create a block","created blocks ids","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","byte code","caller’s address, optional","latest sequential balance","latest sequential balance","latest data","at latest blocks","","","","","","","","","","","","","","","","","","","Only essential info about an address","compact configuration","connected nodes (node id, ip address, true if the …","consensus stats","optional block info content","the block creator","The public key of the creator of the TX","current cycle","now","","","","","","","","","","","","","","","","","","","optional emitter address","optional end slot","optional end slot","The full endorsement","next slots this address will be selected to create a …","","extend an operation info with another one There is not …","final sequential balance","final sequential balance","final data","at final blocks","final datastore entry value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","id","the id","block id","id","the operation appears in <code>in_blocks</code> if it appears in …","endorsements included in these blocks","true if operation is still in pool","true is the endorsement is still in pool","endorsement index in the slot","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","endorsements in which this address is involved (endorser, …","operation in which this address is involved (sender or …","true if the operation is final (for example in a final …","true included in a final block","true if final","true if in a final block","true if in the greatest clique","true if in the greatest block clique","true if incompatible with a final block","true if incompatible with a final block","datastore key","latest slot, none if now is before genesis timestamp","parallel balance info","locked balance, for example balance due to a roll sell","max available gas","max available gas","","network stats","next slot","our node id","optional node ip","the operation itself","optional caller address","optional operation id","function parameter","the block parents","pool stats","stats about block production","rolls","rolls","","","","","","","","","","","","","","","","","","","The serialized version of the content base58 encoded","The signature of the operation","gas price","gas price","slot","the slot the block is in","optional start slot","optional start slot","target address","target function","the thread it is in","the thread it is","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","node version","","","","","","","","","","","","","","","","","","","Mutually compatible blocks in the graph","the block ids of the blocks in that clique","","","","","","Fitness used to compute finality Depends on descendants …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","True if it is the clique of higher fitness","","Example","","","","","","the block has been processed and is valid","the block is discarded","discarded","in a block, the block being in …","the block hasn’t been processed by consensus yet","operation info","Status in which an operation can be (derived from the …","Status in which an operation can be","in pool","just a public key and a signature it has produced used for …","all the production stats for every known staker","the block waits for dependencies for further processing","the block waits for it’s slot for further processing","","","","","","","","","","","","","","","","","","","cycle number","","","","","","combine two operation search result","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","maps block id to index on the operation in the block and …","true if in pool","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","if that cycle is final","map address to produced valid block count and not valid …","the operation","public key","","","","","","signature","operation status","","","","","","","","","","","","","","","","","","","","","","","","","","","address size","Safe to import, amount decimal factor","Maximum async messages in a batch of the bootstrap of the …","block id size","Block reward is given for each block creation","Size of the random bytes array used for the bootstrap, …","Consensus static parameters (defined by protocol used) …","Compact representation of key values of consensus …","Threshold for fitness.","Number of endorsement","endorsement id size","TESTNET: time when the blockclique is ended.","Size of the event id hash used in execution module, safe …","<code>KeyPair</code> to sign genesis blocks.","Time in milliseconds when the blockclique started.","Length of the handshake random signature","Proof of stake seed for the initial draw","Max size of the IP list","Maximum size batch of data in a part of the ledger","Limit on the number of peers we advertise to others.","Max number of hash in the message <code>AskForBlocks</code>","Maximum of GAS allowed for asynchronous messages execution …","Maximum capacity of the asynchronous messages pool","Maximum block size in bytes","Max number of blocks we provide/ take into account while …","Max number of child nodes","max bootstrapped cliques","max bootstrapped dependencies","Max message size for bootstrap","Max number of cycles in PoS bootstrap","Max number of address and random entries for PoS bootstrap","max duplex buffer size","Max number of endorsements per message","Maximum of GAS allowed for a block","Maximum message length in bytes","Maximum number of operations per block","Max number of operations per message","node send channel size","operation id prefix size","operation id size","Maximum operation validity period count","cycle duration in periods","PoS lock cycles: when some rolls are released, we only …","PoS look back cycles: when drawing for cycle N, we use the …","number of cycle misses (strictly) above which stakers are …","Price of a roll in the network","slot as a key size","Time between the periods in the same thread.","Number of threads","node version","Reward amount for a block creation","","","Merge the settings","","","DEFAULT VALUES USED TO INITIALIZE DIVERS CONFIGURATIONS …","","DEFAULT VALUES USED TO INITIALIZE DIVERS CONFIGURATIONS …","Threshold for fitness.","","TESTNET: time when the blockclique is ended.","","","Returns the argument unchanged.","Time in milliseconds when the blockclique started.","Calls <code>U::from(self)</code>.","Max total size of a block","Maximum operation validity period count","cycle duration in periods","PoS lock cycles: when some rolls are released, we only …","PoS look back cycles: when drawing for cycle N, we use the …","Price of a roll on the network","","Time between the periods in the same thread.","Number of threads","","","","","","","address size","Safe to import, amount decimal factor","Maximum async messages in a batch of the bootstrap of the …","block id size","Block reward is given for each block creation","Size of the random bytes array used for the bootstrap, …","Consensus static parameters (defined by protocol used) …","Threshold for fitness.","Number of endorsement","endorsement id size","TESTNET: time when the blockclique is ended.","Size of the event id hash used in execution module, safe …","<code>KeyPair</code> to sign genesis blocks.","Time in milliseconds when the blockclique started.","Length of the handshake random signature","Proof of stake seed for the initial draw","Max size of the IP list","Maximum size batch of data in a part of the ledger","Limit on the number of peers we advertise to others.","Max number of hash in the message <code>AskForBlocks</code>","Maximum of GAS allowed for asynchronous messages execution …","Maximum capacity of the asynchronous messages pool","Maximum block size in bytes","Max number of blocks we provide/ take into account while …","Max number of child nodes","max bootstrapped cliques","max bootstrapped dependencies","Max message size for bootstrap","Max number of cycles in PoS bootstrap","Max number of address and random entries for PoS bootstrap","max duplex buffer size","Max number of endorsements per message","Maximum of GAS allowed for a block","Maximum message length in bytes","Maximum number of operations per block","Max number of operations per message","node send channel size","operation id prefix size","operation id size","Maximum operation validity period count","cycle duration in periods","PoS lock cycles: when some rolls are released, we only …","PoS look back cycles: when drawing for cycle N, we use the …","number of cycle misses (strictly) above which stakers are …","Price of a roll in the network","slot as a key size","Time between the periods in the same thread.","Number of threads","node version","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Size of the random bytes array used for the bootstrap, …","Safe to import","Maximum async messages in a batch of the bootstrap of the …","our default ip","blocks are pruned every <code>BLOCK_DB_PRUNE_INTERVAL</code> …","block id size","reward for a block","random bootstrap message size","channel size","normally in <code>config.toml</code>, allow execution worker to lag …","fitness threshold","normally in <code>config.toml</code>, if the node will create blocks","target endorsement count","endorsement id size","TESTNET: time when the blockclique is ended.","event id size","normally in <code>config.toml</code>, final history length","normally in <code>config.toml</code>, forcefully kept periods","normally in <code>config.toml</code>, if slot is after …","genesis keypair","Time in milliseconds when the blockclique started.","random handshake message size","initial seed","max bootstrap ips kept size","normally in <code>config.toml</code>, ledger cache capacity","ledger is saved on disk every <code>LEDGER_FLUSH_INTERVAL</code> …","Maximum size batch of data in a part of the ledger","normally in <code>config.toml</code>, if the ledger need a reset at …","max advertised id length","max ask for block per message","max asynchronous gas","max asynchronous pool length","max block size 3 * 1024 * 1024","max bootstrapped blocks","max bootstrapped children per block","max bootstrapped cliques","max bootstrapped dependencies","max bootstrap message size","max bootstrapped proof of take cycles","max bootstrapped proof of stake entries","normally in <code>config.toml</code>, max unknown dependencies kept","normally in <code>config.toml</code>, max discarded blocks kept","max duplex buffer size","max endorsements per message","normally in <code>config.toml</code>, max final events kept","normally in <code>config.toml</code>, max in the future kept blocks","max gas per block","normally in <code>config.toml</code>, max item count returned","max message size 3 * 1024 * 1024","max number of operation per block","max number of operation per message","normally in <code>config.toml</code>, max operation fill attempts","we wait <code>MAX_SEND_WAIT</code> milliseconds to send a message","node send channel size","normally in <code>config.toml</code>, operation batch size","operation id prefix size","operation id size","operation validity periods","periods per cycle","normally in <code>config.toml</code>, proof of stake cached cycle","proof of stake lock cycles","proof of stake look back cycle","Be careful: The <code>GENESIS_TIMESTAMP</code> shouldn’t be used as …","normally in <code>config.toml</code>, read only queue length","roll price","serialized slot size","stats are considered for <code>STATS_TIMESPAN</code> milliseconds","period length in milliseconds, sometimes overridden in …","thread count","node version","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","address par error","Ledger changes, Amount overflow","amount parse error","buffer error: {0}","checked operation error","Deserialization error: {0}","hashing error","invalid ledger change: {0}","invalid roll update: {0}","invalid version identifier: {0}","<code>MassaHash</code> error: {0}","massa_signature error: {0}","models error","models error","Wrong operation id size deduced on join","period overflow error","Serialization error: {0}","Serialization error: {0}","thread overflow error","Time error {0}","Time overflow error","Wrong prefix for hash: expected {0}, got {1}","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","An error occurred during execution.","The response to a request for a read-only execution.","The result of a successful execution. TODO: specify result.","The result of the read-only execution.","","","","","","","","","","","The slot at which the read-only execution occurred.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The output events generated by the read-only execution.","The result of the read-only execution.","","","","","","","","","","","","","","","","A balance change that can be applied to an address","Map an address to a <code>LedgerChange</code>","a consensus ledger entry","add reward related changes","applies a <code>LedgerChange</code>","apply a <code>LedgerChange</code> for an entry Can fail in overflow or …","the balance in coins","Amount to add or subtract","whether to increment or decrements balance of delta","","","","","","","Applies another ledger change on top of self","chain with another <code>LedgerChange</code>","","","","","","","clone subset","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","addresses that are impacted by these ledger changes","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","returns true if the balance is zero","true if the change is 0","new <code>LedgerData</code> from an initial balance","","","","merge another ledger changes into self, overwriting …","","","Example","","","","","","","","","","","","","","","","","<code>NodeId</code> wraps a public key to uniquely identify a node.","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Calls an exported function from a stored smart contract","Execute a smart contract.","the operation as sent in the network","Serializer for <code>Operation</code>","operation id","Set of operation ids","Deserializer for <code>OperationIds</code>","Serializer for <code>OperationIds</code>","Left part of the operation id hash stored in a vector of …","Deserializer for OperationPrefixId","Set of operation id’s prefix","Deserializer for <code>OperationPrefixIds</code>","Serializer for <code>OperationPrefixIds</code>","Serializer for <code>Operation</code>","Type specific operation content","Serializer for <code>OperationType</code>","Serializer for <code>OperationType</code>","Set of self containing signed operations.","Deserializer for <code>Operations</code>","Serializer for <code>Operations</code>","the sender buys <code>roll_count</code> rolls. Roll price is defined in …","the sender sells <code>roll_count</code> rolls. Roll price is defined …","transfer coins from sender to recipient","signed operation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","after <code>expire_period</code> slot the operation won’t be included …","the fee they have decided for this operation","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","get prefix of the operation id of size […","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","op id from <code>bs58</code> check","op id from bytes","","Get the amount of coins used by the operation to pay for …","Get the amount of gas used by the operation","get the addresses that are involved in this operation from …","get the addresses that are involved in this operation from …","get the range of periods during which an operation is valid","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","op id into bytes","convert the OperationId into a OperationPrefixId","","","Creates a new <code>OperationSerializer</code>","Creates a <code>OperationDeserializer</code>","Creates a new <code>OperationTypeSerializer</code>","Creates a new <code>OperationTypeDeserializer</code>","Creates a new <code>OperationIdsSerializer</code>","Creates a new <code>OperationIdsDeserializer</code>","Creates a new <code>OperationIdsDeserializer</code>","Creates a new <code>OperationIdsSerializer</code>","Creates a new <code>OperationsSerializer</code>","Creates a new <code>OperationsDeserializer</code>","","Creates a deserializer for OperationPrefixId","the type specific operation part","","","get a prefix from the OperationId by copying it","","","","","","","","","","op id to bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies the signature and integrity of the operation and …","","","","","","","","","","","","","","","","amount","Extra coins that are spent by consensus and are available …","Smart contract bytecode.","The price per unit of gas that the caller is willing to …","The price per unit of gas that the caller is willing to …","The maximum amount of gas that the execution of the …","The maximum amount of gas that the execution of the …","Extra coins that are spent from the caller’s parallel …","Parameter to pass to the target function","recipient address","roll count","roll count","Extra coins that are spent from the caller’s sequential …","Target smart contract address","Target function name. No function is called if empty.","Context of the event (not generated by the user)","By product of a byte code execution","block id if there was a block at that slot","","","","","most recent at the end","","","","","context generated by the execution context","json data string","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","index of the event in the slot","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","origin operation id","if the event was generated during a read only execution","","","when was it generated","","","","","","","","","","","","","<code>BuildHasherDefault</code> specialization for <code>PreHashedMap</code>","<code>HashMap</code> specialization for <code>PreHashed</code> keys This hashmap is …","A trait indicating that its carrier is already a hash with …","A <code>Hasher</code> for <code>PreHashed</code> keys that is faster because it …","<code>HashSet</code> specialization for <code>PreHashed</code> keys This hashset is …","","","","finish the hashing process and return the truncated <code>u64</code> …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","write the bytes of a <code>PreHashed</code> key into the <code>PreHashedMap</code> …","","","","just a <code>u64</code> to keep track of the roll sells and buys during …","counts the roll for each address","roll sales and purchases","Deserializer for <code>RollUpdate</code>","Serializer for <code>RollUpdate</code>","maps addresses to roll updates","applies a <code>RollUpdate</code>, compensates and returns compensation","applies <code>RollUpdates</code> to self with compensations","","","","","","","","","","","","","chains with another <code>RollUpdates</code>, compensates and returns …","","","","","","","","","get the roll update for a subset of addresses","get roll counts for a subset of addresses.","compensate a roll update, return compensation count","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","the addresses impacted by the updates","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the <code>RollCounts</code> contains no elements.","true if the update has no effect","Returns the number of elements in the <code>RollCounts</code>.","Creates a new <code>RollUpdateSerializer</code>","Creates a new <code>RollUpdateDeserializer</code>","Makes a new, empty <code>RollCounts</code>.","roll purchases","roll sales","","","","","","merge another roll updates into self, overwriting existing …","merge another roll counts into self, overwriting existing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","a point in time where a block is expected","Basic <code>Slot</code> Deserializer","Basic serializer for <code>Slot</code>","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserializes from a compact representation","Deserializes a slot from its fixed-size sortable binary …","","cycle associated to that slot","first bit of the slot, for seed purpose","Returns the next Slot","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","returns the maximal slot","returns the minimal slot","","Creates a <code>SlotSerializer</code>","Creates a <code>SlotDeserializer</code>","new slot from period and thread","","period","","","Counts the number of slots since the one passed in …","thread","Returns a compact binary representation of the slot","Returns a fixed-size sortable binary key","","","","","","","","","","","","","","","stats produced by consensus module","stats produced by network module","stats produced by pool module","active node count","banned node count","","","","","","","number of actives cliques","","","","","","end of the time span for stats","number of endorsement in the pool","number of final blocks","number of final operations","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","in connections count","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","total known peers count","number of operations in the pool","out connections count","","","","total number of stakers","number of stale blocks in memory","start of the time span for stats","","","","","","","","","","","","","","","","","Gets timestamp in milliseconds for given slot.","Returns the thread and block slot index of the current …","Returns the thread and block period index of the latest …","Counts the number of slots in a slot range [a, b)","Turns an <code>MassaTime</code> range [start, end) with optional …","Used by signed structure","Wrapped structure T where U is the associated id","Trait that define a structure that can be wrapped.","Deserializer for Wrapped structure","Serializer for <code>Wrapped</code> structure","returns the set of addresses mapped the the endorsements …","","","","","","","size in bytes of the whole block","","","true if given operation is included in the block may fail …","content","the content creator address","the content creator public key","","Deserialize the wrapped structure","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the amount of coins used by the operation to pay for …","Get the amount of gas used by the operation","get the addresses that are involved in this operation from …","get the addresses that are involved in this operation from …","Retrieve roll involving addresses","get the range of periods during which an operation is valid","Get the hash","Id","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","retrieves a mapping of addresses to the list of operation …","new id from hash","Creates a new WrappedDeserializer","Creates a new <code>WrappedSerializer</code>","Creates a wrapped version of the object","Serialize the wrapped structure","","","Content serialized","signature","Thread of the operation creator","","","","","","","","","","","","Verifies the signature and integrity of the operation and …","check if self has been signed by public key","","",""],"i":[10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,161,92,19,20,21,22,23,32,24,33,50,36,25,26,10,11,12,3,13,27,28,14,15,19,20,21,22,23,32,24,33,50,36,25,26,10,11,12,3,13,27,28,14,15,1,0,10,11,12,3,13,14,15,10,11,12,3,13,14,15,10,3,0,14,0,1,19,20,21,22,23,24,25,26,27,28,14,92,20,22,32,33,36,26,10,11,11,12,3,13,28,14,15,92,13,14,12,10,3,15,0,0,10,10,11,11,12,12,3,3,13,13,14,15,15,19,20,21,22,23,32,24,33,50,36,25,26,10,11,12,3,13,27,28,14,15,161,10,3,10,3,162,10,3,15,163,163,92,10,1,0,10,10,3,3,11,13,0,19,20,21,22,23,32,24,33,50,36,25,26,10,11,12,3,13,27,28,14,15,10,3,1,15,0,14,14,92,14,14,14,14,14,14,14,14,14,14,14,14,10,3,15,19,20,21,22,23,32,24,33,50,36,25,26,10,3,27,28,11,0,0,12,92,11,0,12,10,3,92,92,92,0,92,0,19,21,23,24,50,25,10,11,11,12,3,13,27,14,15,0,12,13,0,92,92,14,0,164,10,3,165,10,11,12,3,13,14,15,10,11,12,3,13,15,166,19,20,21,22,23,32,24,33,50,36,25,26,10,11,12,3,13,27,28,14,15,19,20,21,22,23,32,24,33,50,36,25,26,10,11,12,3,13,27,28,14,15,19,20,21,22,23,32,24,33,50,36,25,26,10,11,12,3,13,27,28,14,15,0,19,20,21,22,23,32,24,33,50,36,25,26,10,11,12,3,13,27,28,14,15,0,0,0,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,2,0,0,0,0,2,61,59,60,2,61,59,60,2,59,60,2,59,60,2,59,61,2,61,59,60,2,2,2,59,60,2,61,59,60,2,2,2,2,2,2,2,61,59,60,2,59,60,2,61,59,59,2,60,60,2,59,60,2,2,2,59,60,2,2,61,59,60,2,61,59,60,2,61,59,60,2,61,59,60,0,0,0,65,66,64,65,66,64,64,64,64,64,64,64,64,65,64,66,64,64,64,64,65,66,64,64,64,64,65,66,64,64,64,65,66,64,64,64,64,65,64,64,64,64,64,65,66,64,65,66,64,65,66,64,65,66,64,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,72,76,77,71,74,77,83,76,76,78,79,80,67,68,76,81,77,69,82,83,84,70,71,72,73,74,75,78,79,80,67,68,76,81,77,69,82,83,84,70,71,72,73,74,75,74,75,77,76,67,68,67,68,69,70,71,72,73,74,75,67,68,69,70,71,72,73,74,75,76,79,79,79,82,84,78,79,79,73,78,79,80,67,68,76,81,69,82,83,84,70,71,72,73,74,75,73,70,73,69,76,81,80,77,76,67,68,72,78,79,79,80,80,67,67,68,68,76,76,81,81,77,77,69,69,82,82,83,84,84,70,71,72,73,74,75,78,79,80,67,68,76,81,77,69,82,83,84,70,71,72,73,74,75,81,80,69,82,84,80,69,80,69,81,78,79,80,67,68,76,81,77,69,82,83,84,70,71,72,73,74,75,76,76,80,69,83,84,83,84,83,84,71,79,76,67,74,75,81,79,79,79,79,80,73,73,75,84,79,76,76,77,78,79,80,67,68,76,81,77,69,82,83,84,70,71,72,73,74,75,78,78,74,75,81,84,70,73,75,75,76,77,67,68,69,70,71,72,73,74,75,79,80,67,68,76,81,77,69,82,84,78,79,80,67,68,76,81,77,69,82,83,84,70,71,72,73,74,75,78,79,80,67,68,76,81,77,69,82,83,84,70,71,72,73,74,75,78,79,80,67,68,76,81,77,69,82,83,84,70,71,72,73,74,75,79,78,79,80,67,68,76,81,77,69,82,83,84,70,71,72,73,74,75,0,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,86,86,87,87,86,0,0,0,87,0,0,86,86,86,87,88,89,90,86,87,88,89,90,86,87,88,89,86,87,88,89,89,86,87,88,89,90,88,86,87,88,89,90,90,86,87,88,89,90,88,88,86,87,88,89,90,89,89,88,90,86,87,88,89,90,90,88,86,87,88,89,90,86,87,88,89,90,86,87,88,89,90,86,87,88,89,90,86,87,88,89,90,167,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,92,92,0,92,92,0,92,0,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,95,96,97,99,93,95,96,97,99,93,95,96,97,99,93,95,96,97,99,93,95,96,97,99,93,95,96,97,99,93,95,96,97,99,93,95,96,97,99,93,95,96,97,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,101,102,103,104,105,106,107,108,100,101,102,103,104,105,106,107,108,100,101,102,103,104,105,106,107,108,100,101,102,103,104,105,106,107,108,100,101,102,103,104,105,106,107,108,100,101,102,103,104,105,106,107,108,100,101,102,103,104,105,106,107,108,100,101,102,103,104,105,106,107,108,100,101,102,103,104,105,106,107,108,6,6,6,6,6,6,6,6,6,6,6,6,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,168,169,170,171,172,173,174,175,176,177,178,179,180,180,115,0,115,0,115,116,115,116,115,116,115,116,115,116,116,115,116,116,115,116,115,116,116,116,115,116,115,116,116,115,116,115,116,115,116,115,116,181,117,0,0,0,117,117,120,120,119,119,120,119,117,120,119,117,119,117,120,119,117,120,119,117,117,120,119,117,120,119,117,120,119,117,120,119,117,120,119,117,117,120,119,117,120,119,120,120,119,117,117,120,119,117,120,119,117,120,119,117,120,119,117,120,119,117,120,119,117,121,0,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,124,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,124,124,0,125,126,127,128,129,130,131,132,133,134,47,122,123,124,135,125,126,127,128,129,130,131,132,133,134,47,122,123,124,135,47,122,123,124,47,122,123,124,47,122,125,126,127,128,129,130,131,132,133,134,135,126,128,130,131,134,47,122,123,124,135,47,122,123,123,47,47,122,122,123,123,124,124,125,126,127,128,129,130,131,132,133,134,47,122,122,123,124,135,47,47,47,17,17,17,17,17,47,47,122,125,126,127,128,129,130,131,132,133,134,47,122,123,124,135,47,47,47,122,125,126,127,128,129,130,131,132,133,134,47,135,123,47,122,47,125,127,129,132,133,47,122,123,124,47,47,122,123,124,47,122,123,124,125,126,127,128,129,130,131,132,133,134,47,122,123,124,135,125,126,127,128,129,130,131,132,133,134,47,122,123,124,135,125,126,127,128,129,130,131,132,133,134,47,122,123,124,135,17,125,126,127,128,129,130,131,132,133,134,47,122,123,124,135,182,183,183,183,184,183,184,184,184,182,185,186,184,184,184,0,0,141,140,141,140,141,141,140,141,140,141,140,140,140,141,140,140,141,141,140,141,141,140,141,141,141,140,141,141,140,141,140,141,140,141,140,141,140,141,140,141,0,0,0,0,0,143,143,143,143,143,143,143,143,143,143,143,146,144,147,0,0,0,0,0,0,144,147,148,149,146,145,144,147,148,149,146,145,144,147,144,146,145,144,147,146,145,144,147,144,147,145,148,149,144,147,149,146,145,144,147,146,145,144,147,148,149,146,145,144,147,144,148,149,146,145,144,147,147,145,147,148,149,147,145,145,148,146,145,144,147,144,147,146,145,144,147,148,149,146,145,144,147,148,149,146,145,144,147,148,149,146,145,144,147,148,149,146,145,144,147,0,0,0,151,152,150,151,152,150,150,150,150,151,152,150,150,150,150,151,152,150,150,150,150,150,150,150,150,151,152,150,150,150,150,151,152,150,150,150,151,150,150,150,150,150,150,150,151,152,150,151,152,150,151,152,150,151,152,150,0,0,0,154,154,154,153,155,154,153,155,153,153,153,154,153,155,153,155,153,153,154,154,153,153,155,155,154,153,155,154,154,153,155,154,155,154,154,153,155,153,153,153,153,154,153,155,154,153,155,154,153,155,154,153,155,154,153,155,0,0,0,0,0,0,0,0,0,0,41,159,41,158,159,41,158,41,41,41,41,41,41,41,158,187,159,41,41,41,159,41,158,41,41,41,41,41,41,40,41,159,41,158,41,40,159,158,187,187,41,158,41,41,41,41,41,159,41,158,159,41,158,159,41,158,41,41,159,41,158],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[7,[[5,[2,[4,[3]]]],6]]]],0,0,[[],[[7,[6]]]],[[],8],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,9],0,[10,10],[11,11],[12,12],[3,3],[13,13],[14,14],[15,15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[10,10],16],[[3,3],16],0,[[],14],0,[[1,17],[[7,[18,6]]]],[[],19],[[],20],[[],21],[[],22],[[],23],[[],24],[[],25],[[],26],[[],27],[[],28],[[],14],0,[20,[[31,[11,[0,[29,30]]]]]],[22,[[31,[12,[0,[29,30]]]]]],[32,[[31,[13,[0,[29,30]]]]]],[33,[[31,[[35,[34]],[0,[29,30]]]]]],[36,[[31,[37,[0,[29,30]]]]]],[26,[[31,[15,[0,[29,30]]]]]],[[],[[7,[10]]]],[[],[[7,[11]]]],[[38,39],[[31,[[41,[11,40]],[0,[29,30]]]]]],[[],[[7,[12]]]],[[],[[7,[3]]]],[[],[[7,[13]]]],[28,[[31,[42,[0,[29,30]]]]]],[[],[[7,[14]]]],[[],[[7,[15]]]],0,0,0,0,[[10,10],18],[[3,3],18],[[15,15],18],0,0,[[10,43],44],[[10,43],44],[[11,43],44],[[11,43],44],[[12,43],44],[[12,43],44],[[3,43],44],[[3,43],44],[[13,43],44],[[13,43],44],[[14,43],44],[[15,43],44],[[15,43],44],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[7,[6]]]],[45,[[7,[10,6]]]],[45,[[7,[3,6]]]],[[],10],[[],3],[[],[[7,[6]]]],[45,[[7,[10]]]],[45,[[7,[3]]]],[45,[[7,[15]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],0,[10,18],[1,[[7,[[4,[2]],6]]]],[[],14],[10],[10,46],[3],[3,46],0,0,[14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[10],[3],[[1,5],[[7,[[5,[2,[4,[47]]]],6]]]],[[15,15],18],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[10,10],18],[[3,3],18],[[15,15],18],[[],19],[[],20],[[],21],[[],22],[[],23],[48,32],[[],24],[[[49,[9]],[49,[9]]],33],[[],50],[[],36],[[],25],[[],26],[46,10],[46,3],[[],27],[[],28],[[11,[51,[11]],52],[[7,[[41,[11,40]],6]]]],0,0,0,0,0,0,0,[[10,10],[[53,[16]]]],[[3,3],[[53,[16]]]],0,0,0,0,0,0,[[19,11,35],[[7,[54]]]],[[21,12,35],[[7,[54]]]],[[23,13,35],[[7,[54]]]],[[24,35,35],[[7,[54]]]],[[50,37,35],[[7,[54]]]],[[25,15,35],[[7,[54]]]],[10,7],[11,7],[[55,56,35],[[7,[54]]]],[12,7],[3,7],[13,7],[[27,42,35],[[7,[54]]]],[14,7],[15,7],0,0,0,0,0,0,0,0,[[],[[7,[[35,[34]],6]]]],[10],[3],[[],[[7,[[35,[34]],6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],[[35,[34]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],[[7,[34,6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],0,[58,58],[[]],0,0,0,[[],[[7,[58]]]],0,[58,9],[[58,43],44],[[]],[[]],0,0,0,0,0,[58,7],0,[[]],[[],7],[[],7],[[],57],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,2],[59,59],[60,60],[[]],[[]],[[]],[[2,2],16],0,[[],61],[62,[[7,[2]]]],[61,[[31,[2,[0,[29,30]]]]]],[[],[[7,[59]]]],[[],[[7,[60]]]],[[2,2],18],[[2,43],44],[[2,43],44],[[59,43],44],[[60,43],44],[[]],[[]],[[]],[[]],[45,[[7,[2,6]]]],[[],2],[56,2],[45,[[7,[2]]]],[[2,34],34],[2],[[]],[[]],[[]],[[]],[2],0,0,[[2,2],18],[[],61],0,0,[[2,2],[[53,[16]]]],0,0,[[2,63],7],[59,7],[60,7],[2,37],[2],[[]],[[]],[[]],[[],37],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],57],[[],57],[[],57],[[],57],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[64,64],[[53,[64]]]],[[64,9],[[53,[64]]]],[[64,9],[[53,[64]]]],[[64,64],[[53,[64]]]],[64,64],[[]],[[64,64],16],[[],65],[[],64],[66,[[31,[64,[0,[29,30]]]]]],[[],[[7,[64]]]],[[64,64],18],[[64,43],44],[[64,43],44],[[]],[[]],[[]],[[],[[7,[6]]]],[9,64],[45,[[7,[64]]]],[[]],[[]],[[]],[64,18],[[64,64],18],[[],65],[[[49,[9]],[49,[9]]],66],[[64,64],[[53,[16]]]],[[64,64],64],[[64,9],64],[[64,64],64],[[65,64,35],[[7,[54]]]],[64,7],[64,[[7,[[35,[34]],6]]]],[[]],[64,9],[[],37],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],57],[[],57],[[],57],[[]],[[]],[[]],[[],64],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[67,67],[68,68],[69,69],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[76,77],0,0,0,0,0,0,0,0,[[],73],[[],[[7,[78]]]],[[],[[7,[79]]]],[[],[[7,[80]]]],[[],[[7,[67]]]],[[],[[7,[68]]]],[[],[[7,[76]]]],[[],[[7,[81]]]],[[],[[7,[69]]]],[[],[[7,[82]]]],[[],[[7,[83]]]],[[],[[7,[84]]]],[[],[[7,[70]]]],[[],[[7,[71]]]],[[],[[7,[72]]]],[[],[[7,[73]]]],[[],[[7,[74]]]],[[],[[7,[75]]]],0,0,0,0,0,[[81,81],18],[[80,80]],0,0,0,0,0,[[78,43],44],[[79,43],44],[[79,43],44],[[80,43],44],[[80,43],44],[[67,43],44],[[67,43],44],[[68,43],44],[[68,43],44],[[76,43],44],[[76,43],44],[[81,43],44],[[81,43],44],[[77,43],44],[[77,43],44],[[69,43],44],[[69,43],44],[[82,43],44],[[82,43],44],[[83,43],44],[[84,43],44],[[84,43],44],[[70,43],44],[[71,43],44],[[72,43],44],[[73,43],44],[[74,43],44],[[75,43],44],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[81],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[81,81],18],0,0,0,0,0,0,0,0,0,0,0,0,0,[78,7],[79,7],[80,7],[67,7],[68,7],[76,7],[81,7],[77,7],[69,7],[82,7],[83,7],[84,7],[70,7],[71,7],[72,7],[73,7],[74,7],[75,7],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[85,85],[[]],[[],[[7,[85]]]],0,[[85,43],44],[[]],[[],[[7,[6]]]],[[]],0,[85,7],[85,[[7,[[35,[34]],6]]]],[[]],[[],7],[[],7],[[],57],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[86,86],[87,87],[88,88],[89,89],[[]],[[]],[[]],[[]],0,[[],[[7,[86]]]],[[],[[7,[87]]]],[[],[[7,[88]]]],[[],[[7,[89]]]],[[],[[7,[90]]]],[[88,88]],[[86,43],44],[[87,43],44],[[88,43],44],[[89,43],44],[[90,43],44],[[90,43],44],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,[86,7],[87,7],[88,7],[89,7],[90,7],0,0,[[]],[[]],[[]],[[]],[[],37],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],57],[[],57],[[],57],[[],57],[[],57],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[45,45],91],[92,92],[[]],0,[[],92],0,0,[[],[[7,[92]]]],0,[[92,43],44],[[92,43],44],[[]],0,[[]],0,0,0,0,0,0,[92,7],0,0,[[]],[[],37],[[],7],[[],7],[[],57],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[93,94],[95,53],[96,52],[97,98],[99,15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],57],[[],57],[[],57],[[],57],[[],57],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[100,52],[101,94],[102,53],[103,98],[104,15],[105,94],[106,53],[107,94],[108,94],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[6,6],[[]],[[6,43],44],[[6,43],44],[109,6],[110,6],[[[112,[111]]],6],[113,6],[[]],[54,6],[[]],[6,[[53,[114]]]],[[]],[[],37],[[],7],[[],7],[[],57],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[115,115],[116,116],[[]],[[]],[[],[[7,[115]]]],[[],[[7,[116]]]],0,[[115,43],44],[[116,43],44],[[116,43],44],[[]],[[]],[[]],[[]],0,0,[115,7],[116,7],[[]],[[]],[[],37],[[],7],[[],7],[[],7],[[],7],[[],57],[[],57],[[]],[[]],0,0,0,0,0,[[117,2,[35,[2]],2,64,48],118],[[117,2,119],118],[[120,119],118],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[119,119],[[118,[6]]]],[[117,117],118],[120,120],[119,119],[117,117],[[]],[[]],[[]],[[117,4],117],[[],120],[[],119],[[],117],[[],[[7,[120]]]],[[],[[7,[119]]]],[[],[[7,[117]]]],[[120,43],44],[[119,43],44],[[117,43],44],[[]],[[]],[[]],[[],118],[[],[[118,[6]]]],[[],[[118,[6]]]],[117,[[4,[2]]]],[[]],[[]],[[]],[120,18],[119,18],[64,120],[120,7],[119,7],[117,7],[[117,4,117]],[120,[[118,[[35,[34]]]]]],[119,[[118,[[35,[34]],6]]]],[117,[[118,[[35,[34]],6]]]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],57],[[],57],[[],57],[[]],[[]],[[]],0,0,[[]],[[]],[121,121],[[]],[[121,121],16],[[],[[7,[121]]]],[[121,121],18],[[121,43],44],[[121,43],44],[[]],[45,[[7,[121]]]],[121],[[]],[[121,121],18],[[121,121],[[53,[16]]]],[121,7],[[]],[[],37],[[],7],[[],7],[[],57],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[47,47],[122,122],[123,123],[124,124],[[]],[[]],[[]],[[]],[[47,47],16],[[122,122],16],[[],125],[[],126],[[],127],[[],128],[[],129],[[],130],[[],131],[[],132],[[],133],[[],134],[[],135],[126,[[31,[123,[0,[29,30]]]]]],[128,[[31,[124,[0,[29,30]]]]]],[130,[[31,[136,[0,[29,30]]]]]],[131,[[31,[137,[0,[29,30]]]]]],[134,[[31,[138,[0,[29,30]]]]]],[[],[[7,[47]]]],[[],[[7,[122]]]],[[],[[7,[123]]]],[[],[[7,[124]]]],[135,[[31,[122,[0,[29,30]]]]]],[[47,47],18],[[122,122],18],0,0,[[47,43],44],[[47,43],44],[[122,43],44],[[122,43],44],[[123,43],44],[[123,43],44],[[124,43],44],[[124,43],44],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],122],[[]],[[]],[[]],[[]],[45,[[7,[47,6]]]],[[],47],[45,[[7,[47]]]],[17,64],[17,9],[17,[[4,[2]]]],[17,[[7,[[4,[2]],6]]]],[[17,9],[[139,[9]]]],[47,46],[47],[122],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[47],[47,122],[[47,47],18],[[122,122],18],[[],125],[[],126],[[],127],[[],128],[[],129],[[],130],[[],131],[[],132],[[],133],[[],134],[46,47],[[],135],0,[[47,47],[[53,[16]]]],[[122,122],[[53,[16]]]],[47,122],[[125,123,35],[[7,[54]]]],[[127,124,35],[[7,[54]]]],[[129,136,35],[[7,[54]]]],[[132,137,35],[[7,[54]]]],[[133,138,35],[[7,[54]]]],[47,7],[122,7],[123,7],[124,7],[47],[[]],[[]],[[]],[[]],[[],37],[[],37],[[],37],[[],37],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[17,[[7,[47,6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,[140,140],[141,141],[[]],[[]],0,0,[[],[[7,[140]]]],[[],[[7,[141]]]],[[140,43],44],[[140,43],44],[[141,43],44],[[141,43],44],[[]],[[]],0,[[]],[[]],0,0,[140,7],[141,7],0,[[]],[[]],[[],37],[[],37],[[],7],[[],7],[[],7],[[],7],[[],57],[[],57],[[]],[[]],0,0,0,0,0,[[]],[[]],[[],[[143,[142]]]],[[[143,[142]]],9],[[]],[[]],[[],7],[[],7],[[],57],[[]],[[[143,[142]]]],0,0,0,0,0,0,0,0,0,[[144,2,145],[[118,[146]]]],[[147,144],118],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[144,144],[[118,[[5,[2,146]]]]]],[146,146],[145,145],[144,144],[147,147],[[]],[[]],[[]],[[]],[[144,4],144],[[147,4],147],[145,146],[[],148],[[],149],[[],144],[[],147],[149,[[31,[145,[0,[29,30]]]]]],[[],[[7,[146]]]],[[],[[7,[145]]]],[[],[[7,[144]]]],[[],[[7,[147]]]],[[146,43],44],[[145,43],44],[[144,43],44],[[147,43],44],[[]],[[]],[[]],[[]],[[]],[[]],[144,[[4,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[147,18],[145,18],[147,8],[[],148],[[],149],[[],147],0,0,[[148,145,35],[[118,[54]]]],[146,7],[145,7],[144,7],[147,7],[[144,4,144]],[[147,4,147]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[150,150],[[]],[[150,150],16],[[],151],[152,[[31,[150,[0,[29,30]]]]]],[[],[[7,[150]]]],[[150,150],18],[[150,43],44],[[150,43],44],[[]],[[]],[[]],[[],[[7,[6]]]],[[],150],[45,[[7,[150]]]],[[150,9],9],[150,18],[[150,34],[[7,[150,6]]]],[150],[[]],[[]],[[]],[[],150],[[],150],[[150,150],18],[[],151],[[],152],[[9,34],150],[[150,150],[[53,[16]]]],0,[[151,150,35],[[7,[54]]]],[150,7],[[150,150,34],[[7,[9,6]]]],0,[150,[[7,[[35,[34]],6]]]],[150],[[]],[[],37],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],57],[[],57],[[],57],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[153,153],[[]],[[],[[7,[154]]]],[[],[[7,[153]]]],[[],[[7,[155]]]],0,0,0,0,[[154,43],44],[[154,43],44],[[153,43],44],[[153,43],44],[[155,43],44],[[155,43],44],[[]],[[]],[[]],0,[[]],[[]],[[]],0,0,0,[154,7],[153,7],[155,7],0,0,0,[[]],[[],37],[[],37],[[],37],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],57],[[],57],[[],57],[[]],[[]],[[]],[[34,94,94,150],[[7,[94,6]]]],[[34,94,94,156],[[7,[[53,[150]],6]]]],[[34,94,94,94],[[7,[[53,[150]],6]]]],[[150,150,34],[[7,[9,6]]]],[[34,94,94,[53,[94]],[53,[94]]],[[7,[6]]]],0,0,0,0,0,[[[41,[11,10]]],[[7,[[5,[2,[4,[3]]]],6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[41,[11,10]]],9],[[[41,[157,157]]],[[41,[157,157]]]],[[]],[[[41,[11,10]],17],[[7,[18,6]]]],0,0,0,[[],158],[[38,39],[[31,[[41,[40]],[0,[29,30]]]]]],[159,[[31,[41,[0,[29,30]]]]]],[[],[[7,[41]]]],[[[41,[160,160]],43],44],[[41,43],44],[[]],[[]],[[]],[[[41,[123,47]]],64],[[[41,[123,47]]],9],[[[41,[123,47]]],[[4,[2]]]],[[[41,[123,47]]],[[7,[[4,[2]],6]]]],[[[41,[11,10]]],[[7,[[4,[2]],6]]]],[[[41,[123,47]],9],[[139,[9]]]],[[],46],0,[[]],[[]],[[]],[[[41,[11,10]],5],[[7,[[5,[2,[4,[47]]]],6]]]],[46],[[],159],[[],158],[[51,52],[[7,[[41,[40]],6]]]],[[55,56,35],[[7,[54]]]],[41,7],[[158,41,35],[[7,[54]]]],0,0,0,[[]],[[],37],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],57],[[],57],[[],57],[[[41,[123,47]]],[[7,[47,6]]]],[[41,51,56],[[7,[6]]]],[[]],[[]],[[]]],"p":[[6,"WrappedBlock"],[3,"Address"],[3,"EndorsementId"],[6,"Set"],[6,"Map"],[4,"ModelsError"],[4,"Result"],[15,"usize"],[15,"u64"],[3,"BlockId"],[3,"Block"],[3,"BlockHeader"],[3,"Endorsement"],[3,"SerializationContext"],[3,"Version"],[4,"Ordering"],[6,"WrappedOperation"],[15,"bool"],[3,"BlockSerializer"],[3,"BlockDeserializer"],[3,"BlockHeaderSerializer"],[3,"BlockHeaderDeserializer"],[3,"EndorsementSerializer"],[3,"VecU8Serializer"],[3,"VersionSerializer"],[3,"VersionDeserializer"],[3,"IpAddrSerializer"],[3,"IpAddrDeserializer"],[8,"ParseError"],[8,"ContextError"],[6,"IResult"],[3,"EndorsementDeserializer"],[3,"VecU8Deserializer"],[15,"u8"],[3,"Vec"],[3,"StringDeserializer"],[3,"String"],[3,"SignatureDeserializer"],[3,"PublicKeyDeserializer"],[8,"Id"],[3,"Wrapped"],[4,"IpAddr"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"Hash"],[3,"OperationId"],[15,"u32"],[4,"Bound"],[3,"StringSerializer"],[8,"Serializer"],[3,"KeyPair"],[4,"Option"],[4,"SerializeError"],[3,"Signature"],[3,"PublicKey"],[3,"TypeId"],[3,"ActiveBlock"],[3,"AddressCycleProductionStats"],[3,"AddressState"],[3,"AddressDeserializer"],[8,"Deserializer"],[8,"Serializer"],[3,"Amount"],[3,"AmountSerializer"],[3,"AmountDeserializer"],[3,"LedgerInfo"],[3,"RollsInfo"],[3,"EndorsementInfo"],[3,"TimeInterval"],[3,"DatastoreEntryInput"],[3,"DatastoreEntryOutput"],[3,"EventFilter"],[3,"ReadOnlyBytecodeExecution"],[3,"ReadOnlyCall"],[3,"AddressInfo"],[3,"CompactAddressInfo"],[3,"OperationInput"],[3,"NodeStatus"],[3,"OperationInfo"],[3,"IndexedSlot"],[3,"BlockInfo"],[3,"BlockInfoContent"],[3,"BlockSummary"],[3,"Clique"],[4,"OperationSearchResultBlockStatus"],[4,"OperationSearchResultStatus"],[3,"OperationSearchResult"],[3,"StakersCycleProductionStats"],[3,"PubkeySig"],[8,"Deserialize"],[3,"CompactConfig"],[3,"GENESIS_TIMESTAMP"],[3,"MassaTime"],[3,"END_TIMESTAMP"],[3,"GENESIS_KEY"],[3,"POS_MISS_RATE_DEACTIVATION_THRESHOLD"],[3,"Ratio"],[3,"VERSION"],[3,"GENESIS_KEY"],[3,"GENESIS_TIMESTAMP"],[3,"END_TIMESTAMP"],[3,"POS_MISS_RATE_DEACTIVATION_THRESHOLD"],[3,"VERSION"],[3,"BLOCK_DB_PRUNE_INTERVAL"],[3,"LEDGER_FLUSH_INTERVAL"],[3,"MAX_SEND_WAIT"],[3,"STATS_TIMESPAN"],[4,"MassaSignatureError"],[4,"TimeError"],[3,"Error"],[4,"Err"],[4,"MassaHashError"],[8,"Error"],[4,"ReadOnlyResult"],[3,"ExecuteReadOnlyResponse"],[3,"LedgerChanges"],[6,"ModelsResult"],[3,"LedgerChange"],[3,"LedgerData"],[3,"NodeId"],[3,"OperationPrefixId"],[3,"Operation"],[4,"OperationType"],[3,"OperationSerializer"],[3,"OperationDeserializer"],[3,"OperationTypeSerializer"],[3,"OperationTypeDeserializer"],[3,"OperationIdsSerializer"],[3,"OperationIdsDeserializer"],[3,"OperationPrefixIdsDeserializer"],[3,"OperationPrefixIdsSerializer"],[3,"OperationsSerializer"],[3,"OperationsDeserializer"],[3,"OperationPrefixIdDeserializer"],[6,"OperationIds"],[6,"OperationPrefixIds"],[6,"Operations"],[3,"RangeInclusive"],[3,"SCOutputEvent"],[3,"EventExecutionContext"],[8,"PreHashed"],[3,"PreHashedMap"],[3,"RollUpdates"],[3,"RollUpdate"],[3,"RollCompensation"],[3,"RollCounts"],[3,"RollUpdateSerializer"],[3,"RollUpdateDeserializer"],[3,"Slot"],[3,"SlotSerializer"],[3,"SlotDeserializer"],[3,"ConsensusStats"],[3,"NetworkStats"],[3,"PoolStats"],[15,"i64"],[8,"Clone"],[3,"WrappedSerializer"],[3,"WrappedDeserializer"],[8,"Debug"],[8,"DeserializeMinBEInt"],[8,"DeserializeCompact"],[8,"DeserializeVarInt"],[8,"SerializeMinBEInt"],[8,"SerializeCompact"],[8,"SerializeVarInt"],[13,"InBlock"],[13,"SerializeError"],[13,"SerializationError"],[13,"DeserializeError"],[13,"BufferError"],[13,"MassaHashError"],[13,"MassaSignatureError"],[13,"AmountParseError"],[13,"CheckedOperationError"],[13,"InvalidVersionError"],[13,"InvalidLedgerChange"],[13,"TimeError"],[13,"InvalidRollUpdate"],[13,"WrongPrefix"],[13,"Error"],[13,"Transaction"],[13,"ExecuteSC"],[13,"CallSC"],[13,"RollBuy"],[13,"RollSell"],[8,"WrappedContent"]]},\
"massa_network_exports":{"doc":"Manages a connection with a node","t":[12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,3,3,13,13,13,13,4,3,3,13,6,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,6,13,13,13,13,13,13,13,4,3,4,4,4,3,4,3,2,13,13,13,4,3,4,13,13,13,13,3,13,3,13,13,4,13,3,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,13,12,12,12,12,12,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,12,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12],"n":["0","0","0","0","0","1","ActiveConnectionMissing","AskForBlocks","AskForBlocks","AskForOperations","AskForOperations","AskedForBlocks","AskedPeerList","Banned","BannedPeerTryingToConnect","BlockNotFound","BlockNotFound","BlockNotFound","BlockNotFound","Bootstrap","BootstrapPeers","BootstrapPeersDeserializer","BootstrapPeersSerializer","ChannelError","Close","CloseConnectionWithNoConnectionToClose","ConnectionClosed","ConnectionClosureReason","ConnectionCount","ConnectionId","ContainerInconsistencyError","Establisher","Failed","GeneralProtocolError","GetBootstrapPeers","GetPeers","GetStats","HandshakeError","HandshakeErrorType","HandshakeIdAlreadyExist","HandshakeInterruption","HandshakeInvalidSignature","HandshakeKey","HandshakeTimeout","HandshakeWrongMessage","IOError","IncompatibleVersion","InvalidIpError","Listener","MassaHashError","MassaSignatureError","MaxPeersConnectionReached","MissingBlock","MissingOperation","MissingPeersError","ModelsError","NetworkCommand","NetworkCommandSender","NetworkConnectionErrorType","NetworkError","NetworkEvent","NetworkEventReceiver","NetworkManagementCommand","NetworkManager","NetworkSettings","NewConnection","NodeBanByIds","NodeBanByIps","NodeCommand","NodeEvent","NodeEventType","NodeSignMessage","NodeUnbanByIds","NodeUnbanByIps","Normal","Peer","PeerConnectionError","PeerInfo","PeerInfoNotFoundError","PeerListReceived","PeerType","PeerTypeNotFoundError","Peers","ReadHalf","ReceiveAskForOperations","ReceivedAskForBlocks","ReceivedAskForOperations","ReceivedBlock","ReceivedBlock","ReceivedBlockHeader","ReceivedBlockHeader","ReceivedEndorsements","ReceivedEndorsements","ReceivedOperationAnnouncements","ReceivedOperationAnnouncements","ReceivedOperations","ReceivedOperations","ReceivedPeerList","RemoveFromWhitelist","SelfConnection","SendBlock","SendBlock","SendBlockHeader","SendBlockHeader","SendEndorsements","SendEndorsements","SendOperationAnnouncements","SendOperationAnnouncements","SendOperations","SendOperations","SendPeerList","SerdeError","SerializeError","Standard","TimeError","TokioRecvError","TokioTaskJoinError","TooManyConnectionAttempts","TooManyConnectionFailure","UnexpectedError","UnexpectedNodeCommandChannelClosure","UnexpectedWriterClosure","WhiteListed","Whitelist","WriteHalf","WrongSignature","active_in_connections","active_in_connections","active_nodes","active_out_connection_attempts","active_out_connection_attempts","active_out_connections","active_out_connections","advertised","ask_for_block_list","banned","block_not_found","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cleanup","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","default","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drain","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_usize","get_available_out_connection_attempts","get_bootstrap_peers","get_network_stats","get_peers","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_usize","ip","is_active","is_peer_ready","join_handle","last_alive","last_failure","manager_tx","ne","ne","new","new","new","node_ban_by_ids","node_ban_by_ips","node_sign_message","node_unban_by_ids","node_unban_ips","our_node_id","partial_cmp","partial_cmp","peer_info","peer_type","peers","remove_from_whitelist","send_ask_for_operations","send_block","send_block_header","send_endorsements","send_operations","send_operations_batch","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","settings","source","stop","throw_handshake_error","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait_event","whitelist","0","0","0","0","0","0","0","0","0","0","0","batch","block_id","block_id","block_id","endorsements","list","msg","node","node","node","node","node","operations","response_tx","response_tx","to_node","to_node","wishlist","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","block","block_id","endorsements","header","list","node","node","node","node","node","node","node","operation_prefix_ids","operation_prefix_ids","operations","source_node_id","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","NetworkSettings","PeerTypeConnectionConfig","ask_peer_list_interval","ban_timeout","bind","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","connect_timeout","default","deserialize","deserialize","fmt","fmt","from","from","initial_peers_file","into","into","keypair_file","max_banned_peers","max_bytes_read","max_bytes_write","max_idle_peers","max_in_connection_overflow","max_in_connections","max_in_connections_per_ip","max_operations_per_message","max_out_attempts","max_send_wait","message_timeout","peer_list_send_timeout","peer_types_config","peers_file","peers_file_dump_interval","protocol_port","routable_ip","target_out_connections","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","wakeup_interval"],"q":["massa_network_exportsmassa_network_exports::HandshakeErrorType","","","massa_network_exports::NetworkCommand","","","","","","","","","","","","","","","","","","","","","","","","","","massa_network_exports::NetworkConnectionErrorType","","","","","","","massa_network_exports::NetworkError","","","","","","","","","","","","","","","","massa_network_exports::NetworkEvent","","","","","","","","","","","","","","","","","","massa_network_exports::NodeCommand","","","","","","","","","","massa_network_exports::NodeEventType","","","","","","","","","massa_network_exports::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","Active connection missing:<code>{0}</code>","Ask for a block from that node.","Ask for a block to a node.","Ask for a set of operations","Ask for operation","Someone ask for block with given header hash.","Node we are connected to asked for advertised peers","Connection closed after node ban","A banned peer is trying to connect: {0}","Block not found","Didn’t found given block,","Send a message that a block is not found to a node","That node does not have this block","if the peer is in bootstrap servers list for now it is …","Peers that are transmitted during bootstrap","Deserializer for <code>BootstrapPeers</code>","Serializer for <code>BootstrapPeers</code>","An error occurred during channel communication: {0}","Close the node worker.","Try to close connection with no connection: {0}","connection to node was closed","Possible reasons for a connection closure","Connection count for a category","A unique connection id for a node","container inconsistency error: {0}","Connection establisher","Connection failed for some reason","Protocol err:{0}","get peers for bootstrap server","<code>(PeerInfo, Vec &lt;(NodeId, bool)&gt;) peer info + list</code> of …","gets network stats","handshake error:{0:?}","Handshake error type","Id already exist","Unexpected interruption","Invalid signature","if remote id is the same as ours","timeout","wrong handshake message","IO error : {0}","Incompatible version","The ip:<code>{0}</code> address is not valid","Connection listener","<code>MassaHash</code> error {0}","massa_signature error {0}","Max connected peers reached: {0}","missing block","missing operation","missing peers","models error: {0}","Commands that the worker can execute","Network command sender","Incoming and outgoing connection with other peers error …","Network error","network event","network event receiver","Network management command","Network manager","","new connection from node","Ban a list of peer by their node id","Ban a list of peer by their ip address","network command","Events node worker can emit. Events are a tuple linking a …","Event types that node worker can emit Append on receive …","sign message with our node keypair (associated to node id) …","Unban a list of peer by their node id","Unban a list of peer by their ip address","Connection was closed properly","Associate a peer info with nodes","Error during network connection: {0}","All information concerning a peer is here","Peer info not found for address: {0}","Outgoing connection returned a bootstrapable peer list: …","Peer categories. There is a defined number of slots for …","Peer info not found for address: {0}","peers","read half of the TCP stream","Receive a list of asked operations from <code>node</code>","Node we are connected to asks for a block.","Receive a list of wanted operations","Node we are connected to sent block","A block was received","Node we are connected to sent block header","A block header was received","Receive a set of endorsement","received endorsements from node","Received an operation id batch announcing new operations","Receive a list of <code>OperationId</code>","Received full operations.","Receive previously asked Operation","Node we are connected to sent peer list","Remove from whitelist a list of <code>IpAddr</code>","Attempt too connect from you own IP","Send that block to node.","Send that block to node.","Send the header of a block to a node.","Send a header to a node.","Endorsements","Send endorsements to a node","Send a batch of operation ids","Send operation ids batch to a node","Send full Operations (send to a node that previously asked …","Send a batch of full operations","Send given peer list to node.","Serde error : {0}","serialize error: {0}","Just a peer","Time error {0}","error receiving oneshot response : {0}","A tokio task has crashed err:{0}","Too many connection attempt: {0}","Too many connection failure: {0}","Unexpected error","the network controller should not drop a node command …","the writer of a node should not drop its event sender …","Connection from these nodes are always accepted","Whitelist a list of <code>IpAddr</code>","Write half of the TCP stream","wrong signature","Current number of active in connections with that peer. Isn…","Number of currently live (TCP connection active, handshake …","corresponding nodes (true if the connection is outgoing, …","Current number of active out connection attempts with that …","Number of outgoing connections our node is currently …","Current number of active out connections with that peer. …","Number of currently live (TCP connection active, handshake …","Whether peer was promoted through another peer","Send the order to ask for a block.","peer was banned","send block not found to node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cleans up the <code>PeerInfo</code> by normalizing the IP address and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","drains remaining events and returns them in a <code>VecDeque</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Gets available out connection attempts for given …","Send the order to get bootstrap peers.","get network stats","Send the order to get peers.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Peer ip address.","Returns true if there is at least one connection attempt / …","peer is ready to be retried, enough time has elapsed since …","network handle","Time in milliseconds when peer was last alive","Time in milliseconds of peer’s last failure","management commands","","","Creates a new <code>BootstrapPeersSerializer</code>","Creates a new <code>BootstrapPeersDeserializer</code>","New standard <code>PeerInfo</code> for <code>IpAddr</code>","ban node(s) by id(s)","ban node(s) by ip(s)","Sign a message using the node’s keypair","remove from banned node(s) by id(s)","remove from banned node(s) by ip(s)","our node id","","","peer info","The category the peer is in affects how it’s treated.","peers","remove ip from whitelist","Create a new call to the network, sending a <code>wishlist</code> of …","Send the order to send block.","Send the order to send block header.","send endorsements to node id","send operations to node","Create a new call to the network, sending a announcement …","","","","","","","","","network settings","","stop network","return handshake error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","wait network event","add ip to whitelist","","","","","","","","","","","","batch of operation ids","block id","block id","block id","endorsements","node to block ids","arbitrary message","to node id","to node id","to node id","to node id","to node id","operations","response channels","response channels","to node id","to node id","operation ids in the wish list","","","","","","","","","","","","","","","","","","","","","","","","","","block","block id","Endorsements","header","asked blocks","from node id","node id","node id","node id","from node id","from node id","node id","operation prefix ids","operation prefix ids","operations","from node id","","","","","","","","","","","","","","","","","","","","Network configuration","Connection configuration for a peer type Limit the current …","Every <code>ask_peer_list_interval</code> in milliseconds we ask every …","Time after which we forget a node","Where to listen for communications.","","","","","","","","","Time interval spent waiting for a response from a peer. In …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Path to the file containing initial peers.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Path to the file containing our keypair","Limit on the number of banned peers we remember.","Read limitation for a connection in bytes per seconds","Write limitation for a connection in bytes per seconds","Limit on the number of idle peers we remember.","Max number of in connection overflowed managed by the …","max number of incoming connection","Limit on the number of in connections per ip.","Max operations per message in the network to avoid sending …","max number of on going outgoing connection attempt","Max wait time for sending a Network or Node event.","After <code>message_timeout</code> milliseconds we are no longer …","Timeout Duration when we send a <code>PeerList</code> in handshake","Configuration for <code>PeerType</code> connections","Path to the file containing known peers.","Peer database is dumped every <code>peers_file_dump_interval</code> in …","Protocol port","Our own IP if it is routable, else None.","target number of outgoing connections","","","","","","","","","","","<code>Network_worker</code> will try to connect to available peers …"],"i":[25,10,11,1,15,10,32,8,29,8,29,30,9,12,34,8,9,29,30,16,0,0,0,32,8,34,30,0,0,0,32,0,12,32,29,29,29,32,0,33,33,33,33,33,33,32,33,32,0,32,32,34,32,32,32,32,0,0,0,0,0,0,0,0,0,30,29,29,0,0,0,29,29,29,12,0,32,0,34,33,0,34,0,0,30,9,9,9,30,9,30,9,30,9,30,9,30,9,29,34,8,29,8,29,8,29,8,29,8,29,8,32,32,16,32,32,32,34,34,34,32,32,16,29,0,32,7,19,13,7,19,7,19,7,1,7,1,25,55,18,20,8,9,10,29,30,31,11,12,32,33,34,1,13,14,15,16,7,19,25,55,18,20,8,9,10,29,30,31,11,12,32,33,34,1,13,14,15,16,7,19,7,8,9,10,11,12,1,13,14,15,16,7,8,9,10,11,12,1,13,14,15,16,7,11,16,18,11,16,19,20,11,12,13,14,15,16,7,25,11,12,15,16,8,9,10,29,30,31,11,11,12,32,32,33,34,34,13,14,15,16,16,7,19,25,55,18,20,8,9,10,29,30,31,11,12,32,32,32,32,32,32,32,32,32,32,32,33,34,1,13,14,15,16,7,19,16,19,1,1,1,11,16,25,55,18,20,8,9,10,29,30,31,11,12,32,33,34,1,13,14,15,16,7,19,16,7,7,7,55,7,7,55,11,15,18,20,7,1,1,1,1,1,14,11,16,13,7,14,1,1,1,1,1,1,1,18,11,12,13,14,15,16,7,0,32,55,0,8,9,10,11,12,1,13,14,15,16,7,11,32,34,16,25,55,18,20,8,9,10,29,30,31,11,12,32,33,34,1,13,14,15,16,7,19,25,55,18,20,8,9,10,29,30,31,11,12,32,33,34,1,13,14,15,16,7,19,25,55,18,20,8,9,10,29,30,31,11,12,32,33,34,1,13,14,15,16,7,19,25,55,18,20,8,9,10,29,30,31,11,12,32,33,34,1,13,14,15,16,7,19,25,1,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,71,72,73,74,77,77,76,78,70,79,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,105,109,106,110,111,112,107,111,112,110,108,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,0,0,58,58,58,58,45,58,45,58,45,58,45,58,45,58,45,58,45,58,45,58,58,45,58,58,58,58,58,58,45,58,58,45,58,58,58,58,58,58,58,58,45,58,45,58,45,58,45,58,45,58,45,58],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,[5,[2,[4,[3]]]]],6],0,[[1,2,3],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7],[8,8],[9,9],[10,10],[11,11],[12,12],[1,1],[13,13],[14,14],[15,15],[16,16],[7,7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[11,11],17],[[16,16],17],[[],18],[[],11],[[],16],[[],19],[20,[[23,[15,[0,[21,22]]]]]],[[],[[24,[11]]]],[[],[[24,[12]]]],[[],[[24,[13]]]],[[],[[24,[14]]]],[[],[[24,[15]]]],[[],[[24,[16]]]],[[],[[24,[7]]]],[25,6],[[11,11],26],[[12,12],26],[[15,15],26],[[16,16],26],[[8,27],28],[[9,27],28],[[10,27],28],[[29,27],28],[[30,27],28],[[31,27],28],[[11,27],28],[[11,27],28],[[12,27],28],[[32,27],28],[[32,27],28],[[33,27],28],[[34,27],28],[[34,27],28],[[13,27],28],[[14,27],28],[[15,27],28],[[16,27],28],[[16,27],28],[[7,27],28],[[19,27],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35,32],[36,32],[37,32],[34,32],[38,32],[39,32],[[]],[40,32],[41,32],[42,32],[43,32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[44,16],[[19,45],44],[1,6],[1,6],[1,6],[11],[16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16,44],0,[7,26],[[7,46,46],26],0,0,0,0,[[11,11],26],[[15,15],26],[[],18],[47,20],[[48,26],7],[[1,[4,[2]]],6],[[1,[4,[48]]],6],[[1,[4,[49]]],6],[[1,[4,[2]]],6],[[1,[4,[48]]],6],0,[[11,11],[[50,[17]]]],[[16,16],[[50,[17]]]],0,0,0,[[1,[4,[48]]],6],[[1,2,51],6],[[1,2,3],6],[[1,2,3],6],[[1,2,[4,[52]]],6],[[1,2,53],6],[[1,2,51],6],[[18,15,4],[[24,[40]]]],[11,24],[12,24],[13,24],[14,24],[15,24],[16,24],[7,24],0,[32,[[50,[54]]]],[[55,25],6],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],56],[[],56],[[],56],[[],56],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[25,6],[[1,[4,[48]]],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[58,58],[45,45],[[]],[[]],0,[[],45],[[],[[24,[58]]]],[[],[[24,[45]]]],[[58,27],28],[[45,27],28],[[]],[[]],0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],57],[[],57],[[]],[[]],0],"p":[[3,"NetworkCommandSender"],[3,"NodeId"],[3,"BlockId"],[3,"Vec"],[3,"HashMap"],[8,"Future"],[3,"PeerInfo"],[4,"NodeCommand"],[4,"NodeEventType"],[3,"NodeEvent"],[3,"ConnectionId"],[4,"ConnectionClosureReason"],[3,"Peer"],[3,"Peers"],[3,"BootstrapPeers"],[4,"PeerType"],[4,"Ordering"],[3,"BootstrapPeersSerializer"],[3,"ConnectionCount"],[3,"BootstrapPeersDeserializer"],[8,"ParseError"],[8,"ContextError"],[6,"IResult"],[4,"Result"],[3,"NetworkEventReceiver"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"NetworkCommand"],[4,"NetworkEvent"],[4,"NetworkManagementCommand"],[4,"NetworkError"],[4,"HandshakeErrorType"],[4,"NetworkConnectionErrorType"],[3,"Error"],[4,"TimeError"],[4,"ModelsError"],[3,"Error"],[3,"RecvError"],[4,"SerializeError"],[3,"JoinError"],[4,"MassaSignatureError"],[4,"MassaHashError"],[15,"usize"],[3,"PeerTypeConnectionConfig"],[3,"MassaTime"],[15,"u32"],[4,"IpAddr"],[15,"u8"],[4,"Option"],[6,"OperationPrefixIds"],[6,"WrappedEndorsement"],[6,"OperationIds"],[8,"Error"],[3,"NetworkManager"],[3,"String"],[3,"TypeId"],[3,"NetworkSettings"],[13,"HandshakeIdAlreadyExist"],[13,"HandshakeInterruption"],[13,"PeerListReceived"],[13,"GetPeers"],[13,"GetBootstrapPeers"],[13,"NodeBanByIds"],[13,"NodeBanByIps"],[13,"NodeUnbanByIds"],[13,"NodeUnbanByIps"],[13,"Whitelist"],[13,"RemoveFromWhitelist"],[13,"SendOperationAnnouncements"],[13,"SendBlock"],[13,"SendBlockHeader"],[13,"BlockNotFound"],[13,"SendEndorsements"],[13,"AskForBlocks"],[13,"NodeSignMessage"],[13,"SendOperations"],[13,"GetStats"],[13,"AskForOperations"],[13,"CloseConnectionWithNoConnectionToClose"],[13,"PeerInfoNotFoundError"],[13,"PeerTypeNotFoundError"],[13,"TooManyConnectionAttempts"],[13,"TooManyConnectionFailure"],[13,"MaxPeersConnectionReached"],[13,"BannedPeerTryingToConnect"],[13,"GeneralProtocolError"],[13,"ChannelError"],[13,"TokioTaskJoinError"],[13,"TokioRecvError"],[13,"PeerConnectionError"],[13,"InvalidIpError"],[13,"ActiveConnectionMissing"],[13,"IOError"],[13,"SerdeError"],[13,"MassaHashError"],[13,"MassaSignatureError"],[13,"HandshakeError"],[13,"TimeError"],[13,"ModelsError"],[13,"SerializeError"],[13,"ContainerInconsistencyError"],[13,"NewConnection"],[13,"ConnectionClosed"],[13,"ReceivedBlock"],[13,"BlockNotFound"],[13,"ReceivedEndorsements"],[13,"ReceivedBlockHeader"],[13,"AskedForBlocks"],[13,"ReceivedOperations"],[13,"ReceivedOperationAnnouncements"],[13,"ReceiveAskForOperations"],[13,"SendPeerList"],[13,"SendBlock"],[13,"SendBlockHeader"],[13,"AskForBlocks"],[13,"Close"],[13,"BlockNotFound"],[13,"SendOperations"],[13,"SendOperationAnnouncements"],[13,"AskForOperations"],[13,"SendEndorsements"],[13,"ReceivedPeerList"],[13,"ReceivedBlock"],[13,"ReceivedBlockHeader"],[13,"ReceivedAskForBlocks"],[13,"BlockNotFound"],[13,"ReceivedOperations"],[13,"ReceivedOperationAnnouncements"],[13,"ReceivedAskForOperations"],[13,"ReceivedEndorsements"]]},\
"massa_network_worker":{"doc":"Manages a connection with a node","t":[5],"n":["start_network_controller"],"q":["massa_network_worker"],"d":["Starts a new <code>NetworkWorker</code> in a spawned task"],"i":[0],"f":[[[1,2,3,[5,[4]],6,7],8]],"p":[[3,"NetworkSettings"],[6,"Establisher"],[15,"i64"],[3,"BootstrapPeers"],[4,"Option"],[3,"Storage"],[3,"Version"],[8,"Future"]]},\
"massa_node":{"doc":"Massa: The Decentralized and Scaled Blockchain","t":[3,3,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,5,5,5,12,11,12,11,11,12,12,0,5,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Args","Managers","bootstrap_manager","borrow","borrow","borrow_mut","borrow_mut","clap","consensus_manager","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","execution_manager","from","from","from_clap","init","init","into","into","launch","load_or_create_staking_keys_file","main","network_manager","parse_args","password","pointer_metadata","pointer_metadata","pool_manager","protocol_manager","settings","stop","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","vzip","ExecutionSettings","LedgerSettings","LoggingSettings","POOL_CONFIG","SETTINGS","Settings","__private_field","__private_field","api","bootstrap","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","consensus","cursor_delay","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","disk_ledger_path","drop","drop","drop","drop","drop","drop","execution","final_history_length","fmt","fmt","fmt","fmt","from","from","from","from","from","from","init","init","init","init","init","init","initial_sce_ledger_path","into","into","into","into","into","into","ledger","level","logging","max_final_events","network","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pool","protocol","readonly_queue_length","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["massa_node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_node::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Ask for the staking keys file password and load them","To instrument <code>massa-node</code> with <code>tokio-console</code> run","","","Wallet password","","","","","Build here the default node settings from the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,15,15,6,15,6,6,15,15,6,15,6,15,6,15,6,15,15,6,6,15,6,15,6,0,0,0,15,6,6,15,6,15,15,0,0,15,6,15,6,15,6,6,6,6,15,6,0,0,0,0,0,0,25,26,24,24,25,26,21,22,23,24,25,26,21,22,23,24,21,22,23,24,21,22,23,24,24,22,25,25,26,26,21,22,23,24,25,26,21,22,23,24,25,26,21,21,22,22,23,23,24,24,23,25,26,21,22,23,24,24,23,21,22,23,24,25,26,21,22,23,24,25,26,21,22,23,24,23,25,26,21,22,23,24,24,21,24,22,24,25,26,21,22,23,24,24,24,22,21,22,23,24,25,26,21,22,23,24,25,26,21,22,23,24,25,26,21,22,23,24,25,26,21,22,23,24,25,26,21,22,23,24,25,26,21,22,23,24,25,26,21,22,23,24],"f":[0,0,0,[[]],[[]],[[]],[[]],[[],1],0,[2],[2],[2],[2],[[],[[4,[3]]]],[[],[[4,[3]]]],[2],[2],0,[[]],[[]],[5,6],[[],2],[[],2],[[]],[[]],[[7,8],9],[[[11,[10]],12],9],[[],13],0,[[],[[4,[6]]]],0,[[]],[[]],0,0,0,[[14,15,16,16],9],[[],4],[[],4],[[],4],[[],4],[[],17],[[],17],[[[19,[18]]],[[19,[20,18]]]],[[],20],[[],20],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[21,21],[22,22],[23,23],[24,24],[[]],[[]],[[]],[[]],0,0,[25,24],[2],[2],[26,27],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[],[[4,[3]]]],[[],[[4,[3]]]],[[],[[4,[3]]]],[[],[[4,[21]]]],[[],[[4,[22]]]],[[],[[4,[3]]]],[[],[[4,[3]]]],[[],[[4,[23]]]],[[],[[4,[3]]]],[[],[[4,[24]]]],0,[2],[2],[2],[2],[2],[2],0,0,[[21,28],29],[[22,28],29],[[23,28],29],[[24,28],29],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"App"],[15,"usize"],[3,"With"],[4,"Result"],[3,"ArgMatches"],[3,"Args"],[15,"str"],[6,"Map"],[8,"Future"],[3,"String"],[4,"Option"],[3,"Path"],[6,"Result"],[3,"ConsensusEventReceiver"],[3,"Managers"],[3,"StopHandle"],[3,"TypeId"],[3,"Global"],[3,"Box"],[8,"Any"],[3,"LoggingSettings"],[3,"ExecutionSettings"],[3,"LedgerSettings"],[3,"Settings"],[3,"SETTINGS"],[3,"POOL_CONFIG"],[3,"PoolConfig"],[3,"Formatter"],[6,"Result"]]},\
"massa_pool":{"doc":"Pool of operation and endorsements waiting to be included …","t":[12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,3,4,3,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,12,11,5,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["0","AddEndorsements","AddOperations","ChannelError","ContainerInconsistency","FinalOperations","GetEndorsements","GetEndorsementsByAddress","GetEndorsementsById","GetOperationBatch","GetOperations","GetRecentOperations","GetStats","JoinError","MissingOperation","ModelsError","PoolCommand","PoolCommandSender","PoolConfig","PoolError","PoolManager","PoolSettings","ProtocolError","UpdateCurrentSlot","UpdateLatestFinalPeriods","add_endorsements","add_operations","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deserialize","deserialize","final_operations","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_endorsements","get_endorsements_by_address","get_endorsements_by_id","get_operations","get_operations_involving_address","get_pool_stats","into","into","into","into","into","into","max_endorsement_count","max_item_return_count","max_operation_future_validity_start_periods","max_pool_size_per_thread","operation_validity_periods","send_get_operations_announcement","serialize","serialize","settings","source","start_pool_controller","stop","thread_count","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update_current_slot","update_latest_final_periods","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","0","0","address","address","batch_size","creators","endorsements","exclude","max_size","operation_ids","parent","response_tx","response_tx","response_tx","response_tx","response_tx","response_tx","target_slot","target_slot","0","0","0","0","0","0"],"q":["massa_pool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_pool::PoolCommand","","","","","","","","","","","","","","","","","","","","","","","massa_pool::PoolError","","","","",""],"d":["","add endorsements to pool","Add operations to the pool","channel error : {0}","there was an inconsistency between containers","mark operations as final by end of validity period, thread","Get endorsements for block creation","get endorsements by address","get endorsements by id","Get an operation batch for block creation","get operations by id","Get operations by involved address","get pool stats","Join error {0}","missing operation error: {0}","models error: {0}","Commands that can be processed by pool.","Pool command sender","Pool configuration","pool error","pool management handle","Pool configuration, read from a file configuration","Protocol error {0}","current slot update","Latest final periods update","add endorsements to pool","add operations to pool","","","","","","","","","","","","","","","","","","","","","mark operations as final","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","get endorsements for block creation","get endorsements by address","get endorsements by id","get operations by ids","get operation by involved addresses","get pool stats","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","max endorsement we keep in pool","Maximum number of item the pool can pop at a time","how many periods in the future can an op validity start ? …","max pool size per thread (in number of operations)","operation validity periods","Returns a batch of operations ordered from highest to …","","","Configuration set in file configuration (ex: <code>config.toml</code>)","","Creates a new pool controller.","stop pool","thread count","","","","","","","","","","","","","","","","","","","","","","","update current slots","update latest final periods","","","","","","","","","","","","","address","address","expected batch size","expected creators","ids","list of operation ids to exclude  from the batch","max size of an operation in bytes","ids","expected parent","response channel","response channel","response channel","response channel","response channel","response channel","target slot","target slot","","","","","",""],"i":[1,14,14,11,11,14,14,14,14,14,14,14,14,11,11,11,0,0,0,0,0,0,11,14,14,1,1,31,11,1,14,8,9,31,11,1,14,8,9,1,8,9,1,8,9,8,9,1,11,11,14,8,9,31,11,11,11,11,11,1,14,8,9,1,1,1,1,1,1,31,11,1,14,8,9,9,9,9,9,8,1,8,9,8,11,0,31,8,1,8,9,11,31,11,1,14,8,9,31,11,1,14,8,9,31,11,1,14,8,9,1,1,31,11,1,14,8,9,34,35,36,37,38,39,40,41,42,43,44,42,42,45,43,42,45,40,43,41,44,42,43,46,47,48,49,50,51],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,[4,[2,3]]],5],[[1,[4,[6,7]]],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[8,8],[9,9],[[]],[[]],[[]],[[],[[10,[8]]]],[[],[[10,[9]]]],[[1,[4,[6]]],5],[[11,12],13],[[11,12],13],[[14,12],13],[[8,12],13],[[9,12],13],[[]],[15,11],[[[16,[15]]],11],[17,11],[18,11],[[]],[[]],[[]],[[]],[[]],[[1,19,20,[22,[21]]],5],[[1,21],5],[[1,[23,[2]]],5],[[1,[23,[6]]],5],[[1,21],5],[1,5],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[1,19,[23,[6]],24,25],5],[8,10],[9,10],0,[11,[[27,[26]]]],[[8,28,29,30],5],[31,5],0,[[]],[[]],[[]],[[],32],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[1,19],5],[[1,[22,[25]]],5],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[[3,"PoolCommandSender"],[3,"EndorsementId"],[6,"WrappedEndorsement"],[6,"Map"],[8,"Future"],[3,"OperationId"],[6,"WrappedOperation"],[3,"PoolConfig"],[3,"PoolSettings"],[4,"Result"],[4,"PoolError"],[3,"Formatter"],[6,"Result"],[4,"PoolCommand"],[4,"ProtocolError"],[3,"Box"],[4,"ModelsError"],[3,"JoinError"],[3,"Slot"],[3,"BlockId"],[3,"Address"],[3,"Vec"],[6,"Set"],[15,"usize"],[15,"u64"],[8,"Error"],[4,"Option"],[3,"ProtocolCommandSender"],[3,"ProtocolPoolEventReceiver"],[3,"Storage"],[3,"PoolManager"],[3,"String"],[3,"TypeId"],[13,"AddOperations"],[13,"UpdateCurrentSlot"],[13,"UpdateLatestFinalPeriods"],[13,"FinalOperations"],[13,"AddEndorsements"],[13,"GetStats"],[13,"GetRecentOperations"],[13,"GetEndorsementsByAddress"],[13,"GetOperationBatch"],[13,"GetEndorsements"],[13,"GetEndorsementsById"],[13,"GetOperations"],[13,"ContainerInconsistency"],[13,"ProtocolError"],[13,"ChannelError"],[13,"JoinError"],[13,"ModelsError"],[13,"MissingOperation"]]},\
"massa_proof_of_stake_exports":{"doc":"proof of stake exports","t":[3,3,3,8,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,10,11,11,12,12,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,6,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12],"n":["ExportProofOfStake","ExportProofOfStakeDeserializer","ExportProofOfStakeSerializer","OperationRollInterface","ProofOfStake","ProofOfStakeConfig","ThreadCycleState","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cycle","cycle_states","cycle_updates","default","default","deserialize","deserialize","deserialize","deserialize","draw_block_producer","draw_endorsement_producers","endorsement_count","error","fmt","fmt","fmt","from","from","from","from","from","from","from","genesis_key","get_final_roll_data","get_last_final_block_cycle","get_last_final_block_slot","get_locked_roll_count","get_lookback_roll_count","get_next_selected_slot","get_roll_deactivations","get_roll_sell_credit","get_roll_updates","get_stakers_count","get_stakers_production_stats","initial_draw_seed","initial_rolls_path","into","into","into","into","into","into","is_complete","last_final_slot","new","new","new","note_final_blocks","periods_per_cycle","pos_draw_cached_cycles","pos_lock_cycles","pos_lookback_cycles","pos_miss_rate_deactivation_threshold","production_stats","rng_seed","roll_count","roll_price","serialize","serialize","serialize","serialize","set_watched_addresses","thread_count","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","ContainerInconsistency","IOError","ModelsError","NotFinalRollError","POSResult","PosCycleUnavailable","ProofOfStakeError","RollOverflowError","SerdeError","borrow","borrow_mut","fmt","fmt","from","from","from","from","into","source","to_string","try_from","try_into","type_id","vzip","0","0","0","0","0"],"q":["massa_proof_of_stake_exports","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_proof_of_stake_exports::error","","","","","","","","","","","","","","","","","","","","","","","","massa_proof_of_stake_exports::error::ProofOfStakeError","","","",""],"d":["serializable version of the proof of stake","Deserializer for <code>ExportProofOfStake</code>","Serializer for <code>ExportProofOfStake</code>","Roll specific method on operation","Proof of stake management","Proof of stake configuration","Rolls state for a cycle in a thread","","","","","","","","","","","","","","","","","","","Cycle number","Index by thread and cycle number","Cycle roll updates","","","","","","","draw block producer at slot","draw endorsement producer at slot","target number of endorsement per block","proof of stake errors","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","<code>KeyPair</code> to sign genesis blocks.","get roll data at latest final blocks","get cycle at last final block","Returns the latest final block slot known by PoS in a …","gets the number of locked rolls at a given slot for a set …","Gets cycle in which we are drawing at <code>source_cycle</code>","next slot at which address is selected to produce a block","returns the list of addresses whose rolls need to be …","returns the roll sell credit amount (in coins) for each …","get roll related modifications","active stakers count","get production stats for addresses","initial seed","path to initial rolls","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","returns true if all slots of this cycle for this thread …","Last final slot (can be a miss)","Creates a <code>ExportProofOfStakeSerializer</code>","Creates a <code>ExportProofOfStakeDeserializer</code>","new proof of stake component","Update internal states after a set of blocks become final …","cycle duration in periods","number of cached draw cycles for PoS","PoS lock cycles: when some rolls are released, we only …","PoS look back cycles: when drawing for cycle N, we use the …","number of cycle misses (strictly) above which stakers are …","Per-address production statistics <code>(ok_count, nok_count)</code>","Used to seed the random selector at each cycle","Number of rolls an address has","price for one roll","","","","","set watched addresses","Number of threads","","","","","","","","","","","","","","","","","","","","","","","","","","","","there was an inconsistency between containers {0}","io error {0}","models error: {0}","not final roll","Proof of stake result","Proof of stake cycle unavailable {0}","proof of stake error","roll overflow","serde error","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,4,5,10,1,2,3,4,5,10,1,2,3,1,2,3,1,2,3,3,1,3,4,5,5,1,2,3,10,10,2,0,1,2,3,4,5,10,1,1,2,3,2,10,10,10,10,10,10,10,10,38,10,10,2,2,4,5,10,1,2,3,3,3,4,5,10,10,2,2,2,2,2,3,3,3,2,4,1,2,3,10,2,1,2,3,4,5,10,1,2,3,4,5,10,1,2,3,4,5,10,1,2,3,4,5,10,1,2,3,25,25,25,25,0,25,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,39,40,41,42,43],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[[]],[[]],[[]],0,0,0,[[],4],[[],5],[5,[[8,[1,[0,[6,7]]]]]],[[],[[9,[1]]]],[[],[[9,[2]]]],[[],[[9,[3]]]],[[10,11],[[13,[12]]]],[[10,11],[[13,[[14,[12]]]]]],0,0,[[1,15],16],[[2,15],16],[[3,15],16],[[]],[[]],[[]],[10,1],[[]],[[]],[[]],0,[[10,17,18],[[19,[3]]]],[[10,18],17],[[10,18],11],[[10,17,18,20],[[21,[12,17]]]],[[10,17,18],[[13,[22]]]],[[10,11,12],[[19,[11]]]],[[10,17,18],[[13,[[20,[12]]]]]],[[10,17,18],[[13,[[21,[12,23]]]]]],[[],[[9,[24,25]]]],[[10,17],[[13,[17]]]],[[10,20],[[14,[26]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[3,17],27],0,[[],4],[[],5],[[2,[19,[1]]],28],[[10,[21,[29,30]]],13],0,0,0,0,0,0,0,0,0,[[4,1,14],[[9,[31]]]],[1,9],[2,9],[3,9],[[10,[20,[12]]]],0,[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[25,15],16],[[25,15],16],[33,25],[34,25],[35,25],[[]],[[]],[25,[[19,[36]]]],[[],37],[[],9],[[],9],[[],32],[[]],0,0,0,0,0],"p":[[3,"ExportProofOfStake"],[3,"ProofOfStakeConfig"],[3,"ThreadCycleState"],[3,"ExportProofOfStakeSerializer"],[3,"ExportProofOfStakeDeserializer"],[8,"ParseError"],[8,"ContextError"],[6,"IResult"],[4,"Result"],[3,"ProofOfStake"],[3,"Slot"],[3,"Address"],[6,"POSResult"],[3,"Vec"],[3,"Formatter"],[6,"Result"],[15,"u64"],[15,"u8"],[4,"Option"],[6,"Set"],[6,"Map"],[3,"RollCounts"],[3,"Amount"],[3,"RollUpdates"],[4,"ProofOfStakeError"],[3,"StakersCycleProductionStats"],[15,"bool"],[8,"Future"],[3,"BlockId"],[3,"ActiveBlock"],[4,"SerializeError"],[3,"TypeId"],[3,"Error"],[3,"Error"],[4,"ModelsError"],[8,"Error"],[3,"String"],[8,"OperationRollInterface"],[13,"PosCycleUnavailable"],[13,"ContainerInconsistency"],[13,"IOError"],[13,"SerdeError"],[13,"ModelsError"]]},\
"massa_protocol_exports":{"doc":"protocol component exports","t":[12,12,12,13,13,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,4,4,3,4,3,4,3,3,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,5,5,5,11,11,11,11,11,11,5,5,5,5,5,5,5,5,11,11,11,11,12,11,11,12,5,11,11,11,11,11,11,11,11,11,5,5],"n":["0","0","0","ActiveConnectionMissing","AttackBlockDetected","BlocksResults","ChannelError","ContainerInconsistencyError","GeneralProtocolError","GetBlocks","GetBlocksResults","IOError","IntegratedBlock","InvalidIpError","MassaHashError","MissingPeersError","ModelsError","NetworkError","PeerConnectionError","PropagateEndorsements","PropagateOperations","ProtocolCommand","ProtocolCommandSender","ProtocolError","ProtocolEvent","ProtocolEventReceiver","ProtocolManagementCommand","ProtocolManager","ProtocolPoolEvent","ProtocolPoolEventReceiver","ProtocolSettings","ReceivedBlock","ReceivedBlockHeader","ReceivedEndorsements","ReceivedOperations","SerdeError","TimeError","TokioRecvError","TokioSendError","TokioTaskJoinError","UnexpectedNodeCommandChannelClosure","UnexpectedWriterClosure","WishlistDelta","WrongSignature","ask_block_timeout","asked_operations_pruning_period","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deserialize","drain","drain","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","integrated_block","into","into","into","into","into","into","into","into","into","into","max_known_blocks_size","max_known_endorsements_size","max_known_ops_size","max_node_known_blocks_size","max_node_known_endorsements_size","max_node_known_ops_size","max_node_wanted_blocks_size","max_operations_per_message","max_send_wait","max_simultaneous_ask_blocks_per_node","new","notify_block_attack","operation_batch_buffer_capacity","operation_batch_proc_period","propagate_endorsements","propagate_operations","send_get_blocks_results","send_wishlist_delta","serialize","serialize","serialize","serialize","source","stop","tests","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait_event","wait_event","0","0","0","0","block_id","endorsement_ids","new","operation_ids","remove","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","block","block_id","endorsement_ids","header","operation_set","slot","endorsements","operations","propagate","propagate","mock_network_controller","tools","MockNetworkController","borrow","borrow_mut","close_connection","from","into","new","new_connection","send_ask_for_block","send_ask_for_operation","send_block","send_block_not_found","send_endorsements","send_header","send_operation_batch","send_operations","try_from","try_into","type_id","vzip","wait_command","NodeInfo","PROTOCOL_SETTINGS","asked_list","assert_banned_nodes","assert_hash_asked_to_node","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create_and_connect_nodes","create_block","create_block_with_endorsements","create_block_with_operations","create_endorsement","create_node","create_operation_with_expire_period","create_protocol_settings","deref","fmt","from","from","id","into","into","keypair","send_and_propagate_block","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","wait_protocol_event","wait_protocol_pool_event"],"q":["massa_protocol_exportsmassa_protocol_exports::ProtocolCommand","","","","","","","","","massa_protocol_exports::ProtocolError","","","","","","","","","","","","","","","massa_protocol_exports::ProtocolEvent","","","","","","","massa_protocol_exports::ProtocolPoolEvent","","","","massa_protocol_exports::tests","","massa_protocol_exports::tests::mock_network_controller","","","","","","","","","","","","","","","","","","","","","massa_protocol_exports::tests::tools","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","Active connection missing:<code>{0}</code>","A block, or it’s header, amounted to an attempted attack.","block result: map block id to","An error occurred during channel communication: {0}","container inconsistency error: {0}","Protocol err:{0}","Ask for a list of blocks from consensus.","The response to a <code>[ProtocolEvent::GetBlocks]</code>.","IO error : {0}","Notify block integration of a given block.","The ip:<code>{0}</code> address is not valid","<code>massa_hash</code> error {0}","missing peers","models error: {0}","network error: {0}","Error during network connection:<code>{0:?}</code>","Propagate endorsements","Propagate operations (send batches) note: OperationIds are …","Commands that protocol worker can process","protocol command sender","protocol error","Possible types of events that can happen.","Protocol event receiver","protocol management commands","protocol manager used to stop the protocol","Possible types of pool events that can happen.","Protocol pool event receiver","Protocol Configuration","A block with a valid signature has been received.","A block header with a valid signature has been received.","Endorsements were received","Operations were received","Serde error : {0}","Time error {0}","error receiving one shot response : {0}","error sending protocol event: {0}","A tokio task has crashed err:{0}","the network controller should not drop a node command …","the writer of a node should not drop its event sender …","Wish list delta","wrong signature","after <code>ask_block_timeout</code> milliseconds we try to ask a block …","All operations asked are prune each …","","","","","","","","","","","","","","","","","","","","","","","","","","drains remaining events and returns them in a <code>VecDeque</code> …","drains remaining events and returns them in a <code>VecDeque</code> …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Sends the order to propagate the header of a block","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","max known blocks of current nodes we keep in memory (by …","max known endorsements by our node that we kept in memory","max known operations current node kept in memory","max known blocks of foreign nodes we keep in memory (by …","max known endorsements of foreign nodes we keep in memory …","max known operations of foreign nodes we keep in memory …","max wanted blocks per node kept in memory","Maximum of operations sent in one message.","Max wait time for sending a Network or Node event.","we ask for the same block …","new protocol manager","Notify to protocol an attack attempt.","Maximum number of batches in the memory buffer. Dismiss …","Start processing batches in the buffer each …","propagate endorsements to connected node","Propagate a batch of operation ids (from pool).","Send the response to a <code>ProtocolEvent::GetBlocks</code>.","update the block wish list","","","","","","Stop the protocol controller","TODO: Add only if test. Removed the configuration test …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Receives the next <code>ProtocolEvent</code> from connected Node. None …","Receives the next <code>ProtocolPoolEvent</code> None is returned when …","","","","","block id","endorsement ids in the block","add to wish list","operations ids in the block","remove from wish list","","","","","","","","","","","","","","","","","corresponding block","its id","endorsements in the block with index","The header","operations in the block by (index, validity end period)","the slot","the endorsements","the operations","whether or not to propagate operations","whether or not to propagate endorsements","mock network controller","test utilities","mock network controller","","","close connection","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","new mock network controller","new connection","ask for block","received ask for operation from node todo inconsistency …","send block todo inconsistency with names","block not found","send endorsements todo inconsistency with names","send header todo inconsistency with names","send operation ids todo inconsistency with names","send operations todo inconsistency with names","","","","","wait command","test utility structures keeps keypair and associated node …","protocol settings","retrieve what blocks where asked to which nodes","assert a list of node(s) has been banned","assert block id has been asked to node","","","","","","","create number of nodes and connect them with protocol","Creates a block for use in protocol, without paying …","create a block with no operation","create a block with no endorsement","Creates an endorsement for use in protocol tests, without …","create node info","Create an operation, from a specific sender, and with a …","create a <code>ProtocolConfig</code> with typical values","","","Returns the argument unchanged.","Returns the argument unchanged.","node id","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","key pair of the node","send a block and assert it has been propagate (or not)","","","","","","","","","","wait protocol event","wait protocol pool event"],"i":[4,6,1,7,12,0,7,7,7,10,12,7,12,7,7,7,7,7,7,12,12,0,0,0,0,0,0,0,0,0,0,10,10,11,11,7,7,7,7,7,7,7,12,7,2,2,4,6,32,7,10,11,12,13,1,2,4,6,32,7,10,11,12,13,1,2,1,2,1,2,2,4,6,7,7,10,11,12,13,2,4,6,32,7,7,7,7,7,7,7,7,7,7,10,11,12,13,1,2,1,4,6,32,7,10,11,12,13,1,2,2,2,2,2,2,2,2,2,2,2,32,1,2,2,1,1,1,1,10,11,12,13,7,32,0,1,2,7,4,6,32,7,10,11,12,13,1,2,4,6,32,7,10,11,12,13,1,2,4,6,32,7,10,11,12,13,1,2,4,6,32,7,10,11,12,13,1,2,4,6,55,56,57,58,59,59,60,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,77,78,77,77,79,80,80,79,0,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,0,0,0,0,47,53,47,53,47,47,0,0,0,0,0,0,0,0,53,47,47,53,47,47,53,47,0,47,47,53,47,53,47,53,47,53,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[],[[3,[2]]]],[4,5],[6,5],[[7,8],9],[[7,8],9],[[10,8],9],[[11,8],9],[[12,8],9],[[13,8],9],[[2,8],9],[[]],[[]],[[]],[14,7],[15,7],[16,7],[17,7],[18,7],[19,7],[20,7],[21,7],[[]],[[[23,[[22,[10]]]]],7],[[]],[[]],[[]],[[]],[[]],[[]],[[1,24,[26,[25]],[28,[27]]],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[[30,[[3,[29,7]]]],[31,[13]]],32],[[1,24],5],0,0,[[1,[34,[27,33]]],5],[[1,35],5],[[1,36],5],[[1,[26,[24]],[26,[24]]],5],[10,3],[11,3],[12,3],[13,3],[7,[[38,[37]]]],[[32,4,6],5],0,[[]],[[]],[[],39],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,5],[6,5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[41,42],5],[[]],[[]],[[]],[[41,42],5],[[41,42,[28,[24]]],5],[[41,42,35],5],[[41,42,43],5],[[41,42,24],5],[[41,42,[28,[33]]],5],[[41,42,44],5],[[41,42,35],5],[[41,42,45],5],[[],3],[[],3],[[],40],[[]],[[41,46],5],0,0,[41,5],[[[28,[42]],41],5],[[24,42,41],5],[[]],[[]],[[]],[[]],[47,47],[[]],[[48,41],5],[49,43],[[49,50,[28,[33]]],43],[[49,50,[28,[51]]],43],[[],33],[[],47],[[49,52],51],[[],2],[53,2],[[47,8],9],[[]],[[]],0,[[]],[[]],0,[[41,43,54,42,4],5],[[]],[[],3],[[],3],[[],3],[[],3],[[],40],[[],40],[[]],[[]],[[4,46],5],[[6,46],5]],"p":[[3,"ProtocolCommandSender"],[3,"ProtocolSettings"],[4,"Result"],[3,"ProtocolEventReceiver"],[8,"Future"],[3,"ProtocolPoolEventReceiver"],[4,"ProtocolError"],[3,"Formatter"],[6,"Result"],[4,"ProtocolEvent"],[4,"ProtocolPoolEvent"],[4,"ProtocolCommand"],[4,"ProtocolManagementCommand"],[3,"RecvError"],[3,"JoinError"],[4,"NetworkError"],[4,"ModelsError"],[4,"TimeError"],[4,"MassaHashError"],[3,"Error"],[3,"Error"],[3,"SendError"],[3,"Box"],[3,"BlockId"],[3,"OperationId"],[6,"Set"],[3,"EndorsementId"],[3,"Vec"],[3,"NetworkEventReceiver"],[3,"JoinHandle"],[3,"Sender"],[3,"ProtocolManager"],[6,"WrappedEndorsement"],[6,"Map"],[6,"OperationIds"],[6,"BlocksResults"],[8,"Error"],[4,"Option"],[3,"String"],[3,"TypeId"],[3,"MockNetworkController"],[3,"NodeId"],[6,"WrappedBlock"],[6,"WrappedHeader"],[6,"Operations"],[3,"MassaTime"],[3,"NodeInfo"],[15,"usize"],[3,"KeyPair"],[3,"Slot"],[6,"WrappedOperation"],[15,"u64"],[3,"PROTOCOL_SETTINGS"],[15,"bool"],[13,"AttackBlockDetected"],[13,"GetBlocksResults"],[13,"PropagateOperations"],[13,"PropagateEndorsements"],[13,"IntegratedBlock"],[13,"WishlistDelta"],[13,"GeneralProtocolError"],[13,"ChannelError"],[13,"TokioTaskJoinError"],[13,"TokioRecvError"],[13,"TokioSendError"],[13,"PeerConnectionError"],[13,"InvalidIpError"],[13,"ActiveConnectionMissing"],[13,"IOError"],[13,"SerdeError"],[13,"MassaHashError"],[13,"TimeError"],[13,"ModelsError"],[13,"NetworkError"],[13,"ContainerInconsistencyError"],[13,"GetBlocks"],[13,"ReceivedBlock"],[13,"ReceivedBlockHeader"],[13,"ReceivedEndorsements"],[13,"ReceivedOperations"]]},\
"massa_protocol_worker":{"doc":"Protocol component High level management of communications …","t":[0,2,0,3,3,11,11,11,11,12,12,12,12,11,11,11,11,12,12,11,11,5,11,11,11,11,11,11,11,11,6,3,11,11,11,12,11,12,12,11,11,11,11],"n":["protocol_worker","start_protocol_controller","worker_operations_impl","ProtocolWorker","ProtocolWorkerChannels","borrow","borrow","borrow_mut","borrow_mut","controller_command_rx","controller_event_tx","controller_manager_rx","controller_pool_event_tx","from","from","into","into","network_command_sender","network_event_receiver","new","run_loop","start_protocol_controller","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","OperationBatchBuffer","OperationBatchItem","borrow","borrow_mut","from","instant","into","node_id","operations_prefix_ids","try_from","try_into","type_id","vzip"],"q":["massa_protocol_worker","","","massa_protocol_worker::protocol_worker","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_protocol_worker::worker_operations_impl","","","","","","","","","","","",""],"d":["protocol worker","","Contains the implementation of the life cycle of operations","protocol worker","channels used by the protocol worker","","","","","protocol command receiver","protocol event sender","protocol management command receiver","protocol pool event sender","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","network command sender","network event receiver","Creates a new protocol worker.","Main protocol worker loop. Consumes self. It is mostly a …","start a new <code>ProtocolController</code> from a <code>ProtocolConfig</code>","","","","","","","","","Queue containing every <code>[OperationsBatchItem]</code> we want to …","Structure containing a Batch of <code>operation_ids</code> we would …","","","Returns the argument unchanged.","last updated at instant","Calls <code>U::from(self)</code>.","node id","operation prefix ids","","","",""],"i":[0,0,0,0,0,5,3,5,3,3,3,3,3,5,3,5,3,3,3,5,5,0,5,3,5,3,5,3,5,3,0,0,11,11,11,11,11,11,11,11,11,11,11],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],0,0,[[1,2,2,3,4],5],[5,6],[[1,2,2,7,8,4],6],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,[[]],[[]],[[]],0,[[]],0,0,[[],9],[[],9],[[],10],[[]]],"p":[[3,"ProtocolSettings"],[15,"u64"],[3,"ProtocolWorkerChannels"],[3,"Storage"],[3,"ProtocolWorker"],[8,"Future"],[3,"NetworkCommandSender"],[3,"NetworkEventReceiver"],[4,"Result"],[3,"TypeId"],[3,"OperationBatchItem"]]},\
"massa_sdk":{"doc":"Utilities for a massa client","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11],"n":["Client","RpcClient","add_staking_secret_keys","borrow","borrow","borrow_mut","borrow_mut","execute_read_only_bytecode","execute_read_only_call","from","from","from","from_url","get_addresses","get_block","get_endorsements","get_filtered_sc_output_event","get_operations","get_staking_addresses","get_status","into","into","new","node_ban_by_id","node_ban_by_ip","node_remove_from_whitelist","node_sign_message","node_unban_by_id","node_unban_by_ip","node_whitelist","private","public","remove_staking_addresses","send_operations","stop_node","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":["massa_sdk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Client","TODO ask @yvan-sraka","Add a vector of new keypair for the node to use to stake. …","","","","","execute read only bytecode","execute read only SC call","Returns the argument unchanged.","","Returns the argument unchanged.","Default constructor","Get info by addresses","Get information on a block given its <code>BlockId</code>","get info on endorsements by ids","Get events emitted by smart contracts with various filters","Returns operations information associated to a given list …","Return hash-set of staking addresses.","summary of the current state: time, last final blocks …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","creates a new client","Bans given node id(s) No confirmation to expect.","Bans given ip address(es) No confirmation to expect.","remove IPs from whitelist","Sign message with node’s key. Returns the public key …","Unbans given node id(s) No confirmation to expect.","Unbans given ip address(es) No confirmation to expect.","add ips to whitelist create peer if it was unknown","private component","public component","Remove a vector of addresses used to stake. No …","Adds operations to pool. Returns operations that were ok …","Gracefully stop the node.","","","","","","","",""],"i":[0,0,1,21,1,21,1,1,1,21,1,1,1,1,1,1,1,1,1,1,21,1,21,1,1,1,1,1,1,1,21,21,1,1,1,21,1,21,1,21,1,21,1],"f":[0,0,[[1,[3,[2]]],4],[[]],[[]],[[]],[[]],[[1,5],4],[[1,6],4],[[]],[7,1],[[]],[8,4],[[1,[3,[9]]],4],[[1,10],4],[[1,[3,[11]]],4],[[1,12],4],[[1,[3,[13]]],4],[1,4],[1,4],[[]],[[]],[[14,15,15],4],[[1,[3,[16]]],4],[[1,[3,[14]]],4],[[1,[3,[14]]],4],[[1,[3,[17]]],4],[[1,[3,[16]]],4],[[1,[3,[14]]],4],[[1,[3,[14]]],4],0,0,[[1,[3,[9]]],4],[[1,[3,[18]]],4],[1,4],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[]],[[]]],"p":[[3,"RpcClient"],[3,"KeyPair"],[3,"Vec"],[8,"Future"],[3,"ReadOnlyBytecodeExecution"],[3,"ReadOnlyCall"],[3,"RpcChannel"],[15,"str"],[3,"Address"],[3,"BlockId"],[3,"EndorsementId"],[3,"EventFilter"],[3,"OperationId"],[4,"IpAddr"],[15,"u16"],[3,"NodeId"],[15,"u8"],[3,"OperationInput"],[4,"Result"],[3,"TypeId"],[3,"Client"]]},\
"massa_serialization":{"doc":"","t":[3,8,13,13,4,8,13,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["DeserializeError","Deserializer","GeneralError","NumberTooBig","SerializeError","Serializer","StringTooBig","U16VarIntDeserializer","U16VarIntSerializer","U32VarIntDeserializer","U32VarIntSerializer","U64VarIntDeserializer","U64VarIntSerializer","add_context","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","default","deserialize","deserialize","deserialize","deserialize","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_char","from_error_kind","into","into","into","into","into","into","into","into","new","new","new","new","new","new","or","serialize","serialize","serialize","serialize","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0"],"q":["massa_serialization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_serialization::SerializeError","",""],"d":["","Trait that define the deserialize method that must be …","General error {0}","Number {0} is too big to be serialized","","This trait must be implemented to serializes all data in …","String too big {0},","Deserializer for  <code>u16</code> in a varint form.","Serializer for  <code>u16</code> in a varint form.","Deserializer for  <code>u32</code> in a varint form.","Serializer for  <code>u32</code> in a varint form.","Deserializer for  <code>u64</code> in a varint form.","Serializer for  <code>u64</code> in a varint form.","","","","","","","","","","","","","","","","","","","","","","","","","","Deserialize a value <code>T</code> from a buffer of <code>u8</code>.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a basic serializer for  <code>u16</code> in a varint form.","Create a basic deserializer for  <code>u16</code> in a varint form.","Create a basic serializer for  <code>u32</code> in a varint form.","Create a basic deserializer for  <code>u32</code> in a varint form.","Create a basic serializer for  <code>u64</code> in a varint form.","Create a basic deserializer for  <code>u64</code> in a varint form.","","Serialize a value <code>T</code> into a buffer of <code>u8</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,4,4,0,0,4,0,0,0,0,0,0,2,2,4,2,5,11,6,13,7,15,4,2,5,11,6,13,7,15,4,2,4,2,5,6,7,25,11,13,15,4,4,2,2,4,2,5,11,6,13,7,15,2,2,4,2,5,11,6,13,7,15,5,11,6,13,7,15,2,26,5,6,7,4,2,4,2,4,2,5,11,6,13,7,15,4,2,5,11,6,13,7,15,4,2,5,11,6,13,7,15,27,28,29],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],2],[[3,2],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,4],[2,2],[[]],[[]],[[],5],[[],6],[[],7],[[],[[10,[[0,[8,9]]]]]],[11,[[10,[12,[0,[8,9]]]]]],[13,[[10,[14,[0,[8,9]]]]]],[15,[[10,[16,[0,[8,9]]]]]],[[4,17],18],[[4,17],18],[[2,17],18],[[2,17],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,2],[3,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[[20,[12]],[20,[12]]],11],[[],6],[[[20,[14]],[20,[14]]],13],[[],7],[[[20,[16]],[20,[16]]],15],[[2,2],2],[21,[[22,[4]]]],[[5,12,21],[[22,[4]]]],[[6,14,21],[[22,[4]]]],[[7,16,21],[[22,[4]]]],[[]],[[]],[[],23],[[],23],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],0,0,0],"p":[[15,"str"],[3,"DeserializeError"],[4,"ErrorKind"],[4,"SerializeError"],[3,"U16VarIntSerializer"],[3,"U32VarIntSerializer"],[3,"U64VarIntSerializer"],[8,"ParseError"],[8,"ContextError"],[6,"IResult"],[3,"U16VarIntDeserializer"],[15,"u16"],[3,"U32VarIntDeserializer"],[15,"u32"],[3,"U64VarIntDeserializer"],[15,"u64"],[3,"Formatter"],[6,"Result"],[15,"char"],[4,"Bound"],[3,"Vec"],[4,"Result"],[3,"String"],[3,"TypeId"],[8,"Deserializer"],[8,"Serializer"],[13,"NumberTooBig"],[13,"GeneralError"],[13,"StringTooBig"]]},\
"massa_signature":{"doc":"Signature management","t":[3,4,17,13,3,3,17,3,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12],"n":["KeyPair","MassaSignatureError","PUBLIC_KEY_SIZE_BYTES","ParsingError","PublicKey","PublicKeyDeserializer","SIGNATURE_SIZE_BYTES","Signature","SignatureDeserializer","SignatureError","WrongPrefix","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bs58_check","from_bs58_check","from_bs58_check","from_bytes","from_bytes","from_bytes","from_str","from_str","from_str","generate","get_public_key","hash","into","into","into","into","into","into","into_bytes","into_bytes","into_bytes","ne","ne","new","new","partial_cmp","serialize","serialize","serialize","sign","to_bs58_check","to_bs58_check","to_bs58_check","to_bytes","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","verify_signature","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","1"],"q":["massa_signature","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_signature::MassaSignatureError","","",""],"d":["<code>KeyPair</code> is used for signature and decrypting","Error generated by massa-signature crate","Size of a public key","parsing error : {0}","Public key used to check if a message was encoded by the …","Serializer for <code>Signature</code>","Size of a signature","Signature generated from a message and a <code>KeyPair</code>.","Serializer for <code>Signature</code>","signature error : {0}","Wrong prefix for hash: expected {0}, got {1}","","","","","","","","","","","","","","","","","","","","","","","","<code>::serde::Deserialize</code> trait for <code>KeyPair</code> if the deserializer …","<code>::serde::Deserialize</code> trait for <code>PublicKey</code> if the …","","<code>::serde::Deserialize</code> trait for <code>Signature</code> if the …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Decode a base58 encoded keypair","Deserialize a <code>PublicKey</code> using <code>bs58</code> encoding with checksum.","Deserialize a <code>Signature</code> using <code>bs58</code> encoding with checksum.","Convert a byte array of size <code>SECRET_KEY_SIZE_BYTES</code> to a …","Deserialize a <code>PublicKey</code> from bytes.","Deserialize a Signature from bytes.","","","","Generate a new <code>KeyPair</code>","Get the public key of the keypair","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the bytes representing the keypair","Serialize into bytes.","Serialize a Signature into bytes.","","","Creates a <code>SignatureDeserializer</code>","Creates a <code>SignatureDeserializer</code>","","<code>::serde::Serialize</code> trait for <code>KeyPair</code> if the serializer is …","<code>::serde::Serialize</code> trait for <code>PublicKey</code> if the serializer …","<code>::serde::Serialize</code> trait for <code>Signature</code> if the serializer …","Returns the Signature produced by signing data bytes with …","Encode a keypair into his base58 form","Serialize a <code>PublicKey</code> using <code>bs58</code> encoding with checksum.","Serialize a <code>Signature</code> using <code>bs58</code> encoding with checksum.","Return the bytes representing the keypair (should be a …","Serialize a <code>PublicKey</code> as bytes.","Serialize a Signature as bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks if the <code>Signature</code> associated with data bytes was …","","","","","","","","","",""],"i":[0,0,0,1,0,0,0,0,0,1,1,1,2,3,6,4,7,1,2,3,6,4,7,1,2,3,4,1,2,3,4,3,6,7,2,3,6,4,7,3,4,1,1,2,2,3,3,4,4,1,2,3,6,4,7,2,3,4,2,3,4,2,3,4,2,2,3,1,2,3,6,4,7,2,3,4,3,4,6,7,3,2,3,4,2,2,3,4,2,3,4,1,2,3,4,1,2,3,4,1,2,3,6,4,7,1,2,3,6,4,7,1,2,3,6,4,7,3,1,2,3,6,4,7,22,23,24,24],"f":[0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[[]],[[]],[[]],[[]],[[3,3],5],[[],6],[[],7],[8,[[9,[2]]]],[8,[[9,[3]]]],[6,[[12,[3,[0,[10,11]]]]]],[8,[[9,[4]]]],[7,[[12,[4,[0,[10,11]]]]]],[[3,3],13],[[4,4],13],[[1,14],15],[[1,14],15],[[2,14],15],[[2,14],15],[[3,14],15],[[3,14],15],[[4,14],15],[[4,14],15],[[]],[[]],[[]],[[]],[[]],[[]],[16,[[9,[2,1]]]],[16,[[9,[3,1]]]],[16,[[9,[4,1]]]],[[],[[9,[2,1]]]],[[],[[9,[3,1]]]],[[],[[9,[4,1]]]],[16,[[9,[2]]]],[16,[[9,[3]]]],[16,[[9,[4]]]],[[],2],[2,3],[3],[[]],[[]],[[]],[[]],[[]],[[]],[2],[3],[4],[[3,3],13],[[4,4],13],[[],6],[[],7],[[3,3],[[17,[5]]]],[[2,18],9],[[3,18],9],[[4,18],9],[[2,19],[[9,[4,1]]]],[2,20],[3,20],[4,20],[2],[3],[4],[[]],[[]],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[3,19,4],[[9,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0],"p":[[4,"MassaSignatureError"],[3,"KeyPair"],[3,"PublicKey"],[3,"Signature"],[4,"Ordering"],[3,"PublicKeyDeserializer"],[3,"SignatureDeserializer"],[8,"Deserializer"],[4,"Result"],[8,"ParseError"],[8,"ContextError"],[6,"IResult"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"str"],[4,"Option"],[8,"Serializer"],[3,"Hash"],[3,"String"],[3,"TypeId"],[13,"ParsingError"],[13,"SignatureError"],[13,"WrongPrefix"]]},\
"massa_storage":{"doc":"This crate is used to share blocks across the node","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Storage","borrow","borrow_mut","clone","clone_into","default","find_operations","from","into","remove_blocks","remove_operations","retrieve_block","retrieve_operation","store_block","store_operation","to_owned","try_from","try_into","type_id","vzip","with_operation","with_operations"],"q":["massa_storage","","","","","","","","","","","","","","","","","","","","",""],"d":["A storage of block, shared by various components.","","","","","","Returns a set of operation ids that are found in storage.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Remove a list of blocks from storage.","Remove a list of operations from storage.","Get a (mutable) reference to the stored block.","Get a clone of the potentially stored operation.","Store a block, along with it’s serialized representation.","Store an operation, along with it’s serialized …","","","","","","Run a closure over a reference to a potentially stored …","Run a closure over a list of references to potentially …"],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[1,1],[[]],[[],1],[[1,[3,[2]]],[[3,[2]]]],[[]],[[]],[1],[1],[[1,4],[[8,[[7,[[6,[5]]]]]]]],[[1,2],[[8,[9]]]],[[1,5]],[[1,9]],[[]],[[],10],[[],10],[[],11],[[]],[[1,2]],[1]],"p":[[3,"Storage"],[3,"OperationId"],[6,"Set"],[3,"BlockId"],[6,"WrappedBlock"],[6,"RwLock"],[3,"Arc"],[4,"Option"],[6,"WrappedOperation"],[4,"Result"],[3,"TypeId"]]},\
"massa_time":{"doc":"Unsigned time management","t":[13,13,18,3,3,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["CheckedOperationError","ConversionError","EPSILON","MassaTime","MassaTimeDeserializer","MassaTimeSerializer","TimeError","TimeOverflowError","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_div_time","checked_div_u64","checked_mul","checked_rem_time","checked_rem_u64","checked_sub","clone","clone","clone_into","clone_into","cmp","compensated_now","days_hours_mins_secs","default","deserialize","deserialize","eq","estimate_instant","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_str","hash","into","into","into","into","ne","new","new","now","partial_cmp","saturating_add","saturating_mul","saturating_sub","serialize","serialize","to_duration","to_millis","to_owned","to_owned","to_string","to_string","to_utc_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0"],"q":["massa_time","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_time::TimeError"],"d":["Checked operation error : {0}","Error converting","Smallest time interval","Time structure used everywhere. milliseconds since …","Deserializer for <code>MassaTime</code>","Serializer for <code>MassaTime</code>","Time related errors","Time overflow error","","","","","","","","","","","","","","","","","","","","","Gets current compensated UNIX timestamp (resolution: …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Conversion from <code>u64</code>, representing timestamp in …","Conversion from <code>u64</code>, representing timestamp in …","Conversion from <code>&amp;str</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a <code>MassaTimeSerializer</code>","Creates a <code>MassaTimeDeserializer</code>","Gets current UNIX timestamp (resolution: milliseconds).","","","","","","","Conversion to <code>std::time::Duration</code>.","Conversion to <code>u64</code>, representing milliseconds.","","","","","","","","","","Conversion from <code>std::time::Duration</code>.","","","","","","","","",""],"i":[2,2,1,0,0,0,0,2,7,8,2,1,7,8,2,1,1,1,1,1,1,1,1,2,1,2,1,1,1,1,7,8,1,1,1,2,2,1,1,7,8,2,1,1,1,1,1,7,8,2,1,1,7,8,1,1,1,1,1,7,1,1,1,2,1,2,1,1,7,8,2,1,1,7,8,2,1,7,8,2,1,23],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],[[3,[1,2]]]],[[1,1],[[3,[4,2]]]],[[1,4],[[3,[1,2]]]],[[1,4],[[3,[1,2]]]],[[1,1],[[3,[1,2]]]],[[1,4],[[3,[1,2]]]],[[1,1],[[3,[1,2]]]],[2,2],[1,1],[[]],[[]],[[1,1],5],[6,[[3,[1,2]]]],[1,[[3,[2]]]],[[],7],[8,[[11,[1,[0,[9,10]]]]]],[[],[[3,[1]]]],[[1,1],12],[[1,6],[[3,[13,2]]]],[[2,14],15],[[2,14],15],[[1,14],15],[[1,14],15],[[]],[[]],[[]],[[]],[4,1],[4,1],[16,[[3,[1]]]],[1],[[]],[[]],[[]],[[]],[[1,1],12],[[],7],[[],8],[[],[[3,[1,2]]]],[[1,1],[[17,[5]]]],[[1,1],1],[[1,4],1],[[1,1],1],[[7,1,18],[[3,[19]]]],[1,3],[1,20],[1,4],[[]],[[]],[[],21],[[],21],[1,21],[[],3],[[],3],[[],3],[[],3],[20,[[3,[1]]]],[[],3],[[],3],[[],3],[[],3],[[],22],[[],22],[[],22],[[],22],0],"p":[[3,"MassaTime"],[4,"TimeError"],[4,"Result"],[15,"u64"],[4,"Ordering"],[15,"i64"],[3,"MassaTimeSerializer"],[3,"MassaTimeDeserializer"],[8,"ParseError"],[8,"ContextError"],[6,"IResult"],[15,"bool"],[3,"Instant"],[3,"Formatter"],[6,"Result"],[15,"str"],[4,"Option"],[3,"Vec"],[4,"SerializeError"],[3,"Duration"],[3,"String"],[3,"TypeId"],[13,"CheckedOperationError"]]},\
"massa_wallet":{"doc":"Standalone massa wallet Keypair management","t":[13,13,13,13,13,13,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12],"n":["IOError","JSONError","MassaCipherError","MassaHashError","MissingKeyError","ModelsError","SerdeqsError","Wallet","WalletError","add_keypair","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create_operation","deserialize","find_associated_keypair","find_associated_public_key","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_full_wallet","get_wallet_address_list","into","into","keys","new","password","remove_address","serialize","sign_message","source","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","wallet_path","0","0","0","0","0","0","0"],"q":["massa_wallet","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_wallet::WalletError","","","","","",""],"d":["IO error: {0}","JSON error: {0}","<code>MassaCipher</code> error: {0}","<code>MassaHash</code> error: {0}","Missing key error: {0}","Models error: {0}","Serde Sq error: {0}","Contains the keypairs created in the wallet.","wallet error","Adds a new keypair to wallet, if it was missing returns …","","","","","","","Signs an operation with the keypair corresponding to the …","","Finds the keypair associated with given address","Finds the public key associated with given address","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Export keys and addresses","Get all addresses in the wallet","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Keypairs and addresses","Generates a new wallet initialized with the provided file …","Password","Remove a wallet entry (keys and address) given the address …","","Sign arbitrary message with the associated keypair returns …","","","","","","","","","","","","","Path to the file containing the keypairs (encrypted)","","","","","","",""],"i":[4,4,4,4,4,4,4,0,0,1,4,1,4,1,1,1,1,1,1,1,4,4,1,1,4,4,4,4,4,4,4,1,1,1,4,1,1,1,1,1,1,1,4,1,4,1,4,1,4,1,4,1,4,1,1,27,28,29,30,31,32,33],"f":[0,0,0,0,0,0,0,0,0,[[1,2],[[5,[3,4]]]],[[]],[[]],[[]],[[]],[1,1],[[]],[[1,6,3],[[5,[7,4]]]],[[],[[5,[1]]]],[[1,3],[[8,[2]]]],[[1,3],[[8,[9]]]],[[4,10],11],[[4,10],11],[[1,10],11],[[1,10],11],[12,4],[13,4],[14,4],[15,4],[16,4],[17,4],[[]],[[]],[1,18],[1,[[19,[3]]]],[[]],[[]],0,[[20,21],[[5,[1,4]]]],0,[[1,3],[[5,[4]]]],[1,5],[[1,3,[23,[22]]],[[8,[24]]]],[4,[[8,[25]]]],[[]],[[],21],[[],21],[[],5],[[],5],[[],5],[[],5],[[],26],[[],26],[[]],[[]],0,0,0,0,0,0,0,0],"p":[[3,"Wallet"],[3,"KeyPair"],[3,"Address"],[4,"WalletError"],[4,"Result"],[3,"Operation"],[6,"WrappedOperation"],[4,"Option"],[3,"PublicKey"],[3,"Formatter"],[6,"Result"],[4,"ModelsError"],[4,"Error"],[3,"Error"],[3,"Error"],[4,"MassaHashError"],[4,"CipherError"],[6,"Map"],[6,"Set"],[3,"PathBuf"],[3,"String"],[15,"u8"],[3,"Vec"],[3,"PubkeySig"],[8,"Error"],[3,"TypeId"],[13,"IOError"],[13,"JSONError"],[13,"SerdeqsError"],[13,"ModelsError"],[13,"MassaHashError"],[13,"MissingKeyError"],[13,"MassaCipherError"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
