window.SIDEBAR_ITEMS = {"fn":[["array_from_slice","array from slice"],["get_serialization_context","Get a clone of the context. For tests only."],["init_serialization_context","Initialize the global context, should be called once at start up or used at the beginning of a test."],["u8_from_slice","`u8` from slice"],["with_serialization_context","Use the TLS context, should be called only after initializing the global context."]],"mod":[["active_block","active blocks related structures"],["address","address related structures"],["amount","amount related structures"],["api","structure use by the API"],["clique","clique"],["composite","various structures"],["constants","Expose constants"],["error","models error"],["execution","execution related structures"],["ledger_models","ledger related structures"],["node","node related structure"],["operation","operations"],["output_event","smart contract output events"],["prehash","pre-hashed trait, for hash less hashmap/set"],["rolls","rolls"],["slot","slots"],["stats","various statistics"],["timeslots","management of the relation between time and slots warning: assumes `thread_count >= 1, t0_millis >= 1, t0_millis % thread_count == 0`"],["wrapped","trait for signed structure"]],"struct":[["Block","block"],["BlockDeserializer","Deserializer for `Block`"],["BlockHeader","block header"],["BlockHeaderDeserializer","Deserializer for `BlockHeader`"],["BlockHeaderSerializer","Serializer for `BlockHeader`"],["BlockId","block id"],["BlockSerializer","Serializer for `Block`"],["CompactConfig","Compact representation of key values of consensus algorithm used in API"],["Endorsement","an endorsement, as sent in the network"],["EndorsementDeserializer","Deserializer for `Endorsement`"],["EndorsementId","endorsement id"],["EndorsementSerializer","Serializer for `Endorsement`"],["IpAddrDeserializer","Deserializer for `IpAddr`"],["IpAddrSerializer","Serializer for `IpAddr`"],["SerializationContext","a context for model serialization/deserialization"],["StringDeserializer","Deserializer for `String` with generic deserializer for the size of the string"],["StringSerializer","Serializer for `String` with generic serializer for the size of the string"],["VecU8Deserializer","Basic `Vec<u8>` deserializer"],["VecU8Serializer","Basic `Vec<u8>` serializer"],["Version","Application version, checked during handshakes"],["VersionDeserializer","Serializer for `Version`"],["VersionSerializer","Serializer for `Version`"]],"trait":[["DeserializeCompact","custom deserialization trait"],["DeserializeMinBEInt","Deserialize min big endian"],["DeserializeVarInt","var int deserialization"],["SerializeCompact","custom serialization trait"],["SerializeMinBEInt","Serialize min big endian integer"],["SerializeVarInt","varint serialization"]],"type":[["WrappedBlock","Wrapped Block"],["WrappedEndorsement","Wrapped endorsement"],["WrappedHeader","wrapped header"]]};