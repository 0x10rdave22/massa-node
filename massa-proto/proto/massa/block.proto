syntax = "proto3";

package massa.api.v1;

import "endorsement.proto";
import "operation.proto";
import "slot.proto";

option cc_enable_arenas = true;
option csharp_namespace = "Massa.Api.V1";
option go_package = "google.golang.org/genproto/massa/api/v1/block;block";
option java_multiple_files = true;
option java_package = "com.massa.api.v1";
option objc_class_prefix = "BLOCK";
option php_namespace = "Massa\\Api\\V1";


// Block
message Block {
    // Signed header
    SecureShareBlockHeader header = 1;
    // Operations ids
    repeated string operations = 2;
}

// Filled block
message FilledBlock {
    // Signed header
    SecureShareBlockHeader header = 1;
    // Operations
    repeated FilledOperationTuple operations = 2;
}

// message struct
message BlockHeader {
    // Slot
    Slot slot = 1;
    // parents
    repeated string parents = 2;
    // All operations hash
    string operation_merkle_root = 3;
    // Signed endorsements
    repeated SecureShareEndorsement endorsements = 4;
}

// Filled Operation Tuple
message FilledOperationTuple {
    // Operation id
    string operationId = 1;
    // Signed operation
    SecureShareOperation operation = 2;
}

// Packages type Block such that it can be securely sent and received in a trust-free network
message SecureShareBlock {
    // Block
    Block content = 1;
    // Content in sharable, deserializable form. Is used in the secure verification protocols
    bytes serialized_data = 2;
    // A cryptographically generated value using `serialized_data` and a public key.
    string signature = 3;
    // The public-key component used in the generation of the signature
    string content_creator_pub_key = 4;
    // Derived from the same public key used to generate the signature
    string content_creator_address = 5;
    // A secure hash of the data. See also [massa_hash::Hash]
    string id = 6;
}

// Packages type BlockHeader such that it can be securely sent and received in a trust-free network
message SecureShareBlockHeader {
    // BlockHeader
    BlockHeader content = 1;
    // Content in sharable, deserializable form. Is used in the secure verification protocols
    bytes serialized_data = 2;
    // A cryptographically generated value using `serialized_data` and a public key.
    string signature = 3;
    // The public-key component used in the generation of the signature
    string content_creator_pub_key = 4;
    // Derived from the same public key used to generate the signature
    string content_creator_address = 5;
    // A secure hash of the data. See also [massa_hash::Hash]
    string id = 6;
}
