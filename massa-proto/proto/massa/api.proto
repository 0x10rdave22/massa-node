syntax = "proto3";

package massa.api.v1;

import "block.proto";
import "common.proto";
import "endorsement.proto";
import "operation.proto";
import "slot.proto";

import "google/api/annotations.proto";
import "google/rpc/status.proto";

option cc_enable_arenas = true;
option csharp_namespace = "Massa.Api.V1";
option go_package = "google.golang.org/genproto/massa/api/v1/grpc;grpc";
option java_multiple_files = true;
option java_package = "com.massa.api.v1";
option objc_class_prefix = "GRPC";
option php_namespace = "Massa\\Api\\V1";

// Massa gRPC service
service Grpc {

    // Get blocks by slots
    rpc GetBlocksBySlots (GetBlocksBySlotsRequest) returns (GetBlocksBySlotsResponse) {
        option (google.api.http) = {get: "/v1/get_blocks_by_slots"};
    }

    // Get datastore entries
    rpc GetDatastoreEntries (GetDatastoreEntriesRequest) returns (GetDatastoreEntriesResponse) {
        option (google.api.http) = {
            post: "/v1/get_datastore_entries"
            body: "*"
        };
    }

    // Get next block best parents
    rpc GetNextBlockBestParents (GetNextBlockBestParentsRequest) returns (GetNextBlockBestParentsResponse) {
        option (google.api.http) = {get: "/v1/get_next_block_best_parents"};
    }

    // Get selector draws
    rpc GetSelectorDraws (GetSelectorDrawsRequest) returns (GetSelectorDrawsResponse) {
        option (google.api.http) = {
            post: "/v1/get_selector_draws"
            body: "*"
        };
    }

    // Get transactions throughput
    rpc GetTransactionsThroughput (GetTransactionsThroughputRequest) returns (GetTransactionsThroughputResponse) {
        option (google.api.http) = {get: "/v1/transactions_throughput"};
    }

    // Get node version
    rpc GetVersion (GetVersionRequest) returns (GetVersionResponse) {
        option (google.api.http) = {get: "/v1/version"};
    }

    // ███████╗████████╗██████╗ ███████╗ █████╗ ███╗   ███╗
    // ██╔════╝╚══██╔══╝██╔══██╗██╔════╝██╔══██╗████╗ ████║
    // ███████╗   ██║   ██████╔╝█████╗  ███████║██╔████╔██║
    // ╚════██║   ██║   ██╔══██╗██╔══╝  ██╔══██║██║╚██╔╝██║
    // ███████║   ██║   ██║  ██║███████╗██║  ██║██║ ╚═╝ ██║

    // New received and produced blocks
    rpc NewBlocks (stream NewBlocksStreamRequest) returns (stream NewBlocksStreamResponse) {}

    // New received and produced blocks headers
    rpc NewBlocksHeaders (stream NewBlocksHeadersStreamRequest) returns (stream NewBlocksHeadersStreamResponse) {}

    // New received and produced blocks with operations
    rpc NewFilledBlocks (stream NewFilledBlocksStreamRequest) returns (stream NewFilledBlocksStreamResponse) {}

    // New received and produced perations
    rpc NewOperations (stream NewOperationsStreamRequest) returns (stream NewOperationsStreamResponse) {}

    // Send blocks
    rpc SendBlocks (stream SendBlocksStreamRequest) returns (stream SendBlocksStreamResponse) {}

    // Send endorsements
    rpc SendEndorsements (stream SendEndorsementsStreamRequest) returns (stream SendEndorsementsStreamResponse) {}

    // Send operations 
    rpc SendOperations (stream SendOperationsStreamRequest) returns (stream SendOperationsStreamResponse) {}

    // Transactions throughput per second
    rpc TransactionsThroughput (stream TransactionsThroughputStreamRequest) returns (stream GetTransactionsThroughputResponse) {}

}

// GetBlocksBySlotsRequest holds request for GetBlocksBySlots
message GetBlocksBySlotsRequest {
    // Request id
    string id = 1;
    // Slots
    repeated Slot slots = 2;
}

// GetBlocksBySlotsResponse holds response from GetBlocksBySlots
message GetBlocksBySlotsResponse {
    // Request id
    string id = 1;
    // Blocks
    repeated Block blocks = 2;
}

// GetDatastoreEntriesRequest holds request from GetDatastoreEntries
message GetDatastoreEntriesRequest {
    // Request id
    string id = 1;
    // Queries
    repeated DatastoreEntriesQuery queries = 2;
}

// DatastoreEntries Query
message DatastoreEntriesQuery {
    // Filter
    DatastoreEntryFilter filter = 1;
}

message DatastoreEntryFilter {
    /// Associated address of the entry
    string address = 1;
    // Datastore key
    bytes key = 2;
}

// GetDatastoreEntriesResponse holds response from GetDatastoreEntries
message GetDatastoreEntriesResponse {
    // Request id
    string id = 1;
    // Datastore entries
    repeated DatastoreEntry entries = 2;
}

// DatastoreEntry
message DatastoreEntry {
    // final datastore entry value
    bytes final_value = 1;
    // candidate_value datastore entry value
    bytes candidate_value = 2;
}

// GetNextBlockBestParentsRequest holds request for GetNextBlockBestParents
message GetNextBlockBestParentsRequest {
    // Request id
    string id = 1;
}

// GetNextBlockBestParentsResponse holds response from GetNextBlockBestParents
message GetNextBlockBestParentsResponse {
    // Request id
    string id = 1;
    // Best parents
    repeated BlockParent parents = 2;
}

// Block parent tuple
message BlockParent {
    // Block id
    string blockId = 1;
    // Period
    fixed64 period = 2;
}

// GetSelectorDrawsRequest holds request from GetSelectorDraws
message GetSelectorDrawsRequest {
    // Request id
    string id = 1;
    // Queries
    repeated SelectorDrawsQuery queries = 2;
}

// SelectorDraws Query
message SelectorDrawsQuery {
    // Filter
    SelectorDrawsFilter filter = 1;
}
// SelectorDraws Filter
message SelectorDrawsFilter {
    // Address
    string address = 1;
}

// GetSelectorDrawsResponse holds response from GetSelectorDraws
message GetSelectorDrawsResponse {
    // Request id
    string id = 1;
    // Selector draws
    repeated SelectorDraws selector_draws = 2;
}

// Selector draws
message SelectorDraws {
    // Address
    string address = 1;
    // Next block draws
    repeated Slot next_block_draws = 2;
    // Next endorsements draws
    repeated IndexedSlot next_endorsement_draws = 3;
}

// GetTransactionsThroughputRequest holds request for GetTransactionsThroughput
message GetTransactionsThroughputRequest {
    // Request id
    string id = 1;
}

// GetTransactionsThroughputResponse holds response from GetTransactionsThroughput
message GetTransactionsThroughputResponse {
    // Request id
    string id = 1;
    // Transactions throughput
    fixed32 throughput = 2;
}

// GetVersionRequest holds request from GetVersion
message GetVersionRequest {
    // Request id
    string id = 1;
}

// GetVersionResponse holds response from GetVersion
message GetVersionResponse {
    // Request id
    string id = 1;
    // Version
    string version = 2;
}

// NewBlocksStreamRequest holds request for NewBlocksStream
message NewBlocksStreamRequest {
    // Request id
    string id = 1;
}

// NewBlocksStreamResponse holds response from NewBlocksStream
message NewBlocksStreamResponse {
    // Request id
    string id = 1;
    // Signed block
    SignedBlock block = 2;
}

// NewBlocksHeadersStreamRequest holds request for NewBlocksHeadersStream
message NewBlocksHeadersStreamRequest {
    // Request id
    string id = 1;
}

// NewBlocksHeadersStreamResponse holds response from NewBlocksHeadersStream
message NewBlocksHeadersStreamResponse {
    // Request id
    string id = 1;
    // Signed block header
    SignedBlockHeader block_header = 2;
}

// NewFilledBlocksStreamRequest holds request for NewFilledBlocksStream
message NewFilledBlocksStreamRequest {
    // Request id
    string id = 1;
}

// NewFilledBlocksStreamResponse holds response from NewFilledBlocksStream
message NewFilledBlocksStreamResponse {
    // Request id
    string id = 1;
    // Block with operations content
    FilledBlock filled_block = 2;
}

// NewOperationsStreamRequest holds request for NewOperationsStream
message NewOperationsStreamRequest {
    // Request id
    string id = 1;
    // Query
    NewOperationsStreamQuery query = 2;
}

// NewOperationsStream Query
message NewOperationsStreamQuery {
    // Filter
    NewOperationsStreamFilter filter = 1;
}
// NewOperationsStream Filter
message NewOperationsStreamFilter {
    // Operation type enum
    repeated OperationTypeEnum types = 1;
}

// Operation type enum
enum OperationTypeEnum {
    TRANSACTION = 0;
    ROLL_BUY = 1;
    ROLL_SELL = 2;
    EXECUTE_SC = 3;
    CALL_SC = 4;
}

// NewOperationsStreamResponse holds response from NewOperationsStream
message NewOperationsStreamResponse {
    // Request id
    string id = 1;
    // Signed operation
    SignedOperation operation = 2;
}

// SendBlocksStreamRequest holds parameters to SendBlocks
message SendBlocksStreamRequest {
    // Request id
    string id = 1;
    // Secure shared block
    SecureShare block = 2;
}

// SendBlocksStreamResponse holds response from SendBlocks
message SendBlocksStreamResponse {
    // Request id
    string id = 1;
    // Block result or a gRPC status
    oneof result {
        BlockResult ok = 2;
        google.rpc.Status error = 3;
    }
}

// Holds Block response
message BlockResult {
    // Block id
    string block_id = 1;
}

// SendEndorsementsStreamRequest holds parameters to SendEndorsements
message SendEndorsementsStreamRequest {
    // Request id
    string id = 1;
    // Secure shared endorsements
    repeated SecureShare endorsements = 2;
}

// SendEndorsementsStreamResponse holds response from SendEndorsements
message SendEndorsementsStreamResponse {
    // Request id
    string id = 1;
    // Endorsement result or gRPC status
    oneof message {
        EndorsementResult result = 2;
        google.rpc.Status error = 3;
    }
}

// Holds Endorsement response
message EndorsementResult {
    // Endorsements ids
    repeated string endorsements_ids = 1;
}

// SendOperationsStreamRequest holds parameters to SendOperations
message SendOperationsStreamRequest {
    // Request id
    string id = 1;
    // Secured shared operations
    repeated SecureShare operations = 2;
}

// SendOperationsStreamResponse holds response from SendOperations
message SendOperationsStreamResponse {
    // Request id
    string id = 1;
    // Operation result or gRPC status
    oneof message {
        OperationResult result = 2;
        google.rpc.Status error = 3;
    }
}

// Holds Operation response
message OperationResult {
    // Operation(s) id(s)
    repeated string operations_ids = 1;
}

// TransactionsThroughputStreamRequest holds request for TransactionsThroughputStream
message TransactionsThroughputStreamRequest {
    // Request id
    string id = 1;
    // Optional timer interval in sec. Defaults to 10s
    optional fixed64 interval = 2;
}
